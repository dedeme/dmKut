// Copyright 12-Apr-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Sportium reader.

import "libdm/ext";
import "libdm/log";
import "data/cts";
import "data/bet";
import "data/tBet";

// \s -> [<TBets>.]
readBets = \tx -> {
  day = time.day(time.now());
  // [<TBets>.]
  R = [];
  ixV = [0];
  while () {
    homeV = [-1];
    outV =[-1];
    r1V = [-1];
    rxV = [-1];
    r2V = [-1];

    ixV! = str.indexFrom(
      tx,
      'La Liga</div></div><div class="ta-Button EventDetailsRow"',
      ixV!
      );

    if (ixV! == -1) break;

    //hoy
    ixV! = str.indexFrom(tx, 'Hoy,', ixV!);
    if (ixV! == -1) continue;

    // E1
    ixV! = str.indexFrom(tx, 'overflow: hidden;">', ixV!);
    if (ixV! != -1) {
      ix = ixV! + 19;
      ix2 = str.indexFrom(tx, "<", ix);
      if (ix2 != -1) {
        team = tx[ix:ix2];
        iteam = arr.index(cts.SportiumTeams, \t -> return t == team;);
        if (iteam != -1) homeV! = iteam;
        else {
          sys.println("Team " + team + " not found in Sportium");
          log.warning("Team " + team + " not found in Sportium");
          continue;
        }
      } else continue;
    } else continue;

    // E2
    ixV! = str.indexFrom(tx, 'overflow: hidden;">', ixV! + 19);
    if (ixV! != -1) {
      ix = ixV! + 19;
      ix2 = str.indexFrom(tx, "<", ix);
      if (ix2 != -1) {
        team = tx[ix:ix2];
        iteam = arr.index(cts.SportiumTeams, \t -> return t == team;);
        if (iteam != -1) outV! = iteam;
        else {
          sys.println("Team " + team + " not found in Sportium");
          log.warning("Team " + team + " not found in Sportium");
          continue;
        }
      } else continue;
    } else continue;

    // Separator
    ixV! = str.indexFrom(tx, 'overflow: hidden;">', ixV! + 19);
    if (ixV! != -1) {
      ix = ixV! + 19;
      ix2 = str.indexFrom(tx, "<", ix);
      if (ix2 != -1) {
        sep = tx[ix:ix2];
        if (sep != "Ganador (1X2)") continue;
      } else continue;
    } else continue;

    // 1
    ixV! = str.indexFrom(tx, 'overflow: hidden;">', ixV! + 19);
    if (ixV! != -1) {
      ix = ixV! + 19;
      ix2 = str.indexFrom(tx, "<", ix);
      if (ix2 != -1) {
        nOp = math.stof(tx[ix:ix2]);
        if (nOp) r1V! = nOp!;
        else {
          sys.println(str.fmt(
            "Bad number in %v - %v (Sportium, Bet 1)",
            [cts.SportiumTeams[homeV!], cts.SportiumTeams[outV!]]
          ));
          log.warning(str.fmt(
            "Bad number in %v - %v (Sportium, Bet 1)",
            [cts.SportiumTeams[homeV!], cts.SportiumTeams[outV!]]
          ));
          continue;
        }
      } else continue;
    } else continue;

    // x
    ixV! = str.indexFrom(tx, 'overflow: hidden;">', ixV! + 19);
    if (ixV! != -1) {
      ix = ixV! + 19;
      ix2 = str.indexFrom(tx, "<", ix);
      if (ix2 != -1) {
        nOp = math.stof(tx[ix:ix2]);
        if (nOp) rxV! = nOp!;
        else {
          sys.println(str.fmt(
            "Bad number in %v - %v (Sportium, Bet x)",
            [cts.SportiumTeams[homeV!], cts.SportiumTeams[outV!]]
          ));
          log.warning(str.fmt(
            "Bad number in %v - %v (Sportium, Bet x)",
            [cts.SportiumTeams[homeV!], cts.SportiumTeams[outV!]]
          ));
          continue;
        }
      } else continue;
    } else continue;

    // 2
    ixV! = str.indexFrom(tx, 'overflow: hidden;">', ixV! + 19);
    if (ixV! != -1) {
      ix = ixV! + 19;
      ix2 = str.indexFrom(tx, "<", ix);
      if (ix2 != -1) {
        nOp = math.stof(tx[ix:ix2]);
        if (nOp) r2V! = nOp!;
        else {
          sys.println(str.fmt(
            "Bad number in %v - %v (Sportium, Bet 2)",
            [cts.SportiumTeams[homeV!], cts.SportiumTeams[outV!]]
          ));
          log.warning(str.fmt(
            "Bad number in %v - %v (Sportium, Bet 2)",
            [cts.SportiumTeams[homeV!], cts.SportiumTeams[outV!]]
          ));
          continue;
        }
      } else continue;
    } else continue;

    arr.push(R, tBet.new(day, homeV!, outV!, bet.new(r1V!, rxV!, r2V!)));
    ixV! += 19;
  }

  return R;
};

/// Read Sportium data.
/// It returns an array where rows are teams which play at home and columns
/// teams which play out. Order of teams is the same as 'cts.CurrentTeams".
/// \-> [[([<Bet>]|[]).].]
read = \-> {
  tRs = ext.puppeteer(
    "https://www.sportium.es/apuestas/sports/soccer/competitions",
    30000
  );
  if (!tRs[1]) {
    sys.println(tRs!);
    log.error(tRs!);
    return;
  }
  t = tRs!;

  size = arr.size(cts.CurrentTeams);
  // [[([<Result>.]|[]).].]
  R = [];
  for (i = 0:size) {
    // [([<Result>]|[])...]
    row = [];
    for (j = 0:size) arr.push(row, []);
    arr.push(R, row);
  }

  Bets = readBets(t);

  for (B = Bets)
    R[B[tBet.home]][B[tBet.out]] = [B[tBet.bet]];

  return R;
};
