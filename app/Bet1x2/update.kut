// Copyright 12-Apr-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Functions to update data.

import "data/cts";
import "net/as";
import "net/marca";
import "net/sportium";
import "data/rs";
import "db";

// \->()
updateResults = \-> {
  Teams = cts.CurrentTeams;
  teamsSize = arr.size(Teams);

  // [[([<Rs>]|[])...]...]
  AsResults = as.read();
  // [[([<Rs>]|[])...]...]
  MarcaResults = marca.read();
  if (arr.size(AsResults) != arr.size(MarcaResults))
    sys.throw(str.fmt(
      "Number of results of As (%d) and Marca (%d) does not match",
      [arr.size(AsResults), arr.size(MarcaResults)]
    ));
  if (arr.size(AsResults) != teamsSize)
    sys.throw(str.fmt(
      "Wrong number of result got from Internet. Expected: %d, got: %d.",
      [arr.size(AsResults), teamsSize]
    ));

  for (row = 0:teamsSize) {
    for (col = 0:teamsSize) {
      AsRs = AsResults[row][col];
      MarcaRs = MarcaResults[row][col];

      if (
        (!AsRs & MarcaRs) |
        (AsRs & !MarcaRs) |
        (AsRs & MarcaRs & !rs.eq(AsRs!, MarcaRs!))
      )
        sys.throw(str.fmt(
          "Results for %s - %s, does not match:\nAs: %s, Marca: %s.",
          [ cts.Teams[Teams[row]],
            cts.Teams[Teams[col]],
            AsRs ? js.w(AsRs!) : "[]",
            MarcaRs ? js.w(MarcaRs!) : "[]"
          ]
        ));
    }
  }

  db.results(cts.year).write(AsResults);
};

// \[[([<Rs>]|[])...]...], i -> [i, i]
evaluate = \Rss, team -> {
  PlPt = [0, 0];

  for (i = 0:arr.size(Rss)) {
    R = Rss[i][team];
    if (R) {
      PlPt[0] += 1;
      rsh = R![rs.home];
      rso = R![rs.out];
      PlPt[1] += rsh > rso ? 0 : rsh == rso ? 1 : 2;
    }
  }
  Trs = Rss[team];
  for (i = 0:arr.size(Trs)) {
    R = Rss[team][i];
    if (R) {
      PlPt[0] += 1;
      rsh = R![rs.home];
      rso = R![rs.out];
      PlPt[1] += rsh > rso ? 2 : rsh == rso ? 1 : 0;
    }
  }
  return PlPt;
};


// \-> ()
updatePoints = \-> {
  pyear = math.itos(math.stoi(cts.year)! - 1);
  existsPyear = arr.any(db.years(), \y -> return y == pyear;);
  // [[([<Rs>]|[])...]...]
  Prss = existsPyear ? db.results(pyear).read() : [];
  // [s...]
  Pteams = existsPyear ? db.teams(pyear).read(): [];

  // [[([<Rs>]|[])...]...]
  Rss = db.results(cts.year).read();
  // [s...]
  Teams = db.teams(cts.year).read();
  // [[([<Rs>]|[])...]...]
  Points = db.points(cts.year).read();
  tnumber = arr.size(Teams);
  midMatches = tnumber - 1;
  totalMatches = midMatches * 2;

  // [i...]
  Tpoints = [];
  for (team = 0:tnumber) {
    PlPt = evaluate(Rss, team);
    played = PlPt[0];
    Points = [PlPt[1]];


    if (Prss & Pteams & played < midMatches) {
      prevPond = (midMatches - played) * 2;
      currentPond = totalMatches - prevPond;
      teamId = Teams[team];
      pteam = arr.index(Pteams, \t -> return t == teamId;);
      if (pteam != -1) {
        PlPt = evaluate(Prss, pteam);
        Points! = (PlPt[1] * prevPond + Points! * currentPond) / totalMatches;
      }
    }

    arr.push(Tpoints, Points!);
  }

  for (row = 0:tnumber) {
    for (col = 0:tnumber) {
      if (row == col) continue;
      R = Rss[row][col];
      P = Points[row][col];
      if (!R | !P) {
        r = rs.new(Tpoints[row], Tpoints[col]);
        Points[row][col] = [r];
      }
    }
  }

  db.points(cts.year).write(Points);
};

// \-> ()
updateBets = \-> {
  BetsTb = db.bets(cts.year);
  // [[([<Bet>]|[])...]...]
  Pbets = BetsTb.read();

  // [s...]
  Teams = db.teams(cts.year).read();
  tnumber = arr.size(Teams);

  // [[([<Bet>]|[])...]...]
  SportiumBets = sportium.read();
  if (arr.size(SportiumBets) != tnumber) {
    sys.throw(str.fmt(
      "Bad number of 'SportiumBets' rows. Expected %d, found %d.",
      tnumber, arr.size(SportiumBets)
    ));
  }

  Changed = [false];
  for (row = 0:tnumber) {
    for (col = 0:tnumber) {
      Pbet = Pbets[row][col];
      Sportium = SportiumBets[row][col];
      if (!Pbet & Sportium) {
        Changed! = true;
        Pbets[row][col] = Sportium;
      }
    }
  }

  if (Changed!) BetsTb.write(Pbets);
};

/// Updates data.
/// \-> ()
run = \-> {
  updateResults();
  updatePoints();
  updateBets();
};
