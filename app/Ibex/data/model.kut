// Copyright 20-Aug-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Model data

import "data/models/cm";
import "data/models/appr";
import "data/nkRs";
import "data/cts";
import "data/broker";
import "data/order";
import "data/dayRs";
import "data/simRs";

/// Creates a new model type map.
///   id: Model identifer.
///   name: Model name.
///   params: Model parameters.
///   init: Initialization function of type '\Closes:[f...] -> <mdSt>'.
///   next: Results generator. Function of type
///         '\State:<mdSt>, close:f -> <mdSt>'
/// \s, s, s, [f...], (\[f...] -> <mdSt>), (\<mdSt>, f -> <mdSt>) -> <mdSt>
new = \id, name, doc, Params, init, next ->
  return {id, name, doc, Params, init, next};;

/// Partial serialization for use in javascript.
toJsPartial = \M -> return js.wa([
    js.ws(M.id),
    js.ws(M.name),
    js.ws(M.doc),
    js.wa(arr.mp(M.Params, js.wf))
  ]);;

/// Returns the list of models.
list = \-> return [
    cm.new(),
    appr.new(0.10, 0.016)
  ];;

// \<model>, s, f, [s...], [f...], [f...] -> [[f...], <nkRs>]
simulation = \Model, initialCapital, Dates, Opens, Closes -> {
  St = [Model.init(Closes)];
  next = Model.next;

  Refs = [];
  Orders = [];
  Rs = [];
  Savings = [0.0];
  Cash = [initialCapital];
  withdrawal = initialCapital * cts.withdrawal;
  Stocks = [0];
  StocksValue = [0.0];

  for (i = 0:arr.size(Dates)) {
    close = Closes[i];
    if (St!.order == "b") {
      open = Opens[i];
      cash = Cash!;
      Stocks! = math.toInt(cash / open);
      StocksValue! = broker.buy(Stocks!, open);
      while (StocksValue! > cash) {
        Stocks! -= 1;
        StocksValue! = broker.buy(Stocks!, open);
      }
      arr.push(Orders, order.new(
        Dates[i], "b", Stocks!, open, StocksValue!, 0.0
      ));
      Cash! -= StocksValue!;
    } else if (St!.order == "s") {
      open = Opens[i];
      am = broker.sell(Stocks!, open);
      arr.push(Orders, order.new(
        Dates[i], "s", Stocks!, open, am, am - StocksValue!
      ));
      Cash! += am;
      Stocks! = 0;
      StocksValue! = 0.0;
      if (Cash! > withdrawal) {
        Savings! += Cash! - withdrawal;
        Cash! = withdrawal;
      }
    }

    St! = next(St!, close);
    arr.push(Refs, St!.ref);
    arr.push(Rs, dayRs.new(
      Savings!, Savings! + Cash! + math.toFloat(Stocks!) * close
    ));
  }

  return [Refs, simRs.new(Rs, Orders)];
};

/// Calculate Model-nick results. (nick can be 'IBEX')
///   Model      : Model to calculate.
///   nick       : Nick, wose quotes are 'Opens' and 'Closes', to calculate.
///                Its value can be "IBEX".
///   proportion : Ratio of cts.initialCapital to calculate the initial capital
///                with proportional value. If 'nick' is "IBEX" its value is 1.
///   ponderation: Ratio of cts.initialCapital to calculate the initial capital
///                with ponderated value. If 'nick' is "IBEX" its value is 1.
///   Dates      : 'Opens' and 'Closes' dates to calculate orders.
///   Opens      : Opens of 'nick'.
///   Closes     : Closes of 'nick'.
/// \<model>, s, f, [s...], [f...], [f...] -> <nkRs>
calculate = \Model, nick, proportion, ponderation, Dates, Opens, Closes -> {
  if (nick == "IBEX") {
    RefsSim = simulation(Model, cts.initialCapital, Dates, Opens, Closes);
    return nkRs.new(nick, Closes, RefsSim[0], RefsSim[1], RefsSim[1]);
  };

  RefsPropSim = simulation(
    Model, cts.initialCapital * proportion, Dates, Opens, Closes
  );
  RefsPondSim = simulation(
    Model, cts.initialCapital * ponderation, Dates, Opens, Closes
  );

  return nkRs.new(nick, Closes, RefsPropSim[0], RefsPropSim[1], RefsPondSim[1]);
};
