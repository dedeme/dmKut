// Copyright 04-Nov-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Main script.

import "libdm/log";
import "libdm/websv";
import "libdm/cgi";
import "global";

Args = sys.args();

if (arr.size(Args) != 1) return help();

cgi.init(global.cgiRoot, global.texpiration);
log.init(global.logPath);

try {
  switch (Args[0]) {
    "help": return help();
    "start": server();
    default: sys.println(str.fmt("Argument '%v' is not valid", Args));
  }
} catch (e) {
  log.error(e);
  sys.throw(e);
}

// Functions -----------------------------------------------

help = \ -> {
  sys.println(str.fmt("""
    Use:
      KtWeb argument
    Where argument can be:
      start: Launch server in %v if it is not lanched yet.
      help : Show this message.
      other: Program call.
    """,
    [global.port]
  ));
  return 0;
};

server = \ -> {
  websv.start(
    global.port,
    global.rpTime,
    global.root,
    response,
    log.error
  );
};

// <bytes> -> <bytes>
response = \rqBs -> {
  rq = bytes.toStr(rqBs);

  // GET

  Html = websv.getRq(rq);

  if (Html) {
    return Html!;
  }

  // POST

  rqUnix = str.replace(rq, "\r", "");
  ix0 = str.index(rq, "\n");

  if (ix0 == -1) return bytes.fromStr(websv.badRequestRp(rq));

  rq0 = str.trim(rq[:ix0]);
  if (rq0 != "POST /cgi-bin/ccgi.sh HTTP/1.1")
    return bytes.fromStr(websv.badRequestRp("Bad POST request\n" + rq));


  ix1 = str.index(rqUnix, "\n\n");
  if (ix1 == -1) return bytes.fromStr(websv.badRequestRp(rq));

  rqUnix0 = str.trim(rqUnix[ix1+2:]);
  ix3 = str.index(rqUnix0, ":");
  if (ix3 == -1) return bytes.fromStr(websv.badRequestRp(rq));

  cmd = rqUnix0[:ix3];
  par = rqUnix0[ix3+1:];
  if (cmd != global.appName)
    return bytes.fromStr(
      websv.badRequestRp("Unauthorized source '" + cmd + "'")
    );

  Rp = [""];
  try {
    Rp! = websv.textRp(rqProcess(par));
  } catch (e) {
    Rp! = websv.textRp(e);
  }
  return bytes.fromStr(Rp!);
};

// Processes a POST request.
// s -> s
rqProcess = \rq -> {
  ix0 = str.index(rq, ":");

  // CONNECTION --------------------------------------------------------------

  if (ix0 == -1) return cgi.connect(rq);

  // AUTHENTICATION ----------------------------------------------------------

  if (ix0 == 0) {
    key = cryp.key(global.appName, cgi.klen);
    data = cryp.decode(key, rq[1:]);
    Ps = str.split(data, ":");
    return cgi.authentication(key, Ps[0], Ps[1], Ps[2] == "1");
  }

  // NORMAL DATA -------------------------------------------------------------

  sessionId = rq[:ix0];
  ConKey = [""];
  Rest = [rq[ix0+1:]];
  ix1 = str.index(Rest!, ":");
  if (ix1 != -1) {
    ConKey! = Rest![:ix1];
    Rest! = Rest![ix1+1:];
  }
  ComKey = cgi.getComKey(sessionId, ConKey!);
  if (arr.size(ComKey) > 0) {
    return processHub(ComKey!, cryp.decode(ComKey!, Rest!));
  } else {
    return cgi.rpExpired();
  }
};

// Processes POST normal data
// s, s -> s
processHub = \ck, rq -> {
  prg = js.r(rq).prg;

  return switch(prg) {
    "AlarmClock": sys.cmd("kut", ["prgs/AlarmClock/kut/main", ck, rq])[0];
    "BrutalBackup": sys.cmd("kut", ["prgs/BrutalBackup/kut/main", ck, rq])[0];
    "CMarket": sys.cmd("kutmkt", ["prgs/CMarket/kut/main", ck, rq])[0];
    "CMMarket": sys.cmd("kutmkt", ["prgs/CMMarket/kut/main", ck, rq])[0];
    "DeepMarket": sys.cmd("kutmkt", ["prgs/DeepMarket/kut/main", ck, rq])[0];
    "Fluxwp": sys.cmd("kut", ["prgs/Fluxwp/kut/main", ck, rq])[0];
    "FMarket": sys.cmd("kutmkt", ["prgs/FMarket/kut/main", ck, rq])[0];
    "HBills": sys.cmd("kut", ["prgs/HBills/kut/main", ck, rq])[0];
    "JkutDoc": sys.cmd("kut", ["prgs/JkutDoc/kut/main", ck, rq])[0];
    "JstbEditor": sys.cmd("kut", ["prgs/JstbEditor/kut/main", ck, rq])[0];
    "Kron": sys.cmd("kut", ["prgs/Kron/kut/main", ck, rq])[0];
    "KutDoc": sys.cmd("kut", ["prgs/KutDoc/kut/main", ck, rq])[0];
    "Main": sys.cmd("kut", ["prgs/Main/kut/main", ck, rq])[0];
    "MMagazine": sys.cmd("kut", ["prgs/MMagazine/kut/main", ck, rq])[0];
    "SimpleTemplate": sys.cmd("kut", ["prgs/SimpleTemplate/kut/main", ck, rq])[0];
    "Template": sys.cmd("kut", ["prgs/Template/kut/main", ck, rq])[0];
    "UpdateKutLibs": sys.cmd("kut", ["prgs/UpdateKutLibs/kut/main", ck, rq])[0];
    "WallpapersDesign": sys.cmd("kut", ["prgs/WallpapersDesign/kut/main", ck, rq])[0];
    default: sys.throw("Value of prg (" + prg + ") is not valid");
  };
};



