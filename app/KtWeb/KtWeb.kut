// Copyright 04-Nov-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Main script.

import "libdm/log";
import "libdm/websv";
import "libdm/cgi";
import "global";

log.init(global.logPath, 100);

:arr Args = sys.args();

if (Args.size() != 1) return help();

cgi.init(global.cgiRoot, global.texpiration);

try {
  switch (Args[0]) {
    "help": return help();
    "start": server();
    default: sys.println(str.fmt("Argument '%v' is not valid", Args));
  }
} catch (e) {
  log.error(e);
  sys.throw(e);
}

// Functions -----------------------------------------------

help = \ -> {
  sys.println(str.fmt("""
    Use:
      KtWeb argument
    Where argument can be:
      start: Launch server in %v if it is not lanched yet.
      help : Show this message.
      other: Program call.
    """,
    [global.port]
  ));
  return 0;
};

server = \ -> {
  websv.start(
    global.port,
    global.rpTime,
    global.root,
    response,
    log.error
  );
};

//:\<bytes> -> (\-> <bytes>)
response = \rqBs -> {
  rq = bytes.toStr(rqBs);

  // GET

  htmlOp = websv.getRq(rq);

  if (!!htmlOp) {
    return htmlOp!;
  }

  // POST

  :str rqUnix = str.replace(rq, "\r", "");
  ix0 = str.index(rq, "\n");

  if (ix0 == -1)
    return websv.mkRpBytes(bytes.fromStr(websv.badRequestRp(rq)));

  rq0 = str.trim(rq[:ix0]);
  if (rq0 != "POST /cgi-bin/ccgi.sh HTTP/1.1")
    return websv.mkRpBytes(
      bytes.fromStr(websv.badRequestRp("Bad POST request\n" + rq))
    );


  ix1 = rqUnix.index("\n\n");
  if (ix1 == -1)
    return websv.mkRpBytes(bytes.fromStr(websv.badRequestRp(rq)));

  :str rqUnix0 = str.trim(rqUnix[ix1+2:]);
  ix3 = rqUnix0.index(":");
  if (ix3 == -1)
    return websv.mkRpBytes(bytes.fromStr(websv.badRequestRp(rq)));

  cmd = rqUnix0[:ix3];
  par = rqUnix0[ix3+1:];
  if (cmd != global.appName)
    return websv.mkRpBytes(
      bytes.fromStr(websv.badRequestRp("Unauthorized source '" + cmd + "'"))
    );

  rpV = [""];
  try {
    rpV! = websv.textRp(rqProcess(par));
  } catch (e) {
    rpV! = websv.textRp(e);
  }
  return websv.mkRpBytes(bytes.fromStr(rpV!));
};

// Processes a POST request.
// \s -> s
rqProcess = \rq -> {
  ix0 = str.index(rq, ":");

  // CONNECTION --------------------------------------------------------------

  if (ix0 == -1) return cryp.encode(rq, js.w(cgi.connect(rq)));

  // AUTHENTICATION ----------------------------------------------------------

  if (ix0 == 0) {
    key = cryp.key(global.appName, cgi.klen);
    data = cryp.decode(key, rq[1:]);
    Ps = str.split(data, ":");
    return cryp.encode(
      key, js.w(cgi.authentication(Ps[0], Ps[1], Ps[2] == "1"))
    );
  }

  // NORMAL DATA -------------------------------------------------------------

  sessionId = rq[:ix0];
  restV = [rq[ix0+1:]];
  ssKeyOp = cgi.getSessionKey(sessionId);

  if (!ssKeyOp) {
    return cryp.encode("nosession", js.w({"expired": true}));
  } else {
    return processHub(ssKeyOp!, cryp.decode(ssKeyOp!, restV!));
  }
};

// Processes POST normal data
//:\s, s -> s
processHub = \ssk, rq -> {
  prg = js.r(rq).prg;

  return switch(prg) {
    "AlarmClock": sys.cmd("kut", ["prgs/AlarmClock/kut/main", ssk, rq])!;
    "BrutalBackup": sys.cmd("kut", ["prgs/BrutalBackup/kut/main", ssk, rq])!;
    "CashFlow": sys.cmd("kut", ["prgs/CashFlow/kut/main", ssk, rq])!;
    "CDoc": sys.cmd("kut", ["prgs/CDoc/kut/main", ssk, rq])!;
    "FMarket": sys.cmd("kut", ["prgs/FMarket/kut/main", ssk, rq])!;
    "HBills": sys.cmd("kut", ["prgs/HBills/kut/main", ssk, rq])!;
    "Hconta": sys.cmd("kut", ["prgs/Hconta/kut/main", ssk, rq])!;
    "JkutDoc": sys.cmd("kut", ["prgs/JkutDoc/kut/main", ssk, rq])!;
    "Kron": sys.cmd("kut", ["prgs/Kron/kut/main", ssk, rq])!;
    "KTemplate": sys.cmd("kut", ["prgs/Ktemplate/kut/main", ssk, rq])!;
    "KutCInterface": sys.cmd("kut", ["prgs/KutCInterface/kut/main", ssk, rq])!;
    "KutDoc": sys.cmd("kut", ["prgs/KutDoc/kut/main", ssk, rq])!;
    "KuttDoc": sys.cmd("prgs/KuttDoc/kutt/bin/KuttDoc", [ssk, rq])!;
    "Main": sys.cmd("kut", ["prgs/Main/kut/main", ssk, rq])!;
    "Market": sys.cmd("kut", ["prgs/Market/kut/main", ssk, rq])!;
    "MMagazine": sys.cmd("kut", ["prgs/MMagazine/kut/main", ssk, rq])!;
    "MMarket": sys.cmd("kut", ["prgs/MMarket/kut/main", ssk, rq])!;
    "MrBackup": sys.cmd("kut", ["prgs/MrBackup/kut/main", ssk, rq])!;
    "NkutDoc": sys.cmd("kut", ["prgs/NkutDoc/kut/main", ssk, rq])!;
    "Notes": sys.cmd("kut", ["prgs/Notes/kut/main", ssk, rq])!;
    "Stocks": sys.cmd("kut", ["prgs/Stocks/kut/main", ssk, rq])!;
    "Wallpapers": sys.cmd("kut", ["prgs/Wallpapers/kut/main", ssk, rq])!;
    "WallpapersDesign": sys.cmd("kut", ["prgs/WallpapersDesign/kut/main", ssk, rq])!;
    default: sys.throw("Value of prg (" + prg + ") is not valid");
  };
};



