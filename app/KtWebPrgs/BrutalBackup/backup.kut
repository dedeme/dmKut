// Copyright 09-Feb-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Backup process.

import "libdm/dsync";
import "db";

///
run = \id -> {
  BkListTbJs = db.bkListTb();
  List = BkListTbJs.read();

  BkPaths = arr.find(List, \Bk -> return Bk.id == id;);
  ps = BkPaths!;
  backupCheck = path.cat([ps.backup, "BrutalBackups.txt"]);
  if (!file.exists(backupCheck)) {
    ps.state = [];
    ps.msgs = ["'" + backupCheck + "' no found"];
    BkListTbJs.write(List);
    return;
  }
  sourceCheck = path.cat([ps.source, "BrutalBackups.txt"]);
  file.write(sourceCheck, "");

  if (ps.state) {
    return;
  }

  ps.state = [0];
  ps.msgs = [];
  BkListTbJs.write(List);

  Syn = dsync.newFiles (
    ps.source,
    ps.backup,
    \Msg -> {
      List = BkListTbJs.read();
      BkPaths = arr.find(List, \Bk -> return Bk.id == id;);
      ps = BkPaths!;

      Data = dsync.msgData(Msg);
      switch (dsync.msgType(Msg)) {
        dsync.state: ps.state = Data;
        dsync.errCopy: arr.push(ps.msgs, "Fail copying:\n  " + Data);
        dsync.errDel: arr.push(ps.msgs, "Fail deleting:\n  " + Data);
        default: arr.push(ps.msgs, Data);
      }

      BkListTbJs.write(List);
    }
  );

  dsync.update(Syn);

  ps.state = [];
  BkListTbJs.write(List);

  file.del(sourceCheck);
};
