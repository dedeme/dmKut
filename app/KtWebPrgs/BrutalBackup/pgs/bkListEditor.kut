// Copyright 09-Feb-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Backups list page.

import "KtWeb/rp";
import "db";
import "data/bkPaths";

/// \m -> ()
process = \Rq -> {
  rq = js.rs(Rq.rq);
  switch (rq) {
    "idata": {
      BkListTb = db.bkListTb().read();
      NewList = [];
      for (B = BkListTb.list) {
        source = B.source;
        SourceError = [""];
        try {
          if (!file.exists(source))
            SourceError! = "'" + source + "' not found.";
          else if (!file.isDirectory(source))
            SourceError! = "'" + source + "' is not a directory.";
          else if (
            arr.empty(B.state) &
            file.exists(path.cat([source, "BrutalBackups.txt"]))
          )
            SourceError! = "'BrutalBackups.txt' found in '" + source + "'";
        } catch e {
          ix = str.index(e, "\n");
          SourceError! = ix == -1 ? e : e[:ix];
        }

        backup = B.backup;
        BackupError = [""];
        try {
          if (!file.exists(backup))
            BackupError! = "'" + backup + "' not found.";
          else if (!file.isDirectory(backup))
            BackupError! = "'" + backup + "' is not a directory.";
          else if (!file.exists(path.cat([backup, "BrutalBackups.txt"])))
            BackupError! = "'BrutalBackups.txt' not found in '" + backup + "'";
        } catch e {
          ix = str.index(e, "\n");
          BackupError! = ix == -1 ? e : e[:ix];
        }

        arr.push(
          NewList,
          bkPaths.new(
            B.id, source, SourceError!, backup, BackupError!, B.msgs, B.state
          )
        );

      }

      sys.print(rp.mk({
        "list": js.wa(arr.mp(NewList, bkPaths.toJs))
      }));
    }
    "addModify": {
      id = js.rs(Rq.id);
      from = js.rs(Rq.from);
      to = js.rs(Rq.to);

      BkListTbJs = db.bkListTb();
      BkListTb = [BkListTbJs.read()];
      if (BkListTb!.lock) {
        sys.sleep(100);
        BkListTb! = BkListTbJs.read();
      }
      BkListTb!.lock = true;
      BkListTbJs.write(BkListTb!);

      List = BkListTb!.list;
      BkPaths = arr.find(List, \Bk -> return Bk.id == id;);
      if (arr.empty(BkPaths)) {
        arr.push(List, bkPaths.new(id, from, "", to, "", [], []));
      } else {
        BkPaths!.source = from;
        BkPaths!.backup = to;
      }
      BkListTbJs.write(bkPaths.newTable(false, List));

      sys.print(rp.mkEmpty());
    }
    "del": {
      id = js.rs(Rq.id);

      BkListTbJs = db.bkListTb();
      BkListTb = [BkListTbJs.read()];
      if (BkListTb!.lock) {
        sys.sleep(100);
        BkListTb! = BkListTbJs.read();
      }
      BkListTb!.lock = true;
      BkListTbJs.write(BkListTb!);

      arr.filterIn(BkListTb!.list, \Bk -> return Bk.id != id;);
      BkListTb!.lock = false;
      BkListTbJs.write(BkListTb!);

      sys.print(rp.mkEmpty());
    }
    default: sys.fail("Value of rq (" + rq + ") is not valid");
  }
};

