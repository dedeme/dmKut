// Copyright 09-Feb-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Backups list page.

import "KtWeb/rp";
import "db";
import "data/bkPaths";

/// \m -> ()
process = \Rq -> {
  switch (Rq.rq) {
    "idata": {
      BkListTb = db.bkListTb().read();
      NewList = [];
      for (B = BkListTb) {
        source = B.source;
        SourceError = [""];
        try {
          if (!file.exists(source))
            SourceError! = "'" + source + "' not found.";
          else if (!file.isDirectory(source))
            SourceError! = "'" + source + "' is not a directory.";
          else if (
            !B.state &
            file.exists(path.cat([source, "BrutalBackups.txt"]))
          )
            SourceError! = "'BrutalBackups.txt' found in '" + source + "'";
        } catch(e) {
          ix = str.index(e, "\n");
          SourceError! = ix == -1 ? e : e[:ix];
        }

        backup = B.backup;
        BackupError = [""];
        try {
          if (!file.exists(backup))
            BackupError! = "'" + backup + "' not found.";
          else if (!file.isDirectory(backup))
            BackupError! = "'" + backup + "' is not a directory.";
          else if (!file.exists(path.cat([backup, "BrutalBackups.txt"])))
            BackupError! = "'BrutalBackups.txt' not found in '" + backup + "'";
        } catch(e) {
          ix = str.index(e, "\n");
          BackupError! = ix == -1 ? e : e[:ix];
        }

        arr.push(
          NewList,
          bkPaths.mk(
            B.id, source, SourceError!, backup, BackupError!, B.msgs, B.tm, B.state
          )
        );

      }

      sys.print(rp.mk({
        "list": arr.map(NewList, bkPaths.toJs)
      }));
    }
    "addModify": {
      BkListTbJs = db.bkListTb();
      List = BkListTbJs.read();

      BkPaths = arr.find(List, \Bk -> return Bk.id == Rq.id;);
      if (BkPaths) {
        BkPaths!.source = Rq.from;
        BkPaths!.backup = Rq.to;
      } else {
        arr.push(List, bkPaths.mk(Rq.id, Rq.from, "", Rq.to, "", [], -1, []));
      }
      BkListTbJs.write(List);

      sys.print(rp.mkEmpty());
    }
    "del": {
      BkListTbJs = db.bkListTb();
      List = BkListTbJs.read();

      arr.filterIn(List, \Bk -> return Bk.id != Rq.id;);
      BkListTbJs.write(List);

      sys.print(rp.mkEmpty());
    }
    default: sys.throw("Value of rq (" + Rq.rq + ") is not valid");
  }
};

