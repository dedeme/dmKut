// Copyright 12-Feb-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Runner page.

import "KtWeb/rp";
import "db";
import "data/bkPaths";
import "data/cts";

/// \m -> ()
process = \Rq -> {
  switch (Rq.rq) {
    "run": {
      thread.run(\-> sys.cmd2("kut", [cts.mainPath, "@", Rq.id]););
      sys.sleep(100);

      List = db.bkListTb().read();
      BkPaths = arr.find(List, \Bk -> return Bk.id == Rq.id;);
      tm = BkPaths ? BkPaths!.tm : -1;

      sys.print(rp.mk({
        "tm": tm
      }));
    }
    "state": {
      List = db.bkListTb().read();
      BkPaths = arr.find(List, \Bk -> return Bk.id == Rq.id;);
      R = {
        "state": [],
        "errors": ["Backup '" + Rq.id + "'not found"]
      };
      if (BkPaths) {
        R.state = BkPaths!.state;
        R.errors = BkPaths!.msgs;
      }

      sys.print(rp.mk(R));
    }
    "setTm": {
      BkListTb = db.bkListTb();
      List = BkListTb.read();
      BkPaths = arr.find(List, \Bk -> return Bk.id == Rq.id;);
      if (BkPaths) {
        BkPaths!.tm = math.ftoi(Rq.tm);
        BkListTb.write(List);
      }
      sys.print(rp.mkEmpty());
    }
    default: sys.throw("Value of rq (" + Rq.rq + ") is not valid");
  }
};

