// Copyright 11-Mar-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

import "KtWeb/rp";
import "db";
import "data/conf";
import "data/dpath";
import "db/confTb";
import "db/pathsTb";

/// \{*.} -> s
process = \Rq -> {
  switch (Rq.rq) {
    "changeShowAll": {
      dbKey = db.checkKey(Rq.dbKey);
      if (dbKey == "") return rp.mk({ dbKey });

      :conf cf = confTb.read();
      confTb.write(conf.mk(cf.spath, !cf.showAll));
      return rp.mkEmpty();
    }
    "new": {
      dbKey = db.checkKey(Rq.dbKey);
      if (dbKey == "") return rp.mk({ dbKey });

      :arr Ps = pathsTb.read();
      Ps.push(dpath.new(Rq.id, Rq.path, true, false));
      pathsTb.write(Ps);
      return rp.mkEmpty() ;
    }
    "changeShown": {
      dbKey = db.checkKey(Rq.dbKey);
      if (dbKey == "") return rp.mk({ dbKey });

      Ps = pathsTb.read();
      for (:dpath p = Ps)
        if (p.id == Rq.id) p.isShown = p.isShown ? false : true;
      pathsTb.write(Ps);
      return rp.mkEmpty() ;
    }
    "delete": {
      dbKey = db.checkKey(Rq.dbKey);
      if (dbKey == "") return rp.mk({ dbKey });

      :arr Ps = pathsTb.read();
      Ps.filterIn(\:dpath p -> return p.id != Rq.id;);
      pathsTb.write(Ps);
      return rp.mkEmpty() ;
    }
    "modify": {
      dbKey = db.checkKey(Rq.dbKey);
      if (dbKey == "") return rp.mk({ dbKey });

      Ps = pathsTb.read();
      for (:dpath p = Ps) if (p.id == Rq.id) {
        p.id = Rq.newId;
        p.spath = Rq.path;
      }
      pathsTb.write(Ps);
      return rp.mkEmpty() ;
    }
    default: sys.throw("Value of rq (" + Rq.rq + ") is not valid");
  }
};
