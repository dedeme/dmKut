// Copyright 07-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Package index reader.

import "db";
import "db/pathsTb";
import "data/indexTree";
import "data/dpath";

// Read module documentation.
// \s -> s
docRead = \:file fpath -> {
  if (!fpath.exists()) return "";

  rV = [""];
  :file f = fpath.ropen();
  while () {
    lOp = f.readLine();
    if (!lOp) break;

    l = str.trim(lOp!);
    if (str.starts(l, "#ifndef ")) break;
    if (str.starts(l, "///")) {
      rV! = l[4:];
      break;
    }
  }
  f.close();
  return rV!;
};

// Adds trees to node
// \[m], s -> ()
completeTrees = \:arr Trees, dir -> {
  Fnames = file.dir(dir);
  for (fname = Fnames) {
    fpath = path.cat([dir, fname]);
    if (file.isDirectory(fpath)) {
      :indexTree NewTree = indexTree.new(fname, [], []);
      Trees.push(NewTree);
      completeTrees(NewTree.Trees, fpath);
    } else {
      if (!str.ends(fname, ".h")) continue;
      Trees.push(indexTree.new(fname[:-2], [docRead(fpath)], []));
    }
  }
};

/// Reads package index tree.
/// \s -> [m]
read = \pack -> {
  ppathOp = arr.find(
    pathsTb.read(), \:dpath p -> return p.id == pack;
  );
  if (!ppathOp) return [];
  :dpath ppath = ppathOp!;

  root = path.cat([ppath.spath, "include"]);
  if (!file.exists(root)) return [];

  :indexTree r = indexTree.new("", [], []);
  completeTrees(r.Trees, root);
  return [r];
};
