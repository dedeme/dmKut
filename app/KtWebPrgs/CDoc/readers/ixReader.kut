// Copyright 07-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Package index reader.

import "db";
import "data/indexTree";

// Read module documentation.
// \s -> s
docRead = \fpath -> {
  if (!file.exists(fpath)) return "";

  R = [""];
  f = file.ropen(fpath);
  while () {
    L = file.readLine(f);
    if (arr.size(L) == 0) break;

    l = str.trim(L!);
    if (str.starts(l, "#ifndef ")) break;
    if (str.starts(l, "///")) {
      R! = l[4:];
      break;
    }
  }
  file.close(f);
  return R!;
};

// Adds trees to node
// \[m], s -> ()
completeTrees = \Trees, dir -> {
  Fnames = file.dir(dir);
  for (fname = Fnames) {
    fpath = path.cat([dir, fname]);
    if (file.isDirectory(fpath)) {
      NewTree = indexTree.mk(fname, [], []);
      arr.push(Trees, NewTree);
      completeTrees(NewTree.Trees, fpath);
    } else {
      if (!str.ends(fname, ".h")) continue;
      arr.push(Trees, indexTree.mk(fname[:-2], [docRead(fpath)], []));
    }
  }
};

/// Reads package index tree.
/// \s -> [m]
read = \pack -> {
  Ppath = arr.find(db.pathsTb().read(), \P -> return P.id == pack;);
  if (arr.size(Ppath) == 0) return [];

  root = path.cat([Ppath!.path, "include"]);
  if (!file.exists(root)) return [];

  R = indexTree.mk("", [], []);
  completeTrees(R.Trees, root);
  return [R];
};
