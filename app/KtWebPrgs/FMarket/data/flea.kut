// Copyright 22-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Flea Data.

import "libmkt/models";
import "libmkt/model/model";
import "libmkt/strategy";
import "libmkt/order";
import "cts";

/// Constructor.
///   id     : Identifier.
///   cycle  : Creation cycle.
///   model  : Trading model id.
///   params : Model parameters.
///   assets : Assets (money) after models evaluation.
///            Mutable field using 'update'.
///   profits: Profits (ratio) after models evaluation.
///            Mutable field using 'update'.
///   points : Result of flea.evaluate(assets, profits).
///   sales  : Sales of period.
/// \i, i, s, [f...], f, f, i -> d<flea>
new = \id, cycle, model, params, assets, profits, points, sales ->
  return {id, cycle, model, params, assets, profits, points, sales};;

/// Generates a new random fleas. Its values of assets and profits are '0.0'.
/// \i, i, s -> <flea>
generate = \id, cycle, fmodel -> {
  md = models.get(fmodel)!;
  Bases = model.paramBases(md);
  Incs = model.paramBaseIncs(md);
  Types = model.paramTypes(md);
  Ps = arr.new(arr.size(Bases), 0.0);
  for (b, i = Bases) {
    type = Types[i];
    base = b;
    inc = Incs[i] * cts.evalSteps;

    Ps[i] = math.round(
      base + inc * math.rnd(),
      type == model.percParam ? 4 : 0
    );
  }
  return new(id, cycle, fmodel, Ps, 0.0, 0.0, 0.0, 0);
};

/// Evaluate flea results in the same way that CMMarket.
/// A result of '1000' indicates neither profits nor losses.
///   assets : Assets (money).
///   profits: Profits (ratio).
/// \f, f -> i
evaluate = \assets, profits -> return math.ftoi(
    ( assets * cts.assetsRatio / cts.maxAssets +
        (1.0 + profits) * cts.profitsAvgRatio / cts.maxProfitsAvgRatio
      ) * 3000.0
  );;

/// Makes a simulation and modifies F.assets, F.profits and F.points with the
/// results.
/// \<flea>, <quotes> -> ()
update = \F, Qs -> {
  md = models.get(F.model)!;
  Rs = strategy.run(md, Qs, F.params, cts.daysWin, cts.daysLoss);
  sales = arr.size(arr.filter(Rs.orders, \O -> return O.type == order.sell;));
  if (sales < 90) {
    F.assets = 0.0;
    F.profits = -1.0;
    F.points = 0;
    F.sales = sales;
    return;
  }
  F.assets = arr.peek(Rs.hassets);
  Pfs = Rs.profits;
  F.profits = arr.reduce(Pfs, 0.0, \r, p -> return r + p;) /
    math.itof(arr.size(Pfs));
  F.points = evaluate(F.assets, F.profits);
  F.sales = sales;
};

/// Returns a new muted flea. Its values of assets and profits are '0.0'.
/// \<flea>, i, i -> <flea>
mutate = \F, id, cycle -> {
  md = models.get(F.model)!;
  Bases = model.paramBases(md);
  Incs = model.paramBaseIncs(md);
  Types = model.paramTypes(md);
  Ps = arr.new(arr.size(F.params), 0.0);
  for (p, i = F.params) {
    type = Types[i];
    base = Bases[i];
    inc = Incs[i] * cts.evalSteps;
    newP = p + p * 0.1 * (2.0 * math.rnd() - 1.0);
    Ps[i] = math.round(
      newP < base | newP > base + inc
        ? base + inc * math.rnd()
        : newP,
      type == model.percParam ? 4 : 0
    );
  }
  return new(id, cycle, F.model, Ps, 0.0, 0.0, 0.0, 0);
};

/// Makew a mutation cycle.
/// It returns fleas array sorted by evaluatoin points (descending).
/// \[<flea>...], <quotes> -> [<fleas>...]
cycle = \Fleas, Qs -> {
  fleasPerModel = cts.fleasPerModel;
  mdId = Fleas[0].model;
  cycleV = [0];
  idV = [0];
  for (F = Fleas) {
    if (F.id > idV!) idV! = F.id;
    if (F.cycle > cycleV!) cycleV! = F.cycle;
  }
  cy = cycleV! + 1;
  idV! += 1;
  F2s = arr.map(Fleas, \F -> {
    F2 = mutate(F, idV!, cy);
    idV! += 1;
    return F2;
  });
  F3s = arr.new(fleasPerModel, 0);
  id = idV!;
  for (i = 0:fleasPerModel)
    F3s[i] = generate(id + i, cy, mdId);

  // Remove duplicates
  Fs = Fleas + F2s + F3s;
  if (arr.size(Fs[0].params) == 1)
    arr.sort(Fs, \F1, F2 -> return F1.params[0] > F2.params[0];);
  else
    arr.sort(Fs, \F1, F2 -> return F1.params[0] == F2.params[0]
        ? F1.params[1] > F2.params[1]
        : F1.params[0] > F2.params[0]
      ;);
  FFs = []; // [<flea>...]
  for (F, i = Fs) {
    if (i == 0) {
      arr.push(FFs, F);
      continue;
    }
    if (F.params != Fs[i - 1].params) arr.push(FFs, F);
  }

  // Evaluate and select
  for (F = Fs) update(F, Qs);
  arr.sort(FFs, \F1, F2 ->
    return F1.points == F2.points
      ? F1.assets > F2.assets
      : F1.points > F2.points
    ;
  );
  return FFs[0:cts.fleasPerModel];
};

/// \<flea> -> JS
toJs = \F -> return [
    math.itof(F.id),
    math.itof(F.cycle),
    F.model,
    F.params,
    math.round(F.assets, 2),
    math.round(F.profits, 4),
    math.itof(F.sales)
  ];;

/// \JS -> <flea>
fromJs = \A -> return new(
    math.ftoi(A[0]),
    math.ftoi(A[1]),
    A[2],
    A[3],
    A[4],
    A[5],
    evaluate(A[4], A[5]),
    math.ftoi(A[6])
  );;

