// Copyright 22-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Flea Data.

import "libmkt/models";
import "libmkt/model";
import "libmkt/strategy";
import "libmkt/order";
import "data/simParams";
import "cts";

/// Constructor.
///   id     : Identifier.
///   cycle  : Creation cycle.
///   model  : Trading model id.
///   params : Model parameters.
///   assets : Assets (money) after models evaluation.
///            Mutable field using 'update'.
///   profits: Profits (ratio) after models evaluation.
///            Mutable field using 'update'.
///   points : Result of flea.evaluate(assets, profits).
///   sales  : Sales of period.
/// \i,i,s,[f.],f,f,i,i -> <myType>
new : id, cycle, mdId, Params, assets, profits, points, sales;

/// \<flea> -> [*.]
toJs = \f -> return [
    math.itof(f[id]),
    math.itof(f[cycle]),
    f[mdId],
    f[Params],
    math.round(f[assets], 2),
    math.round(f[profits], 4),
    math.itof(f[sales])
  ];;



/// \[*.] -> <flea>
fromJs = \A -> return [
    math.ftoi(A[id]),
    math.ftoi(A[cycle]),
    A[mdId],
    A[Params],
    A[assets],
    A[profits],
    evaluate(A[assets], A[profits]),
    math.ftoi(A[sales - 1])
  ];;

/// Generates a new random fleas. Its values of assets and profits are '0.0'.
/// \i, i, s -> <flea>
generate = \id, cycle, fmodel -> {
  :model md = models.get(fmodel)!;
  :arr Bases = simParams.paramBases(fmodel);
  Incs = simParams.paramIncrs(fmodel);
  Types = md.ParamTypes;
  Ps = arr.new(0.0, Bases.size());
  for (i, b = Bases) {
    type = Types[i];
    base = b;
    inc = Incs[i] * cts.evalSteps;

    Ps[i] = math.round(
      base + inc * math.rnd(),
      type == model.percParam ? 4 : 0
    );
  }
  return new(id, cycle, fmodel, Ps, 0.0, 0.0, 0.0, 0);
};

/// Evaluate flea results in the same way that CMMarket.
/// A result of '1000' indicates neither profits nor losses.
///   assets : Assets (money).
///   profits: Profits (ratio).
/// \f, f -> i
evaluate = \assets, profits -> return math.ftoi(
    ( assets * cts.assetsRatio / cts.maxAssets +
        (1.0 + profits) * cts.profitsAvgRatio / cts.maxProfitsAvgRatio
      ) * 3000.0
  );;

/// Makes a simulation and modifies F.assets, F.profits and F.points with the
/// results.
/// All the fleas are of the same model.
/// \[<flea>.], <tquotes> -> ()
calculate = \Fs, qts -> {
  md = models.get(Fs[0][mdId])!;
  :: Rs = strategy.stGroup2(md, qts, arr.map(Fs, \f -> return f[Params];));
  for (i, f = Fs) {
    f[sales] = math.ftoi(Rs.Sales[i]);
    if (f[sales] < 90) {
      f[assets] = 0.0;
      f[profits] = -1.0;
      f[points] = 0;
      continue;
    }

    f[assets] = Rs.Assets[i];
    f[profits] = Rs.Profits[i];
    f[points] = evaluate(f[assets], f[profits]);
  }
};

/// Returns a new muted flea. Its values of assets and profits are '0.0'.
/// \<flea>, i, i -> <flea>
mutate = \f, id, cycle -> {
  :model md = models.get(f[mdId])!;
  Bases = simParams.paramBases(f[mdId]);
  Incs = simParams.paramIncrs(f[mdId]);
  Types = md.ParamTypes;
  Ps = arr.new(0.0, arr.size(f[Params]));
  for (i, p = f[Params]) {
    type = Types[i];
    base = Bases[i];
    inc = Incs[i] * cts.evalSteps;
    newP = p + p * 0.1 * (2.0 * math.rnd() - 1.0);
    Ps[i] = math.round(
      newP < base | newP > base + inc
        ? base + inc * math.rnd()
        : newP,
      type == model.percParam ? 4 : 0
    );
  }
  return new(id, cycle, f[mdId], Ps, 0.0, 0.0, 0.0, 0);
};

/// Makew a mutation cycle.
/// It returns fleas array sorted by evaluatoin points (descending).
/// All the fleas are of the same model.
/// \[<flea>.], <tquotes> -> [<flea>.]
newCycle = \Fleas, qts -> {
  fleasPerModel = cts.fleasPerModel;
  mdId = Fleas[0][mdId];
  cycleV = [0];
  idV = [0];
  for (f = Fleas) {
    if (f[id] > idV!) idV! = f[id];
    if (f[cycle] > cycleV!) cycleV! = f[cycle];
  }
  cy = cycleV! + 1;
  idV! += 1;
  F2s = arr.map(Fleas, \f -> {
    f2 = mutate(f, idV!, cy);
    idV! += 1;
    return f2;
  });
  F3s = arr.new(0, fleasPerModel);
  id = idV!;
  for (i = 0:fleasPerModel)
    F3s[i] = generate(id + i, cy, mdId);

  // Remove duplicates
  Fs = Fleas + F2s + F3s;
  if (arr.size(Fs[0][Params]) == 1)
    arr.sort(Fs, \f1, f2 -> return f1[Params][0] > f2[Params][0];);
  else
    arr.sort(Fs, \f1, f2 -> return f1[Params][0] == f2[Params][0]
        ? f1[Params][1] > f2[Params][1]
        : f1[Params][0] > f2[Params][0]
      ;);
  FFs = []; // [<flea>...]
  for (i, f = Fs) {
    if (i == 0) {
      arr.push(FFs, f);
      continue;
    }
    if (f[Params] != Fs[i - 1][Params]) arr.push(FFs, f);
  }

  // Evaluate and select
  calculate(Fs, qts);
  arr.sort(FFs, \f1, f2 ->
    return f1[points] == f2[points]
      ? f1[assets] > f2[assets]
      : f1[points] > f2[points]
    ;
  );
  return FFs[0:cts.fleasPerModel];
};

