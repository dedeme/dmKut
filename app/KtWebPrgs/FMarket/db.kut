// Copyright 24-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Data base of jstb's.

import "libdm/log";
import "libmkt/qs";
import "libmkt/tquotes";
import "libmkt/model";
import "libmkt/models";
import "cts";
import "data/flea";
import "data/summaryRs";

modelsPath = file.cat([cts.dbPath, "models"]);

/// \s -> s
modelPath = \mdId -> return file.cat([modelsPath, mdId]);;

// \s -> s
fleasPath = \mdId -> return file.cat([modelPath(mdId), "fleas.tb"]);;

// \s -> s
historicPath = \mdId -> return file.cat([modelPath(mdId), "historic"]);;

// \s, s -> s
rkPath = \mdId, date -> return file.cat(
  [historicPath(mdId), date, "rk.tb"]
);;

// \s, s -> s
bPath = \mdId, date -> return file.cat(
  [historicPath(mdId), date, "best.tb"]
);;

// Read companies.
// \ -> [s.]
readCos = \ -> {
  CosT = js.r(file.read(file.cat([cts.marketDataPath, "cos.tb"])));
  :arr Cos = arr.map(
    arr.filter(CosT[1], \E -> return E[1];), \E -> return E[0];
  );
  Cos.sort(\c1, c2 -> return c1 < c2;);
  return Cos;
};

/// Read CMarket quotes.
/// \ -> <tquotes>
readQuotes = \ -> {
  dpath = file.cat([cts.marketDataPath, "quotes"]);
  Cos = readCos();
  return tquotes.read(dpath, Cos, true);
};

/// Returns the model list.
/// \ -> [<model>.]
modelsList = \ -> return models.list();;

/// Reinitializes database.
/// It must be called when a new model is added.
/// \ -> ()
init = \ -> {
  log.reset();

  QsOp = [];

  file.mkdir(cts.dbPath);

  file.mkdir(modelsPath);
  for (mdId = arr.map(modelsList(), \:model md -> return md.id;)) {
    mdPath = modelPath(mdId);
    file.mkdir(mdPath);
    file.mkdir(file.cat([mdPath, "historic"]));
    fsPath = fleasPath(mdId);
    if (!file.exists(fsPath)) {
      newFs = arr.new(0, cts.fleasPerModel);
      for (i = 0:cts.fleasPerModel)
        newFs[i] = flea.generate(i, 0, mdId);
      if (!QsOp) arr.push(QsOp, readQuotes());
      Qs = QsOp!;
      writeFleas(mdId, flea.newCycle(newFs, Qs));
    }
  }
};

/// Reads 'fleas.tb' in model 'mdId'.
/// Returns a fleas array sorted by evaluation points (descending).
///   mdId: Model identifier.
/// \s -> [<flea>.]
readFleas = \mdId -> {
  return arr.map(js.r(file.read(fleasPath(mdId))), flea.fromJs);
};

/// Writes 'fleas.tb' in model 'mdId'.
///   mdId : Model identifier.
///   fleas: Fleas array sorted by evaluation points (descending).
/// \s, [<flea>.] -> ()
writeFleas = \mdId, Fleas -> {
  now = time.now();
  today = time.toStr(now);

  file.write(fleasPath(mdId), js.w(arr.map(Fleas, flea.toJs)));

  file.mkdir(historicPath(mdId));
  rkPath = rkPath(mdId, today);
  dirPath = file.parent(rkPath);
  file.mkdir(dirPath);
  file.write(rkPath, js.w(arr.map(Fleas[:40], flea.toJs)));
  file.write(file.cat([dirPath, "best.tb"]), js.w(flea.toJs(Fleas[0])));

  // CLEAN

  :arr Dates = file.dir(historicPath(mdId));
  Dates.sort(\d1, d2 -> return d1 > d2;);
  minusYear = time.toStr(time.addDays(now, -365));

  dateV = ["11111111"];
  for (i, d = Dates) {
    if (i < 5) {
      dateV! = d;
      continue;
    }
    if (d > minusYear) {
      if (d[:6] == dateV![:6])
        file.del(file.cat([historicPath(mdId), d]));
    } else {
      if (d[:4] == dateV![:4])
        file.del(file.cat([historicPath(mdId), d]));
    }
    dateV! = d;
  }
};

/// Returns an dictionary {date -> [flea.]} with rankings of a model.
/// \s -> {[<flea>.].}
readRankings = \mdId -> {
  Dates = file.dir(historicPath(mdId));
  Rk = {}; // {[<flea>.].} :: {date -> [flea.]}
  for (d = Dates)
    Rk.put(d, arr.map(js.r(file.read(rkPath(mdId, d))), flea.fromJs));
  return Rk;
};

/// Returns an dictionary {date: {model: [flea(JS).]}}, where
/// \ -> {{[*.]}.}
readSummary = \ -> {
  R = {}; // {{[flea(JS).]}.}
  Models = file.dir(modelsPath);
  for (mdId = Models) {
    Dates = file.dir(historicPath(mdId));
    for (d = Dates) {
      ModelDicOp = R.get(d);
      :dic ModelDic = !ModelDicOp ? {} : ModelDicOp!;
      ModelDic.put(mdId, js.r(file.read(bPath(mdId, d))));
      R.put(d, ModelDic);
    }
  }
  return R;
};
