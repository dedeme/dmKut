// Copyright 26-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Data base management.

import "cts";
import "data/accAnn";
import "data/monthAnn";
import "db/placesTb";

// EXTERN DATA BASE

/// Current year
/// i
year = time.year(time.now());

/// Years range (from [0] to [1] both inclusive - see 'readBills()')
/// [i, i]
YearsRange = [
  (year - 5 > 2022) ? year - 5 : 2022,
  year
];

/// Read hollidays (bills) annotations.
/// \-> [<monthAnn>.]
readBills = \ -> {
  R = [];
  monthV = [math.itos(YearsRange[0]) + "01"];
  sumV = [0.0];
  for (year = YearsRange[0] : YearsRange[1] + 1) {
    y = math.itos(year) + ".db";
    pth = path.cat([cts.accPath, y]);
    A = js.ra(file.read(pth));
    for (annJs = js.ra(A[3])) {
      Fields = js.ra(annJs);
      amV = dic.get(js.ro(Fields[2]), cts.billsAcc);
      am2V = dic.get(js.ro(Fields[3]), cts.staysAcc);
      if (!amV) {
        am0V = dic.get(js.ro(Fields[3]), cts.billsAcc);
        if (!!am0V) arr.push(amV, "-" + am0V!);
      }
      if (!!amV & !am2V) {
        mdate = js.rs(Fields[0])[0:6];
        if (mdate > monthV!) {
          R.push(monthAnn.new(monthV!, [], sumV!));
          monthV! = mdate;
          sumV! = js.rf(amV!);
        } else {
          sumV! += js.rf(amV!);
        }
      }
    }
  }
  R.push(monthAnn.new(monthV!, [], sumV!));
  return arr.filter(R, \:monthAnn a -> return a.amount > 0.0;);
};

/// Read hotels (stays) annotations.
/// \-> [<accAnn>.]
readStays = \ -> {
  R = [];
  for (year = YearsRange[0] : YearsRange[1] + 1) {
    y = math.itos(year) + ".db";
    pth = path.cat([cts.accPath, y]);
    A = js.r(file.read(pth));
    for (i, annJs = A[3]) {
      if (i == 0) continue;
      Fields = annJs;
      amV = year == 2022
        ? Fields[0] == "20220916" ? [] : dic.get(Fields[2], cts.staysAcc22)
        : dic.get(Fields[2], cts.staysAcc)
      ;
      if (!!amV) R.push(accAnn.new(Fields[0], Fields[1], amV!));
    }
  }
  return R;
};

// PROGAM DATA BASE

klen = 20;
dbStateKeyTb = path.cat([cts.dataPath, "dbStateKey.tb"]);

/// Initializes data base
/// \ -> ()
init = \ -> {
  if (!file.exists(cts.dataPath)) {
    file.mkdir(cts.dataPath);
    file.write(path.cat([cts.dataPath, "version.tb"]), cts.dataVersion);
    file.write(dbStateKeyTb, cryp.genK(klen));

    placesTb.init();
    return;
  }
  sys.throw("Data base already is initialized");
};

/// Returns the state identifier.
/// \ -> ();
readKey = \ -> return str.trim(file.read(dbStateKeyTb));;

/// Checks the state identifier 'key' and returns:
///   - If 'key' is valid, a new identifier.
///   - If 'key' is not valid, an empty string.
/// \s -> s
checkKey = \key -> {
  if (str.trim(file.read(dbStateKeyTb)) == key) {
    newKey = cryp.genK(klen);
    file.write(dbStateKeyTb, newKey);
    return newKey;
  }
  return "";
};

