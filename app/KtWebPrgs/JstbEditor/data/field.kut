// Copyright 21-Jan-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Path of a field in a table.

/// Creates a field path entry.
/// Do not use directly, Use 'mkArray' and 'mkMap' instead.
///   isMap: 'true' if entry is a Map and 'false' if entry is an Array.
///   ix: Index of Array if 'isMap' is false.
///   key: Key of Map if 'isMap' is true.
/// \b, i, s -> m<fieldEntry>
newEntry = \isMap, ix, key -> return { isMap, ix, key };;

/// Creates a new field path entry of type Array.
///   ix: Index of Array if 'isMap' is false.
/// \i -> m<fieldEntry>
mkArray = \ix -> return newEntry(false, ix, "");;

/// Creates a new field path entry of type Map.
///   key: Key of Map if 'isMap' is true.
/// \s -> m<fieldEntry>
mkMap = \key -> return newEntry(true, -1, key);;

/// \<fieldEntry> -> s
entryToJs = \E -> return js.wa([
  js.wb(E.isMap),
  js.wi(E.ix),
  js.ws(E.key)
]);;

/// \s -> <fieldEntry>
entryFromJs = \j -> {
  A = js.ra(j);
  return newEntry(
    js.rb(A[0]),
    js.ri(A[1]),
    js.rs(A[2])
  );
};

/// Creates a field path in table.
/// \[<fieldEntry>, ...] -> m<field>
new = \Entries -> return { Entries };;

/// \<field> -> s
toJs = \F -> return js.wa(arr.mp(F.Entries, entryToJs));;

/// \s -> <field>
fromJs = \j -> return new(arr.mp(js.ra(j), entryFromJs));;
