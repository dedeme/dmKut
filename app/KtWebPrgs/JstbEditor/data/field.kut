// Copyright 21-Jan-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Path of a field in a table.

/// Creates a field path entry.
/// Do not use directly, Use 'mkArray' and 'mkDic' instead.
///   isDic: 'true' if entry is a Dic and 'false' if entry is an Array.
///   ix: Index of Array if 'isDic' is false.
///   key: Key of Dic if 'isDic' is true.
/// \b, i, s -> d<fieldEntry>
newEntry = \isDic, ix, key -> return { isDic, ix, key };;

/// Creates a new field path entry of type Array.
///   ix: Index of Array if 'isDic' is false.
/// \i -> d<fieldEntry>
mkArray = \ix -> return newEntry(false, ix, "");;

/// Creates a new field path entry of type Dic.
///   key: Key of Dic if 'isDic' is true.
/// \s -> d<fieldEntry>
mkDic = \key -> return newEntry(true, -1, key);;

/// \<fieldEntry> -> [*(JS)...]
entryToJs = \E -> return [E.isDic, math.itof(E.ix), E.key];;

/// \[*(JS)...] -> <fieldEntry>
entryFromJs = \A -> return newEntry(A[0], math.ftoi(A[1]), A[2]);;

/// Creates a field path in table.
/// \[<fieldEntry>, ...] -> d<field>
new = \Entries -> return { Entries };;

/// \<field> -> [*(JS)...]
toJs = \F -> return arr.map(F.Entries, entryToJs);;

/// \[*(JS)...] -> <field>
fromJs = \A -> return new(arr.map(A, entryFromJs));;
