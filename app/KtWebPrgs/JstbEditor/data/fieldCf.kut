// Copyright 21-Jan-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Field configuration.
/// (Only for Arrays and Dics);

/// Value of search type
/// i
equals = 0;
/// Value of search type
/// i
starts = 1;
/// Value of search type
/// i
in = 2;

/// Creates a filter for array index or dic keys.
///   startRange: Start range to show, inclusive.
///   endRange  : End range to show, exclusive.
///   searchType: Search type to filter keys in Dic.
///               One of equals, starts or in.
///   isUpper   : 'true' if filter keys in Dic is done in uppercase.
///   text      : Text to filter keys in Dic.
/// \i, i, i, b, s -> d<indexKeyFilter>
newIndexKeyFilter = \startRange, endRange, searchType, isUpper, text ->
  return { startRange, endRange, searchType, isUpper, text };;

/// \<indexKeyFilter> -> [*(JS)...]
indexKeyFilterToJs = \F -> return [
    math.itof(F.startRange),
    math.itof(F.endRange),
    math.itof(F.searchType),
    F.isUpper,
    F.text
  ];;

/// \[*(JS)...] -> <indexKeyFilter>
indexKeyFilterFromJs = \A -> return newIndexKeyFilter(
    math.ftoi(A[0]), math.ftoi(A[1]), math.ftoi(A[2]), A[3], A[4]
  );;

/// Creates a new field configurarion.
///   IndexKeyFilter: Optional filter for array index or dic keys.
///   ValueFilter   : Optional filter for values.
/// \[<indexKeyFilter>]|[], [s]|[] -> d<fieldCf>
new = \IndexKeyFilter, ValueFilter -> return { IndexKeyFilter, ValueFilter };;

/// \<fieldCf> -> [*(JS)...]
toJs = \F -> return [
  F.IndexKeyFilter ? [indexKeyFilterToJs(F.IndexKeyFilter!)] : [],
  F.ValueFilter
];;

/// \[*(JS)...] -> <fieldCf>
fromJs = \A -> return new(
    A[0] ? [indexKeyFilterFromJs(A[0]!)] : [],
    A[1]
  );;
