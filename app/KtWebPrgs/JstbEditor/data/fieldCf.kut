// Copyright 21-Jan-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Field configuration.
/// (Only for Arrays and Maps);

/// Value of search type
/// i
equals = 0;
/// Value of search type
/// i
starts = 1;
/// Value of search type
/// i
in = 2;

/// Creates a filter for array index or map keys.
///   startRange: Start range to show, inclusive.
///   endRange  : End range to show, exclusive.
///   searchType: Search type to filter keys in Map.
///               One of equals, starts or in.
///   isUpper   : 'true' if filter keys in Map is done in uppercase.
///   text      : Text to filter keys in Map.
/// \i, i, i, b, s -> m<indexKeyFilter>
newIndexKeyFilter = \startRange, endRange, searchType, isUpper, text ->
  return { startRange, endRange, searchType, isUpper, text };;

/// \<indexKeyFilter> -> s
indexKeyFilterToJs = \F -> return js.wa([
  js.wi(F.startRange),
  js.wi(F.endRange),
  js.wi(F.searchType),
  js.wb(F.isUpper),
  js.ws(F.text)
]);;

/// \s -> <indexKeyFilter>
indexKeyFilterFromJs = \j -> {
  A = js.ra(j);
  return newIndexKeyFilter(
    js.ri(A[0]),
    js.ri(A[1]),
    js.ri(A[2]),
    js.rb(A[3]),
    js.rs(A[4])
  );
};

/// Creates a new field configurarion.
///   IndexKeyFilter: Optional filter for array index or map keys.
///   ValueFilter   : Optional filter for values.
/// \[<indexKeyFilter>]|[], [s]|[] -> m<fieldCf>
new = \IndexKeyFilter, ValueFilter -> return { IndexKeyFilter, ValueFilter };;

/// \<fieldCf> -> s
toJs = \F -> return js.wa([
  arr.size(F.IndexKeyFilter) == 0
    ? js.wn()
    : indexKeyFilterToJs(F.IndexKeyFilter!),
  arr.size(F.ValueFilter) ? js.wn() : js.ws(F.ValueFilter)
]);;

/// \j -> <fieldCf>
fromJs = \j -> {
  A = js.ra(j);
  return new(
    js.isNull(A[0]) ?  [] : [indexKeyFilterFromJs(A[0])],
    js.isNull(A[1]) ?  [] : [js.rs(A[1])]
  );
};
