// Copyright 22-Jan-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Field change operation.

import "data/type";

/// Type of dic modification.
dicAdd = -1;
/// Type of dic modification.
dicDel = 0;
/// Type of dic modification.
dicKey = 1;
/// Type of dic modification.
dicDup = 2;

/// Creates a new field change operation.
///   type: one of 'type' contants.
///   hash: Value to control table modificability.
///   ix  : According 'type'
///     array -> Index of entry to modify or -1 for adding a 'null' entry at '0'.
///     dic -> dicAdd: for adding a 'null' entry
///            dicDel: Delete entry
///            dicKey: Change key
///            dicDup: Make a duplicate
///     OTHERS -> -1
///   value: JSON value describing the change operation, according type:
///     undef => js.ws("")
///     null => js.wi(intValue). New type null, boolean, number, string, or dic.
///     boolean => js.wb(booleanValue)
///     number => js.wi(intValue) or js.wf(floatValue)
///     string => js.ws(stringValue)
///     array => js.wb(booleanValue). 'true'->duplicate; 'false' delete.
///     dic => ix == dicAdd: Js.ws(newKey)
///            ix == dicDel: Js.ws(oldKey)
///            ix == dicKey: Js.wa([oldKey, newKey])
///            ix == dicDup: Js.wa([oldKey, newKey])
/// \i, s, i, s -> d<fieldChange>
new = \type, hash, ix, value -> return { type, hash, ix, value };;

/// Creates a undef operation.
/// \-> d<fieldChange>
mkUndef = \-> return new(type.undef, "", -1, js.ws(""));;

/// \[*(JS)...] -> <fieldChange>
fromJs = \A -> return new(
    math.ftoi(A[0]),
    A[1],
    math.ftoi(A[2]),
    js.w(A[3])
  );;
