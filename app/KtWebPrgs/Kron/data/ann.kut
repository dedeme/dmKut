// Copyright 27-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Entry of annotations table.

/// Annotation type
typePERIODIC, typeFIX, typeMANUAL=;

/// id  : Annotation identifier.
/// type: Type of annotation.
/// data: JSON array with the following fields:
///       if type == typePERIODIC: 0 -> Float (time in seconds),
///                                1 -> Array<Int (Weekday 0[Monday]-6)>
///       if type == typeFIX: 0 -> Float (time in seconds)
///       if type == typeMANUAL: No fields.
/// text: Command to execute.
/// \i,i,s,s -> <ann>
new : id, type, data, text;

/// \<ann> -> [*.]
toJs = \a -> return [
    a[id],
    a[type],
    js.r(a[data]),
    a[text]
  ];;

/// \[*.] -> <ann>
fromJs = \A -> return [
    math.ftoi(A[id]),
    math.ftoi(A[type]),
    js.w(A[data]),
    A[text]
  ];;

/// Returns a new <ann> with the identifier changed.
/// \<ann>, i -> <ann>
setId = \a, id -> return [id, a[type], a[data], a[text]];;

/// Execute an <ann>. If there is an error, returns [error]. Otherwise, returns
/// [].
/// \<ann> -> [s]|[]
execute = \A -> {
  // Returns first token and rest of 'tx'.
  // If there are not more tokens, return [["", ""]].
  // If there are a error, returns [error].
  // \s -> [s, s] | [s]
  nextToken =  \tx -> {
    readQuotes = \q, read, rest -> {
      if (rest == "") return ["Quotes not closed in '" + rest + "'"];
      rrest = rest[1:];
      return switch (rest[0]) {
        q: [read + q, rrest];
        "\\": rrest == ""
          ? ["Quotes not closed in '" + rest + "'"]
          : rrest[0] == "\\"
            ? readQuotes(q, read + "\\", rrest[1:])
            : rrest[0] == q
              ? readQuotes(q, read + q, rrest[1:])
              : ["Bad escape sequence in '" + rest + "'"];
        default: readQuotes(q, read + rest[0], rrest);
      };
    };

    readSymbol = \read, rest -> {
      if (rest == "") return [read, ""];
      rrest = rest[1:];
      return switch (rest[0]) {
        '"': \ -> {
            SRest = readQuotes('"', '"', rrest);
            return arr.size(SRest) == 1
              ? SRest :
              [read + SRest[0][1:-1], SRest[1]];
          }();
        "'": \ -> {
            SRest = readQuotes("'", "'", rrest);
            return arr.size(SRest) == 1
              ? SRest :
              [read + SRest[0][1:-1], SRest[1]];
          }();
        default: rest[0] <= " "
          ? [read, rest]
          : readSymbol(read + rest[0], rrest);
      };
    };

    tx0 = str.ltrim(tx);
    if (tx0 == "") return ["", ""];
    return switch(tx0[0]) {
      '"': readQuotes('"', '"', tx0[1:]);
      "'": readQuotes("'", "'", tx0[1:]);
      default: readSymbol(tx0[0], tx0[1:]);
    };
  };

  Ps = [];
  txV = [A[3]];
  while () {
    tkRst = nextToken(txV!);
    if (arr.size(tkRst) == 1) return tkRst;
    if (tkRst[0] == "") break;
    Ps.push(tkRst[0]);
    txV! = tkRst[1];
  }

  if (!Ps) return ["Command is missing in annotation"];

  R = [];
  cmd = Ps.shift();
  thread.run(\-> {
      msg, ok = sys.cmd(cmd, Ps);
      if (!ok) arr.push(R, msg);
    });
  sys.sleep(500);
  return R;
};

/// Add a new annotation to an array in place.
/// \[<ann>.], <ann> -> ()
add = \:arr As, a -> {
  sz = As.size();
  newA = setId(a, sz == 0 ? 0 : As[sz - 1][0] + 1);
  As.push(newA);
};

/// Remove an annotation from an array in place
/// \[<ann>.], i -> ()
del = \:arr As, id -> {
  As.filterIn(\a -> return a[0] != id;);
};

/// Modify an annotation from an array in place
/// \[<ann>.], <ann> -> ()
modify = \:arr As, a -> {
  id = a[0];
  for (i = 0:As.size())
    if (As[i][0] == id)
      As[i] = a;
};

/// Execute an annotation from an array
/// If the execution fails, returns [error]. Otherwise, returns [].
/// \[<ann>.], i -> [s]|[]
executeId = \As, id -> {
  for (a = As)
    if (a[0] == id)
      return execute(a);

  return ["Annotation " + math.itos(id) + " not found"];
};


