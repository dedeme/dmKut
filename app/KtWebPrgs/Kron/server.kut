// Copyright 20-Nov-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Kron server.

import "libdm/log";
import "db";
import "data/ann";

pt = "/dm/dmWeb/app/KtWeb/dmcgi/Kron/tmp.txt";

/// Server start.
/// \-> ()
start = \ -> {
  ssId = math.toStr(time.now());

  SessionIdTb = db.sessionIdTb();
  SessionIdTb.write(ssId);

  // Periodic command historic
  Done = []; // Array [AnnId (i), Time (i)]

  while () {
    id = SessionIdTb.read();
    if (id != ssId) break;

    // PROCESS

    tm = time.now();
    wday0 = time.weekday(tm) - 1;
    wday = wday0 == -1 ? 6 : wday0; // Compatible with 'cmdWday'(A[2])
    AnnsTb = db.annsTb();
    Anns = AnnsTb.read();

    // Remove old commands from periodic command historic
    tm2 = tm - (240000); // tm - 4 minutes
    arr.filterIn(Done, \IdTm -> return IdTm[1] <= tm2;);

    // Execute periodic commands
    PeriodicToExecs = arr.filter(
      arr.filter(
        Anns,
        \A -> {
            if (A[1] == ann.typePERIODIC) {
              data = js.ra(A[2]);
              if (arr.any(js.ra(data[1]), \wd -> return js.ri(wd) == wday;)) {
                t0 = math.toInt(js.rf(data[0]) * 1000.0);
                cmdTm = time.new(
                  time.day(tm), time.month(tm), time.year(tm),
                  time.hour(t0), time.minute(t0), 0
                );
                cmdTm2 = cmdTm + 120000; // cmdTm + 2 minutes
                return tm >= cmdTm & tm <= cmdTm2;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }
      ),
      \A -> return !arr.any(Done, \IdTm -> return IdTm[0] == A[0];);
    );
    for (A = PeriodicToExecs) {
      arr.push(Done, [A[0], tm]);
      ann.execute(A);
      log.warning("Executed:\n" + A[3]);
    }

    // Execute fix commands
    FixToExecs = arr.filter(
      Anns,
      \A -> {
        if (A[1] == ann.typeFIX) {
          return math.toInt(js.rf(A[2]) * 1000.0) <= tm;
        } else {
          return false;
        }
      }
    );
    for (A = FixToExecs) {
      ann.del(Anns, A[0]);
      AnnsTb.write(Anns);
      ann.execute(A);
      log.warning("Executed:\n" + A[3]);
    }

    // END PROCESS

    sys.sleep(60000);
  }
};
