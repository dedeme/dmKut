// Copyright 03-May-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>


/// Diary operation.
/// An operation is an array wose first field is its type. The remains fields
/// have different meanings depending on such type.

/// Index of <Op> field 1 for 'se', bu' and 'st'.
/// i
nicks = 1;
/// Index of <Op> field 2 for 'se', bu' and 'st'.
/// i
stocks = 2;
/// Index of <Op> field 3 for 'se', bu' and 'st'.
/// i
price = 3;
/// Index of <Op> field 1 for other differents to 'se', bu' and 'st'.
/// i
amount = 1;
/// Index of <Op> field 2 for other differents to 'se', bu' and 'st'.
/// i
cause = 2;


/// Creates an annation of type "se" (sell)
/// \s, i, f -> <op>
se = \nick, stocks, price -> return ["se", nick, stocks, price];;

/// Creates an annation of type "bu" (buy)
/// \s, i, f -> <op>
bu = \nick, stocks, price -> return ["bu", nick, stocks, price];;

/// Creates an annation of type "st" (stock)
/// \s, i, f -> <op>
st = \nick, stocks, price -> return ["st", nick, stocks, price];;

/// Creates an annation of type "in" (Income)
/// \f -> <op>
in = \amount -> return ["in", amount];;

/// Creates an annation of type "wi" (Withdrawal)
/// \f -> <op>
wi = \amount -> return ["wi", amount];;

/// Creates an annation of type "pr" (Profits)
/// \f, s -> <op>
pr = \amount, cause -> return ["pr", amount, cause];;

/// Creates an annation of type "fe" (Fees)
/// \f, s -> <op>
fe = \amount, cause -> return ["fe", amount, cause];;

/// Creates an annation of type "pd" (Positive differences)
/// \f, s -> <op>
pd = \amount, cause -> return ["pd", amount, cause];;

/// Creates an annation of type "nd" (Negative differences)
/// \f, s -> <op>
nd = \amount, cause -> return ["nd", amount, cause];;

/// Returns the type of O.
/// \<op> -> s
type = \O -> return O[0];;

/// \<op> -> s
toJs = \O -> return js.wa(
  [js.ws(type(O))] +
  switch (type(O)) {
    "se": [js.ws(O[1]), js.wi(O[2]),js.wf(O[2])];
    "bu": [js.ws(O[1]), js.wi(O[2]),js.wf(O[2])];
    "st": [js.ws(O[1]), js.wi(O[2]),js.wf(O[2])];
    "in": [js.wf(O[1])];
    "wi": [js.wf(O[1])];
    "pr": [js.wf(O[1]), js.ws(O[2])];
    "fe": [js.wf(O[1]), js.ws(O[2])];
    "pd": [js.wf(O[1]), js.ws(O[2])];
    "nd": [js.wf(O[1]), js.ws(O[2])];
    default: sys.throw("Operation type '" + type(O) + "' is unknown.");
  }
);;

/// \s -> <op>
fromJs = \j -> {
  A = js.ra(j);
  tp = js.rs(A[0]);
  return switch (tp) {
    "se": [tp, js.rs(A[1]), js.ri(A[2]), js.rf(A[3])];
    "bu": [tp, js.rs(A[1]), js.ri(A[2]), js.rf(A[3])];
    "st": [tp, js.rs(A[1]), js.ri(A[2]), js.rf(A[3])];
    "in": [tp, js.rf(A[1])];
    "wi": [tp, js.rf(A[1])];
    "pr": [tp, js.rf(A[1]), js.rs(A[2])];
    "fe": [tp, js.rf(A[1]), js.rs(A[2])];
    "pd": [tp, js.rf(A[1]), js.rs(A[2])];
    "nd": [tp, js.rf(A[1]), js.rs(A[2])];
    default: sys.throw("Operation type '" + tp + "' is unknown.");
  };
};
