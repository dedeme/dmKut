// Copyright 28-Mar-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Daily profits data.

import "cts";
import "data/profitsEntry";

/// Creates a new daily profits data.
///   date: Date of calculation.
///   profits: Profits on date (amount)
///   cash: Cash on date (amount)
///   risk: Minimum future profits on date (amount)
/// \s, f, f, f -> a<DailyProfitsEntry>
new : date, profits, cash, risk;

/// Calculate weekly profits of investors.
///   invPs: Daily profits of investors.
/// \[<DailyProfitsEntry>.] -> [<ProfitsEntry>.]
mkProfits = \InvP -> {
  // [<ProfitsEntry>...]
  R = [];

  now = time.now();
  Date = [time.newDate(1, 1, time.year(now))];
  ixV = [0];
  isFirstV = [true];
  while (time.dfDays(Date!, now) <= 0) {
    if (time.weekday(Date!) == 0 | isFirstV!) {
      isFirstV! = false;
      day = time.toStr(Date!);
      while (ixV! < arr.size(InvP) & InvP[ixV!][date] <= day) ixV! += 1;

      pfs = ixV! > 0
        ? InvP[ixV! - 1][profits]
        : arr.size(InvP) > 0
          ? InvP[0][profits]
          : 1.0
      ;

      arr.push(R, profitsEntry.new(day, pfs));
    }

    Date! = time.addDays(Date!, 1);
  }

  return R;
};
