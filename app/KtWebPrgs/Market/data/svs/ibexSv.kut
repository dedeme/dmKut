// Copyright 21-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Ibex server.

import "libdm/ext";
import "libmkt/qs";
import "inves";

/// Read Ibex historic quotes from bolsamania.
/// Returns tuple [[s.], [s.]], where:
///   Return[0] = 'quotes Type Nick.tb'. Can be empty if there is an error.
///   Return[1] = Array of errors.
/// \ -> [[<quotes>.], [s.]]
readHistoricQuotes = \ -> {
  // [s.] (quotes type file 'NICK.tb')
  Qs = [];
  // [s.]
  Errs = [];

  // \-> [<qotes>.]
  mkQs = \-> {
    QsR, ok = qs.fromStr(Qs.size(), arr.join(Qs.reverse(), "\n"));
    if (ok) return QsR;
    Errs.push(QsR);
    return [];
  };

  // \s -> [[<qotes>.], [s.]]
  retError = \err -> {
    Errs.push(err);
    return [mkQs(), Errs];
  };

  url = "https://www.bolsamania.com/indice/IBEX-35/historico-precios";
  html, ok= ext.wget(url, false);
  if (ok) {
    start0 = str.index(html, "\"'fallers'\"");
    if (start0 == -1) return retError("Start 'fallers' not found");
    start = str.indexFrom(html, "<tbody>", start0);
    if (start == -1) return retError("Start '<tbody>' not found");
    end = str.indexFrom(html, "</tbody>", start);
    if (end == -1) return retError("End '</tbody>' not found");

    endRowV = [start];
    while () {
      if (endRowV! < 0 | endRowV! > end) break;
      startRow = str.indexFrom(html, "<tr>", endRowV!);
      endRowV! = str.indexFrom(html, "</tr>", startRow);

      // DATE

      date0 = str.indexFrom(html, "<td", startRow);
      if (date0 == -1) {
        Errs.push("Start date '<td' not found");
        continue;
      }
      startDate = str.indexFrom(html, ">", date0);
      if (startDate == -1) {
        Errs.push("Start date '>' not found");
        continue;
      }
      endDate = str.indexFrom(html, "<", startDate);
      if (endDate == -1) {
        Errs.push("End date '<' not found");
        continue;
      }
      dt0 = str.trim(html[startDate + 1:endDate]);
      datePs = str.split(dt0, "-");
      datePsIx = arr.index(
        str.split("ene-feb-mar-abr-may-jun-jul-ago-sep-oct-nov-dic", "-"),
        \m -> return m == datePs[1];
      );
      if (datePsIx == -1) {
        Errs.push("Bad date: " + dt0);
        continue;
      }
      date = "20" + datePs[2] + ("0" + math.itos(datePsIx + 1))[-2:] + datePs[0];
      dateOp = time.fromStr(date);
      if (!dateOp) {
        Errs.push("Bad date: " + dt0);
        continue;
      }

      // CLOSE

      close0 = str.indexFrom(html, "<td", endDate);
      if (close0 == -1) {
        Errs.push("Start close '<td' not found");
        continue;
      }
      startClose = str.indexFrom(html, ">", close0);
      if (startClose == -1) {
        Errs.push("Start close '>' not found");
        continue;
      }
      endClose = str.indexFrom(html, "<", startClose);
      if (endClose == -1) {
        Errs.push("End close '<' not found");
        continue;
      }
      closeOp = math.fromIso(str.trim(html[startClose + 1:endClose]));
      if (!closeOp) {
        Errs.push("Bad close: " + html[startClose + 1:endClose]);
        continue;
      }
      close = math.ftos(closeOp!);

      // MAX

      max1 = str.indexFrom(html, "<td", endClose);
      if (max1 == -1) {
        Errs.push("Start max '<td' (1) not found");
        continue;
      }
      max0 = str.indexFrom(html, "<td", max1 + 3);
      if (max0 == -1) {
        Errs.push("Start max '<td' (2) not found");
        continue;
      }
      startMax = str.indexFrom(html, ">", max0);
      if (startMax == -1) {
        Errs.push("Start max '>' not found");
        continue;
      }
      endMax = str.indexFrom(html, "<", startMax);
      if (endMax == -1) {
        Errs.push("End max '<' not found");
        continue;
      }
      maxOp = math.fromIso(str.trim(html[startMax + 1:endMax]));
      if (!maxOp) {
        Errs.push("Bad max: " + html[startMax + 1:endMax]);
        continue;
      }
      max = math.ftos(maxOp!);

      // MIN

      min0 = str.indexFrom(html, "<td", endMax);
      if (min0 == -1) {
        Errs.push("Start min '<td' not found");
        continue;
      }
      startMin = str.indexFrom(html, ">", min0);
      if (startMin == -1) {
        Errs.push("Start min '>' not found");
        continue;
      }
      endMin = str.indexFrom(html, "<", startMin);
      if (endMin == -1) {
        Errs.push("End min '<' not found");
        continue;
      }
      minOp = math.fromIso(str.trim(html[startMin + 1:endMin]));
      if (!minOp) {
        Errs.push("Bad min: " + html[startMin + 1:endMin]);
        continue;
      }
      min = math.ftos(minOp!);

      // OPEN

      open0 = str.indexFrom(html, "<td", endMin);
      if (open0 == -1) {
        Errs.push("Start open '<td' not found");
        continue;
      }
      startOpen = str.indexFrom(html, ">", open0);
      if (startOpen == -1) {
        Errs.push("Start open '>' not found");
        continue;
      }
      endOpen = str.indexFrom(html, "<", startOpen);
      if (endOpen == -1) {
        Errs.push("End open '<' not found");
        continue;
      }
      openOp = math.fromIso(str.trim(html[startOpen + 1:endOpen]));
      if (!openOp) {
        Errs.push("Bad open: " + html[startOpen + 1:endOpen]);
        continue;
      }
      open = math.ftos(openOp!);

      Qs.push(str.fmt(
        "%v:%v:%v:%v:%v:0:false",
        [date, open, close, max, min]
      ));
    }

    return [mkQs(), []];
  }
  return [[], ["Fail reading '" + url + "': "+ html]];
};

/// Read Ibex components from bolsamania.
/// \ -> [[s.]|s,b] :: Result with an bolsamania company codes list.
readComponents = \ -> {
  url = "https://www.bolsamania.com/indice/IBEX-35";
  html, ok = sys.cmd(
    "timeout", ["-s", "KILL", "30", "wget", "-q", "--no-cache", "-O", "-", url]
  );
  if (!ok) return ["Fail reading '" + url + "': "+ html, false];

  Codes = []; // [s.]
  iV = [0];
  iV! = str.indexFrom(html, "<tbody>", iV!);
  if (iV! == -1) return ["Ibex companies table start not found", false];
  iEnd = str.indexFrom(html, "</tbody>", iV!);
  if (iEnd == -1) return ["Ibex companies table end not found", false];

  while () {
    iV! = str.indexFrom(html, '/accion/', iV!);
    if (iV! == -1 | iV! > iEnd ) break;
    start = iV! + 8;
    end = str.indexFrom(html, "'", start);
    if (end == -1) iV! = start;
    else {
      Codes.push(html[start:end]);
      iV! = end;
    }
  }

  return [Codes, true];
};
