// Copyright 16-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Home page.

import "KtWeb/rp";
import "libmkt/quotes";
import "libmkt/models";
import "libmkt/model";
import "db/cosTb";
import "db/svCodesTb";
import "db/quotesDb";
import "db/investorTb";
import "db/initRefsTb";
import "db/acc/diariesDb";
import "db/trading/closesTb";
import "data/initRef";
import "data/acc/ann";
import "data/acc/settlement";
import "data/co/cos";
import "data/co/co";
import "data/investor/investor";
import "data/investor/istrategy";
import "fns";

// \s -> s
mkUrl = \nick -> {
  Codes = svCodesTb.read("INVES");
  Code = dic.get(Codes, nick);
  if (!!Code)
    return str.fmt(
      "https://es.investing.com/equities/%s", [Code!]
    );
  return "";
};

// \s -> s
rpErr = \error -> return rp.mk({error});;

/// \{*.} -> s
process = \Rq -> {
  switch (Rq.rq) {
    "idata": {
      // [<ann>.]
      :arr Anns = diariesDb.investorAnns(diariesDb.investorYears()[0]);
      :settlement set = ann.mkSettlement(Anns);
      Pf = set.Portfolio;
      Lst = []; // [[s, b, b, s].]
      for (:co c = cosTb.read()[cos.Cos]) {
        nk = c.nick;
        Lst.push([nk, c.isSelected, !!dic.get(Pf, nk), mkUrl(nk)]);
      }

      return rp.mk({
        Lst
      });
    }
    "nickData": {
      nk = Rq.nick;
      strgOp = dic.get(investorTb.read()[investor.Nicks], nk);
      if (!strgOp) {
        rpErr(str.fmt("Strategy of %v not found", [nk]));
        return;
      }
      :istrategy strg = strgOp!;
      mdOp = models.get(strg.modelId);
      if (!mdOp) {rpErr("Model " + strg.modelId + " not found"); return;}
      :model md = mdOp!;
      Params = strg.Params;

      :quotes qts = fns.getOpenCloses(nk);
      cl = arr.peek(qts.Closes)[0];
      :arr Refs = fns.getReferences(nk, md.id, Params, qts, false);

      :arr Anns = diariesDb.investorAnns(diariesDb.investorYears()[0]);
      :settlement set = ann.mkSettlement(Anns);
      Pf = set.Portfolio;
      eOp = dic.get(Pf, nk);
      stocks = !eOp ? 0 : eOp![0];
      price = !eOp ? -1.0 : eOp![1];

      return rp.mk({
        error: "",
        price,
        profits: math.itof(stocks) * (cl - price),
        Dates: qts.Dates,
        Closes: arr.map(qts.Closes, \Cs -> return Cs[0];),
        Refs
      });
    }
    default: sys.throw("Value of rq (" + Rq.rq + ") is not valid");
  }
};
