// Copyright 10-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Servers page.

import "KtWeb/rp";
import "libdm/log";
import "data/qsvs";
import "data/qsv/qsv";
import "db/svCodesTb";
import "db";

import "net/readCurrent";
import "net/readDaily";
import "net/readHistoric";

/// \{*.} -> s
process = \Rq -> {
  switch (Rq.rq) {
    "idata": {
      , selected : Rq;

      return rp.mk({
        dbKey: db.readKey(),
        Svs: arr.map(qsvs.list(), \:qsv sv -> return [
            sv.id, sv.name, sv.withCurrent, sv.withDaily, sv.withHistoric
          ];),
        Codes: selected == "" ? {} : svCodesTb.read(selected)
      });
    }
    "setCodes": {
      dbKey = db.checkKey(Rq.dbKey);
      if (dbKey == "") return rp.mkOutdated();

      // s, {s.}
      svId, Codes : Rq;
      svCodesTb.write(svId, Codes);
      return rp.mk({ dbKey });
    }
    "testCurrent": {
      , svId : Rq;
      withErrorsV = [false];
      withWarningsV = [false];

      Qs, ok = readCurrent.runServer(svId);
      if (!ok) {
        log.error(Qs);
        withErrorsV! = true;
      }

      return rp.mk({
        withErrors: withErrorsV!,
        withWarnings: withWarningsV!
      });
    }
    "testDaily": {
      , svId : Rq;
      withErrorsV = [false];
      withWarningsV = [false];

      Qs, Ws = readDaily.runServer(svId);
      if (!!Ws) {
        for (w = Ws) log.warning(w);
        withWarningsV! = true;
      }
      if (!Qs) {
        log.error("Quotes of " + svId + " can not be read");
        withErrorsV! = true;
      }

      return rp.mk({
        withErrors: withErrorsV!,
        withWarnings: withWarningsV!
      });
    }
    "testCo": {
      svId, nick : Rq;
      withErrorsV = [false];
      withWarningsV = [false];

      Qs, Ws = readHistoric.oneServer(svId, nick);
      if (!!Ws) {
        for (w = Ws) log.warning(w);
        withWarningsV! = true;
      }
      if (!Qs) {
        log.error("Quotes can no be read");
        withErrorsV! = true;
      }

      return rp.mk({
        withErrors: withErrorsV!,
        withWarnings: withWarningsV!
      });
    }
    default: sys.throw("Value of rq (" + Rq.rq + ") is not valid");
  }
};
