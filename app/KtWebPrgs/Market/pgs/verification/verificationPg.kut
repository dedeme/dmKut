// Copyright 17-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Accounting balance page.

import "KtWeb/rp";
import "libdm/log";
import "cts";
import "data/acc/ann";
import "data/acc/settlement";
import "data/acc/ldg";
import "db/acc/diariesDb";

// \s -> {b, [[s, f, f].], f} :: {ok, entries, cash}
marketData = \lastDate -> {
  okV = [true];
  year = lastDate[:4];
  cashV = [0.0];

  Anns = arr.filter(
    diariesDb.investorAnns(year),
    \:ann a -> return a.date <= lastDate;
  );
  :settlement set = ann.mkSettlement(Anns);
  :ldg l = set.ledger;
  if (!!set.Errors) {
    okV! = false;
    for (e = set.Errors) log.error(e);
  }
  cashV! += l.cash;
  :dic Pf = set.Portfolio;

  Entries = arr.map(
    Pf.toArr(),
    \Kv -> return [Kv[0], Kv[1][0], Kv[1][1]];
  );
  return {
    ok: okV!,
    entries: Entries,
    cash: cashV!
  };
};

// \ -> {[[s, f, f, f].], f} :: {entries, cash}
stocksData = \ -> {
  :arr All = js.r(file.read("/dm/KtWeb/dmcgi/Stocks/all.tb"));
  y = time.format(time.now(), "%Y");
  Year = All.find(\E -> return E[0] == y;)!;
  Anns = Year[1][1];
  :dic Pf = {}; //{[f, f].} :: {nick -> [stocks, price]}
  for (A = Anns) {
    nick = A[3];
    stocks = A[4];
    price = A[5];
    if (A[1]) { // isSell
      E = Pf[nick];
      if (E[0] < stocks)
        sys.throw(str.fmt(
          "Selling %v stocks of %v when only there are %v",
          [stocks, nick, E[0]]
        ));
      else E[0] -= stocks;
    } else {
      EOp = Pf.get(nick);
      if (!EOp) {
        E = [0.0, 0.0];
        E[0] = stocks;
        E[1] = price;
        Pf.put(nick, E);
      } else {
        E = EOp!;
        sum = E[0] + stocks;
        E[1] = (E[0] * E[1] + stocks * price) / sum;
        E[0] = sum;
      }
    }
  }
  Entries = arr.map(
    arr.filter(
      Pf.toArr(),
      \Kv -> return Kv[1][0] > 0.0;
    ),
    \Kv -> {
      stocks = Kv[1][0];
      ttCost = stocks * Kv[1][1];
      return [Kv[0], stocks, ttCost / stocks, ttCost];
    }
  );
  return {
    entries: Entries,
    cash: arr.reduce(Entries, 0.0, \r, E -> return r + E[3];)
  };
};

// \ -> {f, f} :: {cash, stocks}
hcontaData = \ -> {
  accCash = "57202";
  accStocks = "54000";
  cashV = [0.0];
  stocksV = [0.0];
  y = time.format(time.now(), "%Y");
  Data = js.r(file.read("/dm/KtWeb/dmcgi/Hconta/" + y + ".db"));
  Anns = Data[3];
  for (A = Anns) {
    :dic Ds = A[2];
    :dic Cs = A[3];

    amCashDOp = Ds.get(accCash);
    if (!amCashDOp) {
      amCashCOp = Cs.get(accCash);
      if (!!amCashCOp) cashV! -= amCashCOp!;
    } else {
      cashV! += amCashDOp!;
    }

    amStocksDOp = dic.get(Ds, accStocks);
    if (!amStocksDOp) {
      amStocksCOp = Cs.get(accStocks);
      if (!!amStocksCOp) stocksV! -= amStocksCOp!;
    } else {
      stocksV! += amStocksDOp!;
    }
  }
  return {cash: cashV!, stocks: stocksV!};
};

/// \m -> ()
process = \Rq -> {
  switch (Rq.rq) {
    "idata": {
      lastDate = Rq.lastDate;

      :: MarketD = marketData(lastDate);
      ok = MarketD.ok;

      StocksD = stocksData();

      HcontaD = hcontaData();

      return rp.mk({
        ok,
        marketCash: MarketD.cash,
        MarketStocks: MarketD.entries,
        stocksSum: StocksD.cash,
        StocksStocks: StocksD.entries,
        hcontaCash: HcontaD.cash,
        hcontaSum: HcontaD.stocks
      });
    }
    default: sys.throw("Value of rq (" + Rq.rq + ") is not valid");
  }
};
