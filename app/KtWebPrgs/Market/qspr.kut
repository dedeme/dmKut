// Copyright 09-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Quotes processing management.

import "libdm/log";
import "libmkt/quotes";
import "libmkt/quote";
import "libmkt/qs";
import "libmkt/models";
import "libmkt/model";
import "libmkt/cts" : mcts;
import "data/qsprRs";
import "data/co/cos";
import "data/co/co";
import "data/investor/investor";
import "data/investor/istrategy";
import "data/acc/ann";
import "data/acc/ldg";
import "data/acc/opr";
import "data/acc/settlement";
import "data/invOperation";
import "data/ibex";
import "data/chart/dailyInvestorData";
import "data/chart/dailyChart";
import "data/chart/profitsEntry";
import "data/tableCheck";
import "data/qsv/historicQ";
import "data/qsv/dailyQ";
import "data/qsv/currentQ";
import "db/trading/closesTb";
import "db/trading/refsTb";
import "db/acc/diariesDb";
import "db/acc/profitsDb";
import "db/quotesDb";
import "db/investorTb";
import "db/cosTb";
import "db/svCodesTb";
import "db/invOperationsTb";
import "db/ibexTb";
import "db/daily/dailyChartsTb";
import "net/readHistoric";
import "net/readDaily";
import "net/readCurrent";
import "net/readIxs";
import "cts";
import "fns";


// Create a <qsprRs> without error nor warnings.
//   value: Result value.
//   Returns {value: 'value', withWarnings: false, withError: false}
// \* -> <qsprRs>
ok = \value -> return qsprRs.new(value, false, false);;

// Create a <qsprRs> with error written in log. (qsprRs.value = [])
//   msg: Error message.
//   Returns {value: [], withWarnings: false, withError: true}
// \s -> <qsprRs>
error = \msg -> {
  log.error(msg);
  return qsprRs.new([], false, true);
};

// Create a <qsprRs> with warnings written in log.
//   msgs: Warning messages
//   value: Result value.
//   Returns {value: 'value', withWarnings: true, withError: false}
// \[s.], * -> d<qsprRs>
warning = \msgs, value -> {
  for (w = msgs) log.warning(w);
  return qsprRs.new(value, true, false);
};

// Returns a new <qsprRs> such that:
//   - If rs.withError == true -> rs is returned.
//   - Otherwise 'fn' is run and its result is returned. If rs is withWarnings
//     the final result is withWarnings too.
//   rs: First result.
//   fn: Function with 'rs.value' as argument.
// \<qsprRs>, (\* -> <qsprRs>) -> <qsprRs>
bind = \:qsprRs rs, fn -> {
  if (rs.withError) return rs;
  :qsprRs rs2 = fn(rs.value);
  rs2.withWarnings |= rs.withWarnings;
  return rs2;
};

// UTILITIES -------------------------------------------------------------------

// \s, s, i -> <qsprRs<[<quote>.]>>
toQs = \prefix, qts, size -> {
  qts, okR = qs.fromStr(size, qts);
  return okR
    ? ok(qts)
    : error(prefix + ": " + qts)
  ;
};

// \s -> <qsprRs<[<quote>.]>>
getQs = \nick -> {
  qts, okR = quotesDb.readQs(nick);
  return okR
    ? ok(qts)
    : error("Reading company " + nick + ": " + qts)
  ;
};

// \s, s -> <qsprRs<[<quote>.]>>
simpleCorrection = \prefix, qts ->{
  return bind(
    toQs(prefix, qts, mcts.historicQuotes),
    \Qs -> {
      // [[<quote>.], [s.]]
      Qs2, :arr Errs = qs.correct(Qs);
      return !Errs
        ? ok(Qs2)
        : warning(Errs.map(\e -> return prefix + ": " + e;), Qs2)
      ;
    });};

// \s, [<quote>.], [<quote>.] -> <qsprRs<[<quote>.]>>
dateCorrection = \prefix, Mqs, Qs -> {
  // [[<quote>.], [s.]]
  Qs2, :arr Errs = qs.correctDates(Qs, Mqs);
  return !Errs
    ? ok(Qs2)
    : warning(Errs.map(\e -> return prefix + ": " + e;), Qs2)
  ;
};

// \s, s -> <qsprRs<[<quote>.]>>
downloadHistoric = \prefix, nick -> {
  QWs, rOk = readHistoric.run(nick);
  if (!rOk) return error(prefix + ":" + QWs);

  :arr Qs, Ws : QWs;

  return !Ws
    ? ok(Qs.map(historicQ.toQuote))
    : warning(Ws, Qs.map(historicQ.toQuote))
  ;
};

// Returns qsprRs<[<quote>.]>
//: \ -> <qsprRs>
downloadIbexHistoric = \ -> {
  R, okR = readIxs.ibexHistoric();
  if (!okR) return error(R);
  // [<quotes>.], [s.]
  :arr Qs, :arr Ws : R;
  :arr Qts = Qs.map(historicQ.toQuote);

  errV = [""];
  if (!Qts) errV! = "IBEX: Quotes can not be read";
  else if (Qts.size() == 0) errV! = "IBEX: No quotes found";

  if (errV! != "") {
    for (w = Ws) log.warning(w);
    return error(errV!);
  }

  return !Ws
    ? ok(Qts)
    : warning(Ws, Qts)
  ;
};

// \s, [<quote>.], [<quote>.], [<quote>.] -> <qsprRs<[<quote>.]>>
merge = \prefix, Mqs, Nqs, Oqs -> {
  // [<quote>.], [s.]
  Qs, :arr Errs = qs.merge(Nqs, Mqs, Oqs);

  return !Errs
    ? ok(Qs)
    : warning(Errs.map(\e -> return prefix + ": " + e;), Qs)
  ;
};

// PUBLIC INTERFACE ------------------------------------------------------------

/// Returns <qsprRs<s>> with 'qts' corected.
/// Return and paremeter 'qts' are type file 'NICK.tb'.
///   prefix: Prefix for errors and warnings.
///   qts   : Company quotes. (Company can not be main)
///   RETURN: qsprRs<s>.
/// \s, s -> <qsprRs>
correctStr = \prefix, qts ->
  return bind(
    simpleCorrection(prefix, qts),
    \Qs -> return ok(qs.toStr(Qs));
  );;

/// Return <qsprRs<s>> with 'qts' corected.
/// Return and paremeter 'qts' are type file 'NICK.tb'.
///   prefix  : Prefix for errors and warnings.
///   qs      : Company quotes.
///   mainNick: Main company nick.
///   RETURN  : qsprRs<s>.
/// \s, s, s -> <qsprRs>
correctStr2 = \prefix, qts, mainNick ->
  return bind(
    simpleCorrection(prefix, qts),
    \Qs -> return bind(
        getQs(mainNick),
        \Mqs -> return bind(
          dateCorrection(prefix, Mqs, Qs),
          \Qs -> return ok(qs.toStr(Qs));
        );
      );
    );;

/// Reads quotes of 'nick' from servers, merges with current quotes,
/// corrects and, if it have not errors, writes them in 'quotesDb'.
///   prefix  : Prefix for errors and warnings.
///   mainNick: Main company nick.
///   nick    : Company nick.
///   RETURN  : qsprRs<[<quote>.]>.
/// \s, s, s -> <qsprRs>
updateHistoric = \prefix, mainNick, nick -> {
  return bind(
    getQs(nick),
    \oldQs -> return bind(
      nick == mainNick
        ? ok(oldQs)
        : getQs(mainNick),
      \mainQs -> {
        if (mainNick != nick) {
          :quote mainQ = mainQs[0];
          :quote oldQ = oldQs[0];
          if (!oldQ.isMissing() & mainQ.date <= oldQ.date) return ok(oldQs);
        }
        return bind(
          downloadHistoric(prefix, nick),
          \newQs -> {
            :qsprRs R = merge(prefix, mainQs, newQs, oldQs);
            quotesDb.write(nick, qs.toStr(R.value));
            return R;
          }
        );
      }
    );
  );
};

/// Reads quotes of Ibex, merges with current quotes,
/// corrects and, if it have not errors, writes them in 'ibexTb'.
///   mainNick: Main company nick.
///   RETURN  : qsprRs<qs>.
/// \s -> <qsprRs>
updateIbexHistoric = \mainNick -> {
  :ibex qts = ibexTb.read();
  return bind(
    downloadIbexHistoric(),
    \newQs -> return bind(
      ok(qts.Qs),
      \oldQs -> return bind(
        getQs(mainNick),
        \mainQs -> {
          :qsprRs R = merge("IBEX", mainQs, newQs, oldQs);
          ibexTb.write(ibex.new(qts.Cos, R.value));
          return R;
        }
      );
    );
  );
};

/// Update last closes and references tables from historic and returns
/// "" or an error if the update failed.
///   coId: Company identifier (nick).
///   upInitRefs: Update first real reference if its value is 'true'.
/// \s -> s
updateClosesAndRefs = \coId, upInitRefs -> {
  if (arr.any(cts.IxNicks, \e -> return e == coId;)) {
    Ixs, ok = readIxs.ixs();
    if (!ok) return Ixs;

    Ibex, Euro, Ws : Ixs;
    for (w = Ws) log.warning(w);

    Value = coId == cts.IxNicks[0] ? Ibex : Euro;
    if (Value[0] > 100.0 & Value[1] > 100.0) {
      :dic Closes = closesTb.read();
      Closes.put(coId, [true, Value]);
      closesTb.write(Closes);
    }
    return "";
  }

  Qs, ok = quotesDb.readQs(coId);
  if (!ok) return str.fmt("Fail reading quotes of '%v': %v",  [coId, Qs]);
  :dic Closes = closesTb.read();
  Closes.put(coId, [true, arr.peek(qs.closes(Qs))]);
  closesTb.write(Closes);

  :dic Refs = refsTb.read();
  :investor inv = investorTb.read();

  strgOp = dic.get(inv.Nicks, coId);
  if (!strgOp) return str.fmt(
      "Strategy for %v not found", [coId]
    );
  :istrategy strg = strgOp!;

  mdOp = models.get(strg.modelId);
  if (!mdOp) return str.fmt(
      "Model %s of %v not found", [strg.modelId, coId]
    );

  :cos cs = cosTb.read();
  mainNick = cs.mainNick;

  :quotes qts, ok2 = quotesDb.readQuotes(mainNick, coId);
  if (!ok2) return str.fmt("Fail reading quotes(2) of '%v': %v",  [coId, qts]);

  // [f.]
  :arr Srfs = fns.getReferences(
    coId, strg.modelId, strg.Params, qts, upInitRefs
  );
  currentRef = Srfs.pop();
  prevRef = Srfs.peek();
  Refs.put(coId, [prevRef, currentRef]);

  refsTb.write(Refs);

  return "";
};

/// Update closes from daily data. Returns an empty string if all go good or
/// a error message.
/// \ -> s
updateDailyCloses = \ -> {
  Rp, ok = readCurrent.run();
  if (!ok) {
    log.error(Rp);
    return Rp;
  }
  svId, :arr Quotes = Rp;

  :dic Codes = svCodesTb.read(svId);

  :dic Closes = closesTb.read();
  :cos cs = cosTb.read();
  :arr SelNicks = arr.map(
    arr.filter(cs.Cos, \:co c -> return c.isSelected;),
    \:co c -> return c.nick;
  );

  NewCloses = {}; // {[b,f].}
  for (nk = SelNicks) {
    codeOp = Codes.get(nk);
    if (!codeOp) {
      log.error("Code of " + nk + " not found in " + svId);
      QuoteOp = Closes.get(nk);
      if (!QuoteOp) log.error("Quote of " + nk + " not found");
      else NewCloses.put(nk, [false, QuoteOp![1]]);
    } else {
      quoteOp = Quotes.find(\:currentQ q -> return q.code == codeOp!;);
      if (!quoteOp) {
        log.error("Daily quote of " + nk + " not found");
        quote2Op = Closes.get(nk);
        if (!quote2Op) log.error("Quote of " + nk + " not found");
        else NewCloses.put(nk, [false, quote2Op![1]]);
      } else {
        :currentQ q = quoteOp!;
        NewCloses.put(nk, [false, q.value]);
      }
    }
  }

  // Indexes nick
  ibexNick = cts.IxNicks[0];
  euroNick = cts.IxNicks[1];
  NewCloses.put(ibexNick, [false, Closes[ibexNick][1]]);
  NewCloses.put(euroNick, [false, Closes[euroNick][1]]);
  Ixs, ok2 = readIxs.ixs();
  if (ok2) {
    Ibex, Euro, Ws : Ixs;
    for (w = Ws) log.warning(w);
    if (Ibex[0] > 100.0 & Ibex[1] > 100.0)
      NewCloses.put(ibexNick, [false, Ibex]);
    if (Euro[0] > 100.0 & Euro[1] > 100.0)
      NewCloses.put(euroNick, [false, Euro]);
  } else {
    log.error(Ixs);
  }

  closesTb.write(NewCloses);

  return "";
};

/// Update operations. Returns a message if an error happend. Otherwise returns
/// an empty string.
/// \b -> s
updateOperations = \ -> {
  :dic Closes = closesTb.read();
  :dic Refs = refsTb.read();
  :arr Years = diariesDb.investorYears();
  Anns = !Years ? [] : diariesDb.investorAnns(Years[0]);
  :settlement set = ann.mkSettlement(Anns);
  :dic Pf = set.Portfolio;

  InvOps = []; // [<invOperation>.]
  Nicks = arr.map(
    arr.filter(cosTb.read()[cos.Cos], \:co c -> return c.isSelected;),
    \:co c -> return c.nick;
  );
  for (nk = Nicks) {
    hCloseOp = Closes.get(nk);
    if (!hCloseOp) return "Closes of " + nk + " not found in 'closes.tb'";
    isHistoric = hCloseOp![0];
    cl = hCloseOp![1];

    // [<quote>.]
    :arr Qs, ok = quotesDb.readQs(nk);
    if (!ok) return Qs;
    :arr Cls = qs.closes(Qs);
    pvCl = isHistoric ? Cls[-2:][0] : Cls.peek();

    RfsOp = Refs.get(nk);
    if (!RfsOp) return "References of " + nk + " not found in 'refs.tb'";

    Rfs = RfsOp!;
    rf = isHistoric ? Rfs[0] : Rfs[1];
    if (pvCl < rf & rf < cl) {
      InvOps.push(invOperation.new(0, nk));
    } else if (pvCl > rf & rf > cl) {
      StPrOp = Pf.get(nk);
      if (!!StPrOp) {
        stocks = StPrOp![0];
        InvOps.push(invOperation.new(stocks, nk));
      }
    }
  }

  /* For when keeping stocks that had to be sold.
  for (:invOperation old = invOperationsTb.read())
    if (
      old.stocks > 0 &
      Pf.hasKey(old.nick) &
      !!Pf[old.nick] &
      !InvOps.any(\:invOperation iO -> return iO.nick == old.nick;)
    )
      InvOps.push(old);
  */

  invOperationsTb.write(InvOps);
  return "";
};

/// Craate daily charts table.
/// Must be called after 'qspr.updateClosesAndRefs'.
/// \ -> ()
createDailyCharts = \ -> {
  :time now = time.now();
  today = now.toStr();
  h = now.hour();

  :cos cs = cosTb.read();
  SelNicks = arr.map(
    arr.filter(cs.Cos, \:co c -> return c.isSelected;),
    \:co c -> return c.nick;
  );

  :dic Closes = closesTb.read();
  :dic Refs = refsTb.read();

  BuyAnns = []; // [<ann>.]
  cashV = [0.0];
  Anns = diariesDb.investorAnns(today[:4]);
  :settlement set = ann.mkSettlement(Anns);
  :ldg l = set.ledger;
  :dic Pf = set.Portfolio;
  cashV! += l.cash;
  for (:ann a = Anns)
    if (a.date >= today & opr.type(a.op) == opr.buT)
      BuyAnns.push(a);

  Entries = []; // [<dailyChart>.]
  allCloseV = [0.0];
  allQuoteV = [0.0];
  for (nk = SelNicks) {
    Qs, ok = quotesDb.readQs(nk);
    if (!ok) {
      log.error(Qs);
      continue;
    }
    historicClose = arr.peek(qs.closes(Qs));

    CloseOp = Closes.get(nk);
    if (!CloseOp) {
      log.error("Close of " + nk + " not found");
      continue;
    }
    close = CloseOp![1];

    :investor inv = investorTb.read();
    :istrategy strg = inv.Nicks[nk];

    StPrOp = Pf.get(nk);
    StPr = !StPrOp ? [0, 0.0] : StPrOp!;
    stocks, price = StPr;
    new = stocks > 0 & BuyAnns.any(\:ann a -> return opr.nick(a.op) == nk;);

    allQuoteV! += math.itof(stocks) * close;
    if (new) allCloseV! += math.itof(stocks) * price;
    else allCloseV! += math.itof(stocks) * historicClose;

    RefOp = Refs.get(nk);
    if (!RefOp) log.error("References of " + nk + " not found");
    ref = !RefOp ? close : RefOp![1];
    invData = dailyInvestorData.new(
      strg.modelId,
      strg.Params,
      stocks,
      price,
      ref,
      new
    );
    Entries.push(dailyChart.new(nk, close, [h], [close], invData));
  }

  Entries.push(dailyChart.new(
    cts.meNick, cashV! + allCloseV!, [h], [cashV! + allQuoteV!],
    dailyInvestorData.mkEmpty()
  ));

  // Indexes nick
  for (nk = cts.IxNicks) {
    Qs = Closes[nk][1];
    Entries.push(dailyChart.new(
      nk, Qs[1], [h], [Qs[0]], dailyInvestorData.mkEmpty()
    ));
  }

  dailyChartsTb.write(Entries);
};

/// Update daily chart table.
/// \ -> ()
updateDailyCharts = \ -> {
  now = time.now();
  today = time.toStr(now);
  h = time.hour(now);

  :cos cs = cosTb.read();
  SelNicks = arr.map(
    arr.filter(cs.Cos, \:co c -> return c.isSelected;),
    \:co c -> return c.nick;
  );

  BuyAnns = []; // [<ann>.]
  cashV = [0.0];
  Anns = diariesDb.investorAnns(today[:4]);
  :settlement set = ann.mkSettlement(Anns);
  :ldg l = set.ledger;
  :dic Pf = set.Portfolio;
  cashV! += l.cash;
  for (:ann a = Anns)
    if (a.date >= today & opr.type(a.op) == opr.buT)
      BuyAnns.push(a);

  :dic Closes = closesTb.read();
  :dic Refs = refsTb.read();

  :arr Entries = dailyChartsTb.read(); // [<dailyChart>.]
  allCloseV = [0.0];
  allQuoteV = [0.0];
  for (nk = SelNicks) {
    eOp = Entries.find(\:dailyChart e -> return e.nick == nk;);
    if (!eOp) updateClosesAndRefs(nk, false);

    :arr Qs, ok = quotesDb.readQs(nk);
    if (!ok) {
      log.error(Qs);
      continue;
    }
    historicClose = arr.peek(qs.closes(Qs));

    CloseOp = Closes.get(nk);
    if (!CloseOp) {
      log.error("Close of " + nk + " not found");
      continue;
    }
    close = CloseOp![1];

    :investor inv = investorTb.read();
    :istrategy strg = inv.Nicks[nk];
    StPrOp = Pf.get(nk);
    StPr = !StPrOp ? [0, 0.0] : StPrOp!;
    stocks = StPr[0];
    price = StPr[1];
    new = stocks > 0 & BuyAnns.any(\:ann a -> return opr.nick(a.op) == nk;);

    allQuoteV! += math.itof(stocks) * close;
    if (new) allCloseV! += math.itof(stocks) * price;
    else allCloseV! += math.itof(stocks) * historicClose;

    RefOp = Refs.get(nk);
    if (!RefOp) log.error("References of " + nk + " not found");
    ref = !RefOp ? close : RefOp![1];
    invData = dailyInvestorData.new(
      strg.modelId,
      strg.Params,
      stocks,
      price,
      ref,
      new
    );
    if (!eOp) {
      Entries.push(dailyChart.new(nk, close, [h], [close], invData));
    } else {
      :dailyChart e = eOp!;
      arr.push(e.Hours, h);
      arr.push(e.Quotes, close);
      e.invData = invData;
    }
  }

  :dailyChart e = Entries.find(\:dailyChart e -> return e.nick == cts.meNick;)!;
  e.close = allCloseV! + cashV!;
  arr.push(e.Hours, h);
  arr.push(e.Quotes, allQuoteV! + cashV!);

  NoCosEntries = Entries.filter(
    \:dailyChart e -> return arr.any(cts.IxNicks, \nk -> return e.nick == nk;);
  );
  for (:dailyChart e = NoCosEntries) {
    ClOp = Closes.get(e.nick);
    if (!!ClOp) e.close = ClOp![1][1];
    :arr Qs = e.Quotes;
    Qs.push(!ClOp ? Qs.peek() : ClOp![1][0]);
    arr.push(e.Hours, h);
  }

  dailyChartsTb.write(Entries);
};

/// Update historic profits. Returns an array with errors.
/// \ -> [s.]
updateHistoricProfits = \ -> {
  today = time.toStr(time.now());
  year = today[:4];
  :dic Closes = closesTb.read();
  :dic Refs = refsTb.read();
  Errs = []; // [s.]

  :settlement set = ann.mkSettlement(diariesDb.investorAnns(year));
  :ldg L = set.ledger;
  Pf = set.Portfolio;
  PrSum = [0.0];
  AccSum = [0.0];
  RfSum = [0.0];
  for (nk, E = Pf) {
    stocks = E[0];
    AccSum! += math.itof(stocks) * E[1];
    ClOp = Closes.get(nk);
    if (!ClOp) Errs.push("Close of " + nk + " not found");
    else PrSum! += math.itof(stocks) * ClOp![1];

    RfOp = Refs.get(nk);
    if (!RfOp) {
      Errs.push("References of " + nk + " not found");
    } else {
      if (!!ClOp) {
        rfV = [RfOp![1]];
        if (rfV! > ClOp![1]) rfV! = ClOp![1];
        RfSum! += math.itof(stocks) * rfV!;
      }
    }
  }

  tbYear = profitsDb.investorYears()[0];
  if (year != tbYear)
    profitsDb.write(year, profitsEntry.new(today, 0.0, 0.0, 0.0));

  prff = \val -> return val + L.cash + L.equity;;

  :arr Entries = profitsDb.read(year);
  :profitsEntry e = Entries.pop();
  newE = profitsEntry.new(
    today, prff(PrSum!), prff(AccSum!), prff(RfSum!)
  );
  if (e.date != today) Entries.push(e);
  Entries.push(newE);
  profitsDb.write(year, Entries);

  return Errs;
};

/// Check servers against quote tables.
/// \s -> [<tableCheck>.]
checkTable = \nick -> {
  TbQs, ok = quotesDb.readQs(nick);
  if (!ok) {
    log.error(str.fmt("checkTables: Table %v.tb not found", [nick]));
    return [];
  }
  Checks = []; // [<tableCheck.>

  :arr Svs, :arr SvQQs, :arr Ws = readHistoric.byServer(nick);

  for (w = Ws) log.warning("checkTables: " + w);

  if (SvQQs.all(\Qs -> return !Qs;)) {
    log.error("checkTables: No values fund for " + nick + " in any server");
    return [];
  }

  for (i, :arr SvQs = SvQQs) {
    svId = Svs[i];
    for (:quote tbQ = TbQs[:10]) {
      // \s, f, f -> ()
      checksPush = \field, tbVal, svVal ->
        Checks.push(
          tableCheck.new(nick, tbQ.date, field, svId, tbVal, svVal, false
        ));;

      svQOp = SvQs.find(\:quote q -> return q.date == tbQ.date;);
      if (!!svQOp) {
        :quote svQ = svQOp!;
        if (svQ.open > 0.0 & tbQ.open != svQ.open)
          checksPush(tableCheck.o, tbQ.open, svQ.open);
        if (svQ.close > 0.0 & tbQ.close != svQ.close)
          checksPush(tableCheck.c, tbQ.close, svQ.close);
        if (svQ.max > 0.0 & tbQ.max != svQ.max)
          checksPush(tableCheck.x, tbQ.max, svQ.max);
        if (svQ.min > 0.0 & tbQ.min != svQ.min)
          checksPush(tableCheck.n, tbQ.min, svQ.min);
        if (svQ.vol > 0 & tbQ.vol != svQ.vol)
          checksPush(tableCheck.v, tbQ.vol, svQ.vol);
      }
    }
  }

  SvChecks = []; // [<tableCheck.>
  ChecksV = [Checks];
  while (arr.size(ChecksV!) > 1) {
    :arr Chs = ChecksV!;
    ch = Chs.pop();
    NewChs = []; // [<tableCheck.>
    Dups = [ch]; // [<tableCheck.>
    for (:tableCheck c = Chs) {
      if (c.eqQuote(ch)) Dups.push(c);
      else NewChs.push(c);
    }
    if (Dups.size() > 1) SvChecks.cat(Dups);
    ChecksV! = NewChs;
  }

  return SvChecks;
};

/// Update historic quotes with the last ones of day.
/// \ -> ()
updateFinalQuotes = \ -> {
  :arr SvIds, :arr QQs, Ws = readDaily.run();
  :arr Codes = SvIds.map(\id -> return svCodesTb.read(id);); // [{nick: code}.]

  for (w = Ws) log.warning("finalQuotes: " + w);

  if (QQs.all(\Qs -> return !Qs;))
    log.error("finalQuotes: No server was read");

  :cos cs = cosTb.read();
  for (:co c = cs.Cos) {
    nk = c.nick;

    // Read current qvalues
    Qvs = []; // <[f,f,f,f,f].>
    for (i, :arr Qs = QQs) {
      svId = SvIds[i];
      codeOp = dic.get(Codes[i], nk);
      if (!codeOp) {
        log.error("finalQuotes: Code of " + svId + " for " + nk + " is missing");
        continue;
      }
      code = codeOp!;

      qOp = Qs.find(\:dailyQ q -> return q.code == code;);
      if (!qOp) {
        log.error("finalQuotes: Quotes of " + nk + " not found in " + svId);
        Qvs.push([-1.0, -1.0, -1.0, -1.0, -1.0]);
        continue;
      }
      :dailyQ q = qOp!;
      Qvs.push([q.open, q.close, q.max, q.min, q.vol]);
    }

    Vs = []; // [f,f,f,f,f]
    for (i = 0:5) {
      Vs.push(
        Qvs[0][i] < 0.0
          ? Qvs[1][i] < 0.0
            ? Qvs[2][i]
            : Qvs[1][i]
        : Qvs[1][i] < 0.0 & Qvs[2][i] < 0.0 & Qvs[1][i] == Qvs[2][i]
          ? Qvs[1][i]
          : Qvs[0][i]
      );
    }

    // Correct current qvalues
    if (Vs.any(\v -> return v < 0.0;)) {
      log.error(nk + " finalQuotes: Bad values " + sys.toStr(Vs));
      continue;
    }
    if (Vs[2] < Vs[3]) {
      log.error(nk + " finalQuotes: Bad Mx-Mn " + sys.toStr(Vs));
      continue;
    }
    if (Vs[0] > Vs[2]) {
      log.warning(nk + " Corrected max " + math.ftos(Vs[2]));
      Vs[2] = Vs[0];
    }
    if (Vs[1] > Vs[2]) {
      log.warning(nk + " Corrected max " + math.ftos(Vs[2]));
      Vs[2] = Vs[1];
    }
    if (Vs[0] < Vs[3]) {
      log.warning(nk + " Corrected min " + math.ftos(Vs[3]));
      Vs[3] = Vs[0];
    }
    if (Vs[1] < Vs[3]) {
      log.warning(nk + " Corrected min " + math.ftos(Vs[3]));
      Vs[3] = Vs[1];
    }

    // get last qvalues
    now = time.toStr(time.now());
    :arr Qs, ok = quotesDb.readQs(nk);
    if (!ok) {
      log.error(nk + " finalQuotes: " + Qs);
      continue;
    }
    :quote lq = Qs[0];
    if (lq.date >= now) {
      log.warning(
        nk + " finalQuotes: " + nk + ".tb already updated in " + lq.date
      );
      continue;
    }

    // Test increments.
    if (math.abs((Vs[0] - lq.open) / lq.open) > 0.2)
      log.warning(str.fmt(
        "%v finalQuotes: open |incr| > 20%% (%v -> %v)",
        [nk, lq.open, Vs[0]]
      ));
    if (math.abs((Vs[1] - lq.close) / lq.close) > 0.2)
      log.warning(str.fmt(
        "%v finalQuotes: close |incr| > 20%% (%v -> %v)",
        [nk, lq.close, Vs[1]]
      ));
    if (math.abs((Vs[2] - lq.max) / lq.max) > 0.2)
      log.warning(str.fmt(
        "%v finalQuotes: max |incr| > 20%% (%v -> %v)",
        [nk, lq.max, Vs[2]]
      ));
    if (math.abs((Vs[3] - lq.min) / lq.min) > 0.2)
      log.warning(str.fmt(
        "%v finalQuotes: min |incr| > 20%% (%v -> %v)",
        [nk, lq.min, Vs[3]]
      ));

    // Write current qvalues.
    Qs.unshift(quote.new(
      now, Vs[0], Vs[1], Vs[2], Vs[3], math.ftoi(Vs[4]), false)
    );

    quotesDb.write(nk, qs.toStr(Qs[:-1]));
  }
};
