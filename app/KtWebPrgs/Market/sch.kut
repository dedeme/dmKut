// Copyright 07-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Server starter and scheduler.
///
/// SERVER START:
///   - Test if Market is already running.
///     If it is so, the program ends with console and log messages.
///   - Test if year is changed.
///     If it is so, tables diariesDb and profitsDb are updated calling
///     'closeAccountingYear'.
///   - Run the scheduler.
///
/// SERVER SCHEDULER:


import "libdm/log";
import "data/co/cos";
import "data/co/co";
import "data/qsprRs";
import "data/ibex";
import "data/acc/anns";
import "data/acc/ann";
import "data/acc/settlement";
import "data/acc/opr";
import "data/acc/ldg";
import "data/chart/profitsEntry";
import "data/calendar/calendar";
import "data/activity";
import "data/initRef";
import "db/cosTb";
import "db/svCodesTb";
import "db/ibexTb";
import "db/investorTb";
import "db/trading/closesTb";
import "db/trading/refsTb";
import "db/daily/cosSelTb";
import "db/acc/diariesDb";
import "db/acc/profitsDb";
import "db/calendarTb";
import "db/activityTb";
import "db/initRefsTb";
import "net/readIxs";
import "qspr";
import "cts";
import "fns";


// If it fails, returns "". The found PID must be different to pid.
//: \s -> s
getPid = \pid -> {
  r, ok = sys.cmd("ps", ["-x"]);
  if (!ok) return "";

  cmd = "kut /dm/dmKut/app/KtWebPrgs/market/main start";
  for (prg = str.splitTrim(r, "\n")) {
    if (str.index(prg, cmd) != -1) {
      ix = str.index(prg, " ");
      if (ix != -1) {
        p = prg[:ix];
        if (p != pid) return p;
      }
    }
  }
  return "";
};

/// Returns <qsprRs<qs>>.
/// \s -> <qsprRs>
ibexHistoricUpdate = \mainNick -> {
  :cos cs = cosTb.read();

  :qsprRs rs = qspr.updateIbexHistoric(cs.mainNick); // Update ibexTb.Qs.
  if (rs.withError) return rs;

  R, ok = readIxs.ibexCos();
  if (!ok) {
    log.error("Reading Ibex components: " + R);
    rs.withError = true;
    return rs;
  }

  sv, Cs, Ws : R;
  if (!!Ws) {
    for (w = Ws) log.warning("Reading Ibex components: " + w);
    rs.withWarnings = true;
  }

  :dic SvCodes = svCodesTb.read(sv); // {s.}
  Nicks = []; // [s.]
  for (code = Cs){
    NkOp = [];
    for (nk, cd = SvCodes) {
      if (cd == code) {
        NkOp.push(nk);
        break;
      }
    }
    if (!NkOp) {
      log.error(
        "Reading Ibex components: Unknown company code " + code +
        ". Add in 'Market/ibex.tb'?"
      );
      rs.withError = true;
      return rs;
    }

    arr.push(Nicks, NkOp!);
  }

  :ibex ibexT = ibexTb.read();
  ibexTb.write(ibex.new(Nicks, ibexT.Qs));

  for (nk = Nicks) {
    cOp = arr.find(cs.Cos, \:co c -> return c.nick == nk;);
    if (!cOp) {
      log.error(
        "Reading Ibex components: " + nk +
        " in server not found in companies data base. " +
        " Remove in 'Market/ibex.tb'?"
      );
      rs.withError = true;
      return rs;
    }
    :co c = cOp!;
    if (!c.isSelected & !arr.any(cts.ibexExcluded, \e -> return e == nk;)) {
      log.warning("Reading Ibex components: Ibex company " + nk + " not selected");
      rs.withWarnings = true;
    }
  }

  for (:co c = cs.Cos) {
    if (c.isSelected & !arr.any(Nicks, \n -> return n == c.nick;)) {
      log.warning(
        "Reading Ibex components: Selectd company " + c.nick +
        " not in Ibex"
      );
      rs.withWarnings = true;
    }
  }

  return rs;
};

/// \ -> ()
historicUpdate = \ -> {
  log.warning("Historic update");

  :cos cs = cosTb.read();
  :arr SelCos = arr.filter(cs.Cos, \:co c -> return c.isSelected;);

  // Update historic.
  :qsprRs r = qspr.updateHistoric(
    "Updating historic of main company " + cs.mainNick, cs.mainNick, cs.mainNick
  );
  if (r.withError)
    log.error("Fail reading main company " + cs.mainNick);
  else
    for (:co c = cs.Cos)
      qspr.updateHistoric(
        "Updating historic of " + c.nick, cs.mainNick, c.nick)
      ;

  // Update ibex (Must be called after 'qspr.updateHistoric')
  ibexHistoricUpdate(cs.mainNick);

  // Update investors.
  investorTb.update();

  // Clean Closes
  :dic Closes = closesTb.read();
  for (nk = Closes.keys())
    if (
      !SelCos.any(\:co c -> return c.nick == nk;) &
      !arr.any(cts.IxNicks, \i -> return i == nk;)
    ) Closes.remove(nk);
  closesTb.write(Closes);

  // Clean Refs
  :dic Refs = refsTb.read();
  for (nk = Refs.keys())
    if (!SelCos.any(\:co c -> return c.nick == nk;)) Refs.remove(nk);
  refsTb.write(Refs);

  // Clean daily charts selected companies
  cosSelTb.write(arr.filter(
    cosSelTb.read(),
    \nk -> return SelCos.any(\:co c -> return c.nick == nk;);
  ));

  // Update Closes and Refs (including initRefs)
  for (:co c = SelCos) {
    err = qspr.updateClosesAndRefs(c.nick, fns.isSelected(c.nick));
    if (err != "") log.error(err);
  }
  // Update indexes
  for (nk = cts.IxNicks) {
    err = qspr.updateClosesAndRefs(nk, false);
    if (err != "") log.error(err);
  }

  // Clean initRefs
  :arr InitRefs = initRefsTb.read();
  InitRefs.filterIn(\:initRef ir -> return fns.isSelected(ir.nick););
  initRefsTb.write(InitRefs);

  // Update operations.
  qspr.updateOperations();
};

//: \ -> ()
dailyUpdate = \ -> {
  err = qspr.updateDailyCloses();
  if (err != "") log.error(err);

  qspr.updateDailyCharts();

  Errs = qspr.updateHistoricProfits();
  for (e = Errs) log.error(e);
};

/// \ -> ()
dailyActivate = \ -> { // Include dailyUpdate
  log.warning("Daily activate");

  investorTb.update();
  :cos cs = cosTb.read();
  // Update Closes and Refs
  SelCos = arr.filter(cs.Cos, \:co c -> return c.isSelected;);
  for (:co c = SelCos) {
    err = qspr.updateClosesAndRefs(c.nick, false);
    if (err != "") log.error(err);
  }
  qspr.createDailyCharts();
  dailyUpdate();
};

//: \ -> ()
dailyDeactivate = \ -> {
  log.warning("Daily deactivate");

  investorTb.update();
  qspr.updateOperations();
};

/// Update historic quotes with the last ones of day.
/// \ -> ()
finalQuotesUpdate = \ -> {
  log.warning("Quotes update");
  qspr.updateFinalQuotes();
};

// Update diariesDb and profitsDb.
//: \ -> ()
closeAccountingYear = \ -> {
  currentYear = math.itos(time.year(time.now()));
  dataYear = diariesDb.investorYears()[0];
  if (dataYear != currentYear) {
    Anns = diariesDb.investorAnns(dataYear);
    :settlement set = ann.mkSettlement(Anns);
    if (!!set.Errors) {
      for (e = set.Errors) log.error(e);
      log.error("Can not change accounting year");
      return;
    }
    :ldg l = set.ledger;

    date = currentYear + "0101";
    :anns newTable = anns.new();
    newTable.add(ann.new(
      -1, date, opr.newIn(l.cash)
    ));
    for (nick, StPr = set.Portfolio)
      newTable.add(ann.new(
        -1, date, opr.newSt(nick, StPr[0], StPr[1])
      ));
    diariesDb.write(currentYear, newTable);
  }

  dataYear2 = profitsDb.investorYears()[0];
  if (dataYear2 != currentYear) {
    :profitsEntry e = arr.peek(profitsDb.read(dataYear2));
    profitsDb.write(
      currentYear,
      [profitsEntry.new(currentYear + "0101", e.total, e.acc, e.risk)]
    );
  }
};

/// Starts server.
/// \ -> ()
start = \ -> {
  pid1 = getPid("*");
  pid = getPid(pid1);
  if (pid != "") {
    log.warning("Attempt to start Server when running.");
    sys.println("Server is already running");
    return;
  }

  closeAccountingYear();

  while () {
    :calendar cal = calendarTb.read();
    now = time.now();
    tmSleep = cal.isTimeToWatch(now)
      ? cts.schedulerWatchingTime
      : cts.schedulerSleepTime
    ;

    :activity act = activityTb.read();

    if (
      ( time.toStr(act.tm) != time.toStr(now) |
        time.hour(act.tm) <= cts.actHistoricStart
      ) & time.hour(now) > cts.actHistoricStart
    ) {
      historicUpdate();
      activityTb.write(activity.newNow(cts.sleeping));
      continue;
    }

    if (cal.isMarketDay(now)) {
      if (act.activity == cts.sleeping) {                            // OPEN
        if (cal.isOpen(now)) {
          dailyActivate();
          activityTb.write(activity.newNow(cts.active));
        } else if (time.hour(act.tm) <= 12 & time.hour(now) > 12) { // RE-UP
          dailyActivate();
          dailyDeactivate();
          if (time.hour(now) > cts.actFinalQuotes) finalQuotesUpdate();
          activityTb.write(activity.newNow(cts.sleeping));
        } else if (
          time.hour(act.tm) <= cts.actFinalQuotes &
          time.hour(now) > cts.actFinalQuotes
        ) {                                                     // FINAL QUOTES
          finalQuotesUpdate();
          activityTb.write(activity.newNow(cts.sleeping));
        }
      } else {
        dailyUpdate();
        if (!cal.isOpen(now)) {
          dailyDeactivate();
          activityTb.write(activity.newNow(cts.sleeping));
        }
      }
    }

    sys.sleep(tmSleep);
  }
};
