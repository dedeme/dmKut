// Copyright 30-Apr-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Paths page.

import "KtWeb/rp";
import "db";
import "data/conf";
import "data/dpath";
import "db/confTb";
import "db/pathsTb";

/// \{*.} -> s
process = \Rq -> {
  switch (Rq.rq) {
    "changeShowAll": {
      dbKey = db.checkKey(Rq.dbKey);
      if (dbKey == "") return rp.mkOutdated();

      :conf cf = confTb.read();
      confTb.write(conf.new(cf.ppath, !cf.showAll));

      return rp.mk({ dbKey });
    }
    "new": {
      dbKey = db.checkKey(Rq.dbKey);
      if (dbKey == "") return rp.mkOutdated();

      // s, s
      id, pth : Rq;
      :arr Ps = pathsTb.read();
      Ps.push(dpath.new(id, pth, true, false));
      pathsTb.write(Ps);

      return rp.mk({ dbKey });
    }
    "changeShown": {
      dbKey = db.checkKey(Rq.dbKey);
      if (dbKey == "") return rp.mkOutdated();

      Ps = pathsTb.read();
      for (:dpath p = Ps) if (p.id == Rq.id) p.isShown = !p.isShown;
      pathsTb.write(Ps);

      return rp.mk({ dbKey });
    }
    "delete": {
      dbKey = db.checkKey(Rq.dbKey);
      if (dbKey == "") return rp.mkOutdated();

      :arr Ps = pathsTb.read();
      Ps.filterIn(\:dpath p -> return p.id != Rq.id;);
      pathsTb.write(Ps);

      return rp.mk({ dbKey });
    }
    "modify": {
      dbKey = db.checkKey(Rq.dbKey);
      if (dbKey == "") return rp.mkOutdated();

      // s, s, s
      id, newId, pth : Rq;
      :arr Ps = pathsTb.read();
      for (:dpath p = Ps) if (p.id == id) {
        p.id = newId;
        p.spath = pth;
      }
      pathsTb.write(Ps);

      return rp.mk({ dbKey });
    }
    default: sys.throw("Value of rq (" + Rq.rq + ") is not valid");
  }
};
