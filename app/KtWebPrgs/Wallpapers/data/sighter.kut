// Copyright 01-May-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Sighter interface.
/// Implemented by 'song' and 'pict'

/// Constructor.
///   level : Sights for cycle.
///   sights: Sights number of the current cycle.
///   id    : Identifier.
/// \i,i,s -> <sighter>
new : level, sights, id;

/// Set 's' sights.
/// \<sighter>, i -> ()
setSights = \s, newSights -> {
  s[sights] = newSights > s[level] ? s[level] : newSights;
};

/// Returns the next sighter (group and sigther).
///   getGroups: Function that returns sighter group identifiers list.
///   read     : Function thar from group identifier returns a sighter list.
///   write    : Function thar write sighter list of a group identifier.
/// \(\->[s.]), (\s -> [<sighter>.]), (\s, [<sighter>.]->()) ->
///-   {group:s, s:<sighter>}
next = \getGroups, read, write ->
  return next2(true, getGroups, read, write);;

//  Returns the next sighter (group and sigther).
//    isFirst  : 'true' if it is the first call to function.
//    getGroups: Function that returns sighter group list.
//    read     : Function that from group identifier returns a sighter list.
//    write    : Function that write sighter list of a group identifier.
//:  \b, (\->[s.]), (\s -> [<sighter>.]), (\s, [<sighter>.]->()) ->
//:-   {group:s, s:<sighter>}
next2 = \isFirst, getGroups, read, write -> {
  GSs = []; // [[s, s]]
  for (g = getGroups()) for (:sighter s = read(g))
    for (i = 0:s[level] - s[sights]) arr.push(GSs, [g, s[id]]);

  if (!GSs) {
    if (isFirst) {
      for (g = getGroups())
        write(
          g,
          arr.map(
            read(g),
            \:sighter s -> {
              setSights(s, 0);
              return s;
            }
          )
        );
      return next2(false, getGroups, read, write);
    }
    sys.throw("No available picture");
  }

  GS = GSs[math.rndi(GSs.size())];

  group = GS[0];
  :arr Ss = read(group);

  idf = GS[1];
  sOp = Ss.find(\:sighter s -> return s[id] == idf;);

  if (!sOp) sys.throw("No availabe picture");
  :sighter s = sOp!;

  setSights(s, s[sights] + 1);
  write(group, Ss);

  return {group, s};
};
