// Copyright 28-Sep-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Songs data base.

import "data/cts";
import "data/danceSong";
import "data/sighter";

dirV = [""];

// \s -> s
fpath = \group -> return path.cat([dirV!, "dance_" + group + ".db"]);;

/// Initialize data base
init = \parentDir -> dirV! = parentDir;;

///Returns groups list
/// \ -> [s.]
getGroups = \ -> {
  Groups = arr.filter(
    file.dir(cts.danceSongsPath),
    \f -> return file.isDirectory(path.cat([cts.danceSongsPath, f]));
  );
  if (!Groups) sys.throw("Song groups not found");
  return Groups;
};

/// \s -> ()
update = \group -> {
	p = fpath(group);
	if (!file.exists(p)) write(group, []);

  OldSongs = arr.map(js.r(file.read(p)), danceSong.fromJs);
  NewSongs = []; // [<danceSong>.]
  saveV = [false];
  for (songId = readSongsList(group)) {
    songOp = arr.find(OldSongs, \S -> return S.id == songId;);
    if (!songOp) {
      arr.push(NewSongs, danceSong.mk(songId));
      saveV! = true;
    } else {
      arr.push(NewSongs, songOp!);
    }
  }
  if (saveV! | arr.size(NewSongs) != arr.size(OldSongs))
    write(group, NewSongs);
};

/// \s -> [s.]
readSongsList = \group -> {
  Songs = arr.filter(
    file.dir(path.cat([cts.danceSongsPath, group])),
    \f -> return str.ends(f, ".mp3");
  );
  if (!Songs) sys.throw("No song found in group " + path.cat([cts.danceSongsPath, group]));
  return Songs;
};

/// Returns songs ([<danceSong>.]) of a group serialized with JSON.
/// \s -> s
readJs = \group -> return file.read(fpath(group));;

/// Returns group song.
/// \s -> [<danceSong.>]
read = \group -> return arr.map(js.r(readJs(group)), danceSong.fromJs);;

/// Write song.
/// \s, [<danceSong>.] -> ()
write = \group, Songs ->
  file.write(fpath(group), js.w(arr.map(Songs, danceSong.toJs)));;

/// Set level of song 'group'-'id'.
/// \s, s, i -> ()
setLevel = \group, id, level -> {
  Songs = read(group);
  for (S = Songs) if (S.id == id) S.level = level;
  write(group, Songs);
};

/// Set speed of song 'group'-'id'.
/// \s, s, i -> ()
setSpeed = \group, id, speed -> {
  Songs = read(group);
  for (S = Songs) if (S.id == id) S.speed = speed;
  write(group, Songs);
};

/// Increments reproductions counter. (When it reachs 100, it is set to 0).
/// \s, s, b -> ()
incrementPlays = \group, id, isShort -> {
  Songs = read(group);
  for (S = Songs) if (S.id == id) {
    if (isShort) {
      S.shortPlays += 1;
      if (S.shortPlays == 100) S.shortPlays = 0;
    } else {
      S.longPlays += 1;
      if (S.longPlays == 100) S.longPlays = 0;
    }
  }
  if (arr.all(Songs, \S -> return isShort ? S.shortPlays > 0 : S.longPlays > 0;))
    for (S = Songs) {
      if (isShort) S.shortPlays = 0;
      else S.longPlays = 0;
    }
  write(group, Songs);
};
