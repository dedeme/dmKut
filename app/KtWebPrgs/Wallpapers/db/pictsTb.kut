// Copyright 01-May-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Pictures data base.

import "cts";
import "data/pict";
import "data/sighter";

//: \s -> s
fpath = \group -> return file.cat([cts.dataPath, "picts" + group + ".db"]);;

/// Groups are ['0', '1', ..., 'cts.pictureGroups'-1]
/// \ -> [s.]
getGroups = \ -> return arr.fromIter(
    iter.map([0:cts.pictureGroups], \i -> return math.itos(i);)
  );;

/// Update picture data list.
///    group: Group to update.
/// \s -> ()
update = \group -> {
  p = fpath(group);
  if (!file.exists(p)) write(group, []);

  :arr OldPictures = arr.map(js.r(file.read(p)), pict.fromJs);
  NewPictures = []; // [<pict>.]
  saveV = [false];
  for (pictureId = readPictList(group)) {
    pictOp = OldPictures.find(\:pict p -> return p.id == pictureId;);
    if (!pictOp) {
      NewPictures.push(pict.newDefault(pictureId));
      saveV! = true;
    } else {
      NewPictures.push(pictOp!);
    }
  }
  if (saveV! | NewPictures.size() != OldPictures.size())
    write(group, NewPictures);
};

/// Read pictures identifiers from file path pool.
/// \s -> [s.]
readPictList = \group ->
  return arr.filter(
    file.dir(file.cat([cts.pictsPath, group])),
    \name -> return str.ends(name, ".jpg");
  );;

/// Returns pictures ([<pict>.]) of a group serialized with JSON.
/// \s -> s
readJs = \group -> return file.read(fpath(group));;

/// Returns group pictures.
/// \s -> [<pict>.]
read = \group -> return arr.map(js.r(readJs(group)), pict.fromJs);;

/// Write picture.
/// \s, [<pict>.] -> ()
write = \group, Pictures ->
  file.write(fpath(group), js.w(Pictures));;

/// Set level of picture 'group'-'id'.
/// \s, s, i -> ()
setLevel = \group, id, level -> {
  Pictures = read(group);
  for (:pict p = Pictures) if (p.id == id) p.setLevel(level);
  write(group, Pictures);
};

/// Returns the next picture
/// \ -> {group:s, picture:<pict>}
next = \ -> {
  GroupS = sighter.next(
    getGroups,
    \group -> return read(group);,
    \group, Sighters -> write(group, Sighters);
  );
  return {group: GroupS.group, picture: GroupS.s};
};

/// Returns total sights and shown sights.
/// \ -> {totalSights:i, shownSights:i}
shownSights = \ -> {
  :: R = {totalSights: 0, shownSights: 0};
  for (g = getGroups()) for (:pict p = read(g)) {
    R.totalSights += p.level;
    R.shownSights += p.sights;
  }
  return R;
};

