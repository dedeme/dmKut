// Copyright 01-May-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Image data.

import "imgCut";
import "imgAdj";
import "imgBlur";

/// Constructor.
///   id    : Image identifier.
///   cutOp : Image 'cut' modification data.
///   adjOp : Image 'adjustment' modification data.
///   blurOp: Image 'blur' modification data.
/// \s,([<imgCut>]|[]),([<imgAdj>]|[]),([<imgBlur>]|[]) -> <image>
new : id, cutOp, adjOp, blurOp;

/// Default constructor: A image without modications.
/// \s -> <image>
newDefault = \id -> return new(id, [], [], []);;

/// \[*.] -> <image>
fromJs = \A -> {
  return new(
    A[id],
    !A[cutOp] ? [] : [imgCut.fromJs(A[cutOp]!)],
    !A[adjOp] ? [] : [imgAdj.fromJs(A[adjOp]!)],
    !A[blurOp] ? [] : [imgBlur.fromJs(A[blurOp]!)]
  );
};

/// Updates image data list from image source list in a new image data list.
///   Data  : Old image list. If some of them is not en 'Source', it will be
///           deleted.
///   Source: Current images identifiers. If some of then is not in 'Data', it
///           will be created.
/// \[<image>.], [s.] -> [<image>.]
update = \:arr Data, :arr Source -> {
  :arr R = Data.filter(
    \:image i -> return Source.any(\idf -> return idf == i[id];);
  );
  :arr News = Source.filter(
    \idf -> return !Data.any(\:image i -> return idf == i[id];);
  );
  for (idf = News) R.push(newDefault(idf));

  return R;
};
