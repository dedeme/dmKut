// Copyright 01-May-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Data base management.

import "cts";
import "db/confTb";
import "db/imagesTb";

// EXTERN DATA BASES

/// Source directory.
/// s
source = cts.sourcePath;

/// Target directory.
/// s
target = cts.targetPath;

/// Save orignal and adjusted pictures, clearing source an target directories.
/// \s -> ()
savePictures = \group -> {
  for (f = file.dir(source)) {
    pt = file.cat([source, f]);
    file.copy(pt, cts.originalAchivePath);
    file.del(pt);
  }
  for (f = file.dir(target)) {
    pt = file.cat([target, f]);
    file.copy(pt, file.cat([cts.adjustedArchivePath, group]));
    file.del(pt);
  }
};

/// Returns an array with duplicates of 'list' in archived ".jpg's"
///   list: List of .jpg images names.
/// \[s.] -> [s.]
duplicates = \:arr List -> {
  R = [];
  for (i = 0:10) {
    for (p = file.dir(file.cat([cts.adjustedArchivePath, math.itos(i)])))
      if (List.index(\im -> return im == p;) != -1)
        R.push(math.itos(i) + "/" + p);
  }
  return R;
};

/// Returns the group with less pictures (sights)
/// \-> s
lessPicturesGroup = \-> {
  gV = ["0"];
  nV = [2000000];
  for (i = 0:10) {
    n = arr.reduce(
      js.ra(file.read(
        file.cat([cts.wallpapersDataPath, "picts" + math.itos(i) + ".db"])
      )),
      0,
      \r, jsField -> return r + js.ri(js.ra(jsField)[0]);
    );

    if (n < nV!) {
      nV! = n;
      gV! = math.itos(i);
    }
  }
  return gV!;
};

// PROGRAM DATA BASE

klen = 20;
dbStateKeyTb = file.cat([cts.dataPath, "dbStateKey.tb"]);

/// Path for images cut.
/// \-> s
cutPath = \-> return file.cat([cts.dataPath, "cuts"]);;

/// Path for images adjusted.
/// \-> s
adjustmentPath = \-> return file.cat([cts.dataPath, "adjustments"]);;

/// Initializes data base
/// \ -> ()
init = \ -> {
  if (!file.exists(cts.dataPath)) {
    file.mkdir(cts.dataPath);
    file.write(file.cat([cts.dataPath, "version.tb"]), cts.dataVersion);
    file.write(dbStateKeyTb, cryp.genK(klen));

    file.mkdir(cutPath());
    file.mkdir(adjustmentPath());
    confTb.init();
    imagesTb.init();
    return;
  }
  sys.throw("Data base already is initialized");
};

/// Returns the state identifier.
/// \ -> ()
readKey = \ -> return str.trim(file.read(dbStateKeyTb));;

/// Checks the state identifier 'key' and returns:
///   - If 'key' is valid, a new identifier.
///   - If 'key' is not valid, an empty string.
/// \s -> s
checkKey = \key -> {
  if (str.trim(file.read(dbStateKeyTb)) == key) {
    newKey = cryp.genK(klen);
    file.write(dbStateKeyTb, newKey);
    return newKey;
  }
  return "";
};

/// Clears cut and adjustement paths.
/// \-> ()
clearIntermediatePaths = \-> {
  file.del(cutPath());
  file.mkdir(cutPath());
  file.del(adjustmentPath());
  file.mkdir(adjustmentPath());
};

