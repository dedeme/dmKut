// Copyright 23-Dic-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Tr widget page.

import "KtWeb/rp";
import "libdm/img";
import "libdm/jstb";
import "data/cts";
import "data/image";
import "db";
import "art";

/// \m -> ()
process = \Rq -> {
  switch (Rq.rq) {
    "idata": {
      im = image.fromJs(Rq.image);
      ok = file.exists(path.cat([cts.sourcePath, im.id]));
      try {
        processImg(im);
      } catch (e) {
        sys.sleep(100);
        try {
          processImg(im);
        } catch (e) {
          sys.sleep(100);
          processImg(im);
        }
      }
      sys.print(rp.mkJs({
        ok: js.wb(ok)
      }));
    }
    "update": {
      db.imagesTb()[jstb.writeJs](js.w(Rq.images));
      sys.print(rp.mkEmpty());
    }
    default: sys.throw("Value of rq (" + Rq.rq + ") is not valid");
  }
};

/// \<image> -> ()
processImg = \im -> {
  ix = str.lastIndex(im.id, ".");
  newId = ix == -1 ? im.id + ".jpg" : im.id[:ix] + ".jpg";
  sourceImg = path.cat([cts.sourcePath, im.id]);
  cutImg = path.cat([db.cutPath(), newId]);
  adjustImg = path.cat([db.adjustmentPath(), newId]);
  targetImg = path.cat([cts.targetPath, newId]);

  if (!im.cut)
    img.copy(sourceImg, cutImg);
  else {
    WH = img.dim(sourceImg);
    c = im.cut!;
    img.crop(
      sourceImg, cutImg,
      c.left, c.top,
      WH[0] - c.left - c.right,
      WH[1] - c.top - c.bottom
    );
  }

  art.SourceDir! = db.cutPath();
  art.TargetDir! = db.adjustmentPath();
  if (!im.adjustment) {
    art.defaultConversion(newId);
  } else {
    a = im.adjustment!;
    switch (a.type) {
      "cut": {
          WH = img.dim(cutImg);
          if (WH[0] < WH[1]) {

            art.cutFromTop(newId, a.Params[0]);
          } else {
            art.cutFromLeft(newId, a.Params[0]);
          }
        }
      "background": art.goteleTune(
          newId,
          "#" + ("00000" + math.itoh(a.Params[0]))[-6:],
          math.itof(a.Params[1]) / 100.0,
          math.itof(a.Params[2]) / 100.0
        );
      "stretch": {
        WH = img.dim(cutImg);
        if (WH[1] < math.ftoi(math.itof(WH[0]) * 0.8))
          img.copy(cutImg, adjustImg);
        else
          art.stretchTune(newId, a.Params[0]);
      }
    }
  }

  if (!im.blur) {
    img.copy(adjustImg, targetImg);
  } else {
    art.SourceDir! = db.adjustmentPath();
    art.TargetDir! = cts.targetPath;
    art.blur(newId, math.itof(im.blur!.ratio) / 100.0);
  }

};
