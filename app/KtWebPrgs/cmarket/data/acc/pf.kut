// Copyright 11-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Portfolio operations.
/// A porfolio is a dictionary {nick -> [stocks-price]}.

/// Adds a new entry in place.
/// If there are more stocks, new stocks are added and average price (wihout
/// rounding) is calculated.
///   portfolio: Stocks portfolio.
///   nick     : Company nick.
///   stocks   : Stocks to add.
///   price    : Price of each stock.
/// \{[i, f]...}, s, i, f -> ()
add = \portfolio, nick, stocks, price -> {
  Old = dic.get(portfolio, nick);
  if (Old) {
    E = Old!;
    ss = E[0] + stocks;
    pr = (math.itof(E[0]) * E[1] + math.itof(stocks) * price) / math.itof(ss);
    dic.put(portfolio, nick, [ss, pr]);
    return;
  }

  dic.put(portfolio, nick, [stocks, price]);
};

/// Removes stocks of a company and return a tuple [price-error].
/// Price (without rounding) if there are stocks, otherwise returns 0.0.
/// Error is "" if there are stocks enough to make the operation. Otherwise
/// returns a message.
///   portfolio: Stocks portfolio.
///   nick     : Company nick.
///   stocks   : Stocks to add.
/// \{[i, f]...}, s, i -> [f, s]
remove = \portfolio, nick, stocks -> {
  Old = dic.get(portfolio, nick);
  if (!Old) return [0.0, nick + " has not stocks", false];
  E = Old!;
  if (E[0] < stocks) {
    dic.remove(portfolio, nick);
    return [
        E[1],
        str.fmt(
          "[%s] Try to remove %v stocks with only there are %v",
          [nick, stocks, E[0]]
        )
      ];
  }

  if (E[0] > stocks) E[0] -= stocks;
  else dic.remove(portfolio, nick);

  return [E[1], ""];
};

/// Returns a new dictionary, replacing 'ints' por 'floats' in portfolio.
/// \{[i, f]...} -> {[f, f]...}
toJs = \Pf -> {
  R = {};
  for (k, V = Pf) dic.put(R, k, [math.itof(V[0]), V[1]]);
  return R;
};
