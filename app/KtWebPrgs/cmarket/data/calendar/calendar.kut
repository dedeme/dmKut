// Copyright 12-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Calendar data.

import "timetable";
import "marketDay";
import "data/cts";

/// Constructor.
///   general     : Default timetable of a market day.
///   Holidays    : Holiday dates.
///   SpecialDays : Days with special timetable.
/// \<timetable>, [s...], [<marketDay>...] -> <calendar>
new : general, Holidays, SpecialDays;

/// Constructor from other <calendar> modifiyng a field.
///   C      : Previous calendar.
///   general: Default timetable of a market day.
/// \<calendar>, <timetable> -> <calendar>
mkGeneral = \C, general -> return new(general, C[Holidays], C[SpecialDays]);;

/// Constructor from other <calendar> modifiyng a field.
///   C       : Previous calendar.
///   Holidays: Holiday dates.
/// \<calendar>, [s...] -> <calendar>
mkHolidays = \C, Holidays -> return new(C[general], Holidays, C[SpecialDays]);;


/// Constructor from other <calendar> modifiyng a field.
///   C          : Previous calendar.
///   SpecialDays: Days with special timetable.
/// \<calendar>, [<marketDay>...] -> <calendar>
mkSpecialDays = \C, SpecialDays ->
  return new(C[general], C[Holidays], SpecialDays);;

/// \<calendar> -> [JS...]
toJs = \C -> return [
    timetable.toJs(C[general]),
    C[Holidays],
    arr.map(C[SpecialDays], marketDay.toJs)
  ];;

/// \[JS...] -> <calendar>
fromJs = \A -> return new(
    timetable.fromJs(A[0]),
    A[1],
    arr.map(A[2], marketDay.fromJs)
  );;

/// Returns true if date is a market day.
///
/// For example: calendar.isMarkeDay(cal, time.Now())
///   calendar: Calendar.
///   tm      : Date to test.
/// \<calendar>, i -> b
isMarketDay = \C, tm -> {
  wd = time.weekday(tm);
  d = time.toStr(tm);
  return wd > 0 & wd < 6 & !arr.any(C[Holidays], \h -> return h == d;);
};

/// Returns true if is time to Watch market.
///
/// For example: calendar.isTimetoWatch(cal, time.Now())
///   calendar: Calendar.
///   tm      : Time to test.
/// \<calendar>, i -> b
isTimeToWatch = \C, tm -> {
  tm = tm - cts.serverDelay * 1000;
  d = time.toStr(tm);
  if (isMarketDay(C, tm)) {
    specialDayOp = arr.find(
      C[SpecialDays], \:marketDay D -> return D.date == d;
    );
    o = !specialDayOp
      ? C[general][timetable.hopen] - 1
      : specialDayOp![marketDay.hopen] - 1
    ;
    c = !specialDayOp
      ? C[general][timetable.hclose] + 1
      : specialDayOp![marketDay.hclose] + 1
    ;

    h = time.hour(tm);
    return h >= o & h <= c;
  }
  return false;
};

/// Returns 'true' if market is open.
//
/// For example: calendar.IsOpen(cal, time.Now())
///   calendar: Calendar.
///   tm      : Time to test.
/// \<calendar>, i -> b
isOpen =  \C, tm -> {
  tm = tm - cts.serverDelay * 1000;
  d = time.toStr(tm);
  if (isMarketDay(C, tm)) {
    h = time.hour(tm);
    m = time.minute(tm);
    // \<timetable> -> bool
    inLimits = \:timetable tt -> return
      (h > tt.hopen | (h == tt.hopen & m >= tt.mopen)) &
			(h < tt.hclose | (h == tt.hclose & m <= tt.mclose))
    ;;

    specialDayOp = arr.find(
      C[SpecialDays], \:marketDay D -> return D.date == d;
    );
    return !specialDayOp
      ? inLimits(C[general])
      : inLimits(marketDay.toTimetable(specialDayOp!))
    ;
  }
  return false;
};
