// Copyright 21-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Quotes server data INFOB ("Infobolsa").

import "data/qs/qsv";
import "libmkt/qs";

// DIARY -----------------------------------------------------------------------

// \s -> [[[s, f]...], [s...]]
readDiary = \html -> {
  // [[s, f]...]
  Values = [];
  // [s...]
  Errs = [];
  Ix = [0];
  Ix2 = [0];

  // \s -> [[s, f]...], [s...]]
  retError = \err -> {
    arr.push(Errs, err);
    return [Values, Errs];
  };

  Ix! = str.index(html, "<tbody>");
  if (Ix! == -1) return retError("Beginning of table not found");
  Ix! += 7;

  endTable = str.indexFrom(html, "</tbody>", Ix!);
  if (endTable == -1) return retError("End of table not found");

  while () {
    Ix! = str.indexFrom(html, "<tr class=\"normal\"", Ix!);
    if (Ix! == -1 | Ix! > endTable) break;
    Ix! += 18;

    endRow = str.indexFrom(html, "</tr>", Ix!);
    if (endRow == -1) return retError("End of row not found");

    // CODE
    Ix! = str.indexFrom(html, "\"/cotizacion/", Ix!);
    if (Ix! == -1) {
      arr.push(Errs, "Beginning of field 'code' not found");
      Ix! = endRow;
      continue;
    }
    Ix! += 13;
    Ix2! = str.indexFrom(html, "\"", Ix!);
    if (Ix2! == -1) {
      arr.push(Errs, "End of field 'code' not found");
      Ix! = endRow;
      continue;
    }
    Code = [html[Ix!:Ix2!]];
    code = str.starts(Code!, "lar_") ? "lar_espana" : Code!;

    // VALUE
    Ix! = str.indexFrom(html, "\">", Ix2! + 1);
    if (Ix! == -1) {
      arr.push(Errs, "Beginning of field 'value' not found");
      Ix! = endRow;
      continue;
    }
    Ix! += 2;
    Ix2! = str.indexFrom(html, "<", Ix!);
    if (Ix2! == -1) {
      arr.push(Errs, "End of field 'code' not found");
      Ix! = endRow;
      continue;
    }
    try {
      arr.push(Values, [code, math.fromIso(html[Ix!:Ix2!])!]);
    } catch(e) {
      arr.push(Errs, "Bad quote : " + html[Ix!:Ix2!]);
    }

    // END
    Ix! = endRow;
  }

  return [Values, Errs];
};

// HISTORIC --------------------------------------------------------------------

/// \s -> [<qs>|[], [s...]]
readHistoric = \html -> {
  // [s...] (quotes type file 'NICK.tb')
  Qs = [];
  // [s...]
  Errs = [];
  Ix = [0];
  Ix2 = [0];

  // \-> [<qs>]|[]
  mkQs = \-> {
    QsR = qs.fromStr(arr.size(Qs), arr.join(Qs, "\n"));
    if (QsR[1]) return [QsR!];
    arr.push(Errs, QsR!);
    return [];
  };

  // \s -> [<qs>|[], [s...]]
  retError = \err -> {
    arr.push(Errs, err);
    return [mkQs(), Errs];
  };

  Ix! = str.index(html, "<tbody>");
  if (Ix! == -1) return retError("Beginning of table not found");
  Ix! += 7;

  endTable = str.indexFrom(html, "</tbody>", Ix!);
  if (endTable == -1) return retError("End of table not found");

  while () {
    Ix! = str.indexFrom(html, "<tr class=\"normal\"", Ix!);
    if (Ix! == -1 | Ix! > endTable) break;
    Ix! += 20;

    endRow = str.indexFrom(html, "</tr>", Ix!);
    if (endRow == -1) return retError("End of row not found");

    // DATE
    Ix! = str.indexFrom(html, "\">", Ix!);
    if (Ix! == -1) {
      arr.push(Errs, "Beginning of field 'date' not found");
      Ix! = endRow;
      continue;
    }
    Ix! += 2;
    Ix2! = str.indexFrom(html, "<", Ix!);
    if (Ix2! == -1) {
      arr.push(Errs, "End of field 'date' not found");
      Ix! = endRow;
      continue;
    }
    dateOp = time.fromIso(str.trim(html[Ix!:Ix2!]), "/");
    if (!dateOp) {
      arr.push(Errs, "Bad date: " + html[Ix!:Ix2!]);
      continue;
    }
    date = time.toStr(dateOp!);

    // CLOSE
    Ix! = str.indexFrom(html, "\">", Ix!);
    if (Ix! == -1) {
      arr.push(Errs, "Beginning of field 'close' not found");
      Ix! = endRow;
      continue;
    }
    Ix! += 2;
    Ix2! = str.indexFrom(html, "<", Ix!);
    if (Ix2! == -1) {
      arr.push(Errs, "End of field 'close' not found");
      Ix! = endRow;
      continue;
    }
    closeOp = math.fromIso(str.trim(html[Ix!:Ix2!]));
    if (!closeOp) {
      arr.push(Errs, "Bad close: " + html[Ix!:Ix2!]);
      continue;
    }
    close = math.ftos(closeOp!);

    // OPEN
    Ix! = str.indexFrom(html, "\">", Ix!);
    if (Ix! == -1) {
      arr.push(Errs, "Beginning of field 'open' not found");
      Ix! = endRow;
      continue;
    }
    Ix! += 2;
    Ix2! = str.indexFrom(html, "<", Ix!);
    if (Ix2! == -1) {
      arr.push(Errs, "End of field 'open' not found");
      Ix! = endRow;
      continue;
    }
    openOp = math.fromIso(str.trim(html[Ix!:Ix2!]));
    if (!openOp) {
      arr.push(Errs, "Bad open: " + html[Ix!:Ix2!]);
      continue;
    }
    open = math.ftos(openOp!);

    // MAX
    Ix! = str.indexFrom(html, "\">", Ix!);
    if (Ix! == -1) {
      arr.push(Errs, "Beginning of field 'max' not found");
      Ix! = endRow;
      continue;
    }
    Ix! += 2;
    Ix2! = str.indexFrom(html, "<", Ix!);
    if (Ix2! == -1) {
      arr.push(Errs, "End of field 'max' not found");
      Ix! = endRow;
      continue;
    }
    maxOp = math.fromIso(str.trim(html[Ix!:Ix2!]));
    if (!maxOp) {
      arr.push(Errs, "Bad max: " + html[Ix!:Ix2!]);
      continue;
    }
    max = math.ftos(maxOp!);

    // MIN
    Ix! = str.indexFrom(html, "\">", Ix!);
    if (Ix! == -1) {
      arr.push(Errs, "Beginning of field 'min' not found");
      Ix! = endRow;
      continue;
    }
    Ix! += 2;
    Ix2! = str.indexFrom(html, "<", Ix!);
    if (Ix2! == -1) {
      arr.push(Errs, "End of field 'min' not found");
      Ix! = endRow;
      continue;
    }
    minOp = math.fromIso(str.trim(html[Ix!:Ix2!]));
    if (!minOp) {
      arr.push(Errs, "Bad min: " + html[Ix!:Ix2!]);
      continue;
    }
    min = math.ftos(minOp!);

    // VOL
    Ix! = str.indexFrom(html, "\">", Ix!);
    if (Ix! == -1) {
      arr.push(Errs, "Beginning of field 'vol' not found");
      Ix! = endRow;
      continue;
    }
    Ix! += 2;
    Ix2! = str.indexFrom(html, "<", Ix!);
    if (Ix2! == -1) {
      arr.push(Errs, "End of field 'vol' not found");
      Ix! = endRow;
      continue;
    }
    volOp = math.fromIso(str.trim(html[Ix!:Ix2!]));
    if (!volOp) {
      arr.push(Errs, "Bad vol: " + html[Ix!:Ix2!]);
      continue;
    }
    vol = math.itos(math.ftoi(volOp!));

    // END
    arr.push(Qs, str.fmt(
      "%v:%v:%v:%v:%v:%v:false",
      [date, open, close, max, min, vol]
    ));
    Ix! = endRow;
  }

  return [mkQs(), Errs];
};

// OTHER -----------------------------------------------------------------------

/// \-> s
id = \ -> return "INFOB";;

// \-> s
name = \ -> return "Infobolsa";;

// \-> b
withDiary = \ -> return true;;

// \-> [s|s, b] ([html|error, ok])
downloadDiary = \ -> {
  url = "https://www.infobolsa.es/mercado-nacional/mercado-continuo";
  return sys.cmd(
    "timeout", ["-s", "KILL", "30", "wget", "-q", "--no-cache", "-O", "-", url]
  );
};

// \-> b
withHistoric = \ -> return true;;

// \s -> [s|s, b] ([html|error, ok])
downloadHistoric = \code -> {
  url = str.fmt("https://www.infobolsa.es/cotizacion/historico-%v", [code]);
  return sys.cmd(
    "timeout", ["-s", "KILL", "30", "wget", "-q", "--no-cache", "-O", "-", url]
  );
};

/// Constructor.
/// \-> <qsv>
new = \-> return qsv.new(
    id, name, withDiary, downloadDiary, readDiary,
    withHistoric, downloadHistoric, readHistoric
  );;
