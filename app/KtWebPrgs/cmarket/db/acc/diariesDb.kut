// Copyright 10-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Accounting diaries data base management.

import "data/cts";
import "data/acc/annsTb";
import "db";

accPath = "acc";

// s
diariesPath = path.cat([accPath, "diaries"]);

// \i, i -> s
fpath = \year ->
  return path.cat([diariesPath, str.fmt("%v.tb", [year])]);;

/// Initializes data base
/// \ -> ()
init = \ -> {
  file.mkdir(db.pathOf(accPath));
  if (!db.exists(diariesPath)){
    file.mkdir(db.pathOf(diariesPath));
    year = math.itos(time.year(time.now()));
    write(year, annsTb.new());
  }
};

/// Read an annotation table. If the annotations table does not exist, it
/// returns an empty <annsTb>
///   year: Year.
/// \s -> <annsTb>
read = \year -> {
  p = fpath(year);
  return file.exists(db.pathOf(p))
    ? annsTb.fromJs(js.r(db.read(p)))
    : annsTb.new()
  ;
};

/// Writes an annotation table.
///   table: Annotations table.
/// \s, <annsTb> -> ()
write = \year, table ->
  db.write(fpath(year), js.w(annsTb.toJs(table)));;

/// Returns a sorted array from after to before of years with activity of the
/// investor.
/// \ -> [s.]
investorYears = \ -> {
  Years = arr.map(file.dir(db.pathOf(diariesPath)), \f -> return f[:-3];);
  arr.sort(Years, \y1, y2 -> return y1 > y2;);
  return Years;
};

/// Returns an unsorted array with annotations of one investor.
/// \s -> [<ann>.]
investorAnns = \year -> return annsTb.anns(read(year));;

