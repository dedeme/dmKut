// Copyright 10-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Accounting diaries data base management.

import "data/cts";
import "data/chart/profitsEntry";
import "db";

accPath = "acc";

// \i -> s
invPath = \inv -> return path.cat([accPath, str.fmt("Investor-%v", [inv])]);;

// \i -> s
profitsPath = \inv -> return path.cat([invPath(inv), "profits"]);;

// \i, i -> s
fpath = \inv, year ->
  return path.cat([invPath(inv), "profits", str.fmt("%v.tb", [year])]);;

/// Initializes data base
/// \ -> ()
init = \ -> {
  file.mkdir(db.pathOf(accPath));
  for (inv = 0:cts.investors) {
    file.mkdir(db.pathOf(invPath(inv)));
    if (!db.exists(profitsPath(inv))){
      file.mkdir(db.pathOf(profitsPath(inv)));
      year = math.itos(time.year(time.now()));
      write(inv, year, [profitsEntry.new(time.toStr(time.now()), 0.0, 0.0, 0.0)]);
    }
  }
};

/// Read a profits table. If the annotations table does not exist, it
/// returns an empty array.
///   inv: Investor.
///   year: Year.
/// \i, s -> [<profitsEntry>...]
read = \inv, year -> {
  p = fpath(inv, year);
  return file.exists(db.pathOf(p))
    ? arr.map(js.r(db.read(p)), profitsEntry.fromJs)
    : []
  ;
};

/// Writes a profits table.
///   inv: Investor.
///   year: Year.
///   table: Profits table.
/// \i, s, [<profitsEntry>...] -> ()
write = \inv, year, table ->
  db.write(fpath(inv, year), js.w(arr.map(table, profitsEntry.toJs)));;

/// Returns a sorted array from after to before of years with activity of
/// one investor.
/// \i -> [s...]
investorYears = \inv -> {
  Years = arr.map(file.dir(db.pathOf(profitsPath(inv))), \f -> return f[:-3];);
  arr.sort(Years, \y1, y2 -> return y1 > y2;);
  return Years;
};

/// Returns a sorted array from after to before of years with activity of
/// all the investor.
/// \i -> [s...]
allInvestorsYears = \ -> {
  All = iter.reduce(
    [0:cts.investors], [],
    \r, i -> {arr.cat(r, investorYears(i)); return r;}
  );
  return arr.duplicates(All, \y1, y2 -> return y1 == y2;)[0];
};
