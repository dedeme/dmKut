// Copyright 10-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Accounting diaries data base management.

import "data/cts";
import "data/chart/profitsEntry";
import "db";

accPath = "acc";

// \i -> s
profitsPath = path.cat([accPath, "profits"]);

// \i -> s
fpath = \year ->
  return path.cat([profitsPath, str.fmt("%v.tb", [year])]);;

/// Initializes data base
/// \ -> ()
init = \ -> {
  file.mkdir(db.pathOf(accPath));
  if (!db.exists(profitsPath)){
    file.mkdir(db.pathOf(profitsPath));
    year = math.itos(time.year(time.now()));
    write(year, [profitsEntry.new(time.toStr(time.now()), 0.0, 0.0, 0.0)]);
  }
};

/// Read a profits table. If the annotations table does not exist, it
/// returns an empty array.
///   year: Year.
/// \s -> [<profitsEntry>.]
read = \year -> {
  p = fpath(year);
  return file.exists(db.pathOf(p))
    ? arr.map(js.r(db.read(p)), profitsEntry.fromJs)
    : []
  ;
};

/// Writes a profits table.
///   year: Year.
///   table: Profits table.
/// \s, [<profitsEntry>.] -> ()
write = \year, table ->
  db.write(fpath(year), js.w(arr.map(table, profitsEntry.toJs)));;

/// Returns a sorted array from after to before of years with activity of
/// the investor.
/// \-> [s.]
investorYears = \ -> {
  Years = arr.map(file.dir(db.pathOf(profitsPath)), \f -> return f[:-3];);
  arr.sort(Years, \y1, y2 -> return y1 > y2;);
  return Years;
};

