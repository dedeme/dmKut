// Copyright 09-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Investors table.

import "libmkt/models";
import "libmkt/model";
import "libmkt/quotes2";
import "data/cts";
import "data/co/cosT";
import "data/co/co";
import "data/investor/investor";
import "data/investor/istrategy";
import "db/cosTb";
import "db/quotesDb";
import "db";

fpath = "investor.tb";

/// Initialize table.
/// \ -> ()
init = \ -> if (!db.exists(fpath))
  db.write(fpath, js.w(investor.toJs(investor.mk(
    arr.map(cosTb.read()[cosT.Cos], \:co c -> return c.nick;)
  ))));;

/// Read investor table.
/// \ -> <investor>
read = \ -> return investor.fromJs(js.r(db.read(fpath)));;

/// Write investor table.
write = \inv -> db.write(fpath, js.w(investor.toJs(inv)));;

/// Synchronizes investor strategy with its base, returning "" or
/// an error if the function fails.
/// \ -> s
update = \ -> {
  :cosT cos = cosTb.read();
  mainNick = cos.main;
  Nicks = arr.map(cos.Cos, \:co c -> return c.nick;);
  :investor inv = read();
  :istrategy base = inv.base;
  baseMdOp = models.get(base.modelId);
  if (!baseMdOp) return "Model " + base.modelId + " not found";
  :model baseMd = baseMdOp!;

  NickStr = inv.Nicks;
  NewNickStr = {}; // {<strategy>.}
  errV = [""];
  for (nk = Nicks) {
    nkStrategyOp = dic.get(NickStr, nk);
    if (!!nkStrategyOp & !base.eq(nkStrategyOp!)) {
      :istrategy nkStrategy = nkStrategyOp!;
      quotesRs = quotesDb.readQuotes(mainNick, nk);
      if (!quotesRs[1]) {
        errV! = quotesRs!;
        break;
      }
      :quotes2 quotes = quotesRs!;

      nkMdOp = models.get(nkStrategy.modelId);
      if (!!nkMdOp) {
        :model nkMd = nkMdOp!;
        cl = arr.peek(quotes.Closes)[0];
        baseRf = arr.peek(baseMd.calc(quotes.Closes, base.Params))[0];
        nkRf = arr.peek(nkMd.calc(quotes.Closes, nkStrategy.Params))[0];
        if ((baseRf < cl & nkRf > cl) | (baseRf > cl & nkRf < cl)){
          dic.put(NewNickStr, nk, nkStrategy);
          continue;
        }
      }
    }
    dic.put(NewNickStr, nk, base);
  }

  if (errV! != "") return errV!;
  write(investor.new(base, NewNickStr));
  return "";
};
