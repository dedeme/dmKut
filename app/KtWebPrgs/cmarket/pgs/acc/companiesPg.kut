// Copyright 15-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Accounting trading page.

import "KtWeb/rp";
import "libdm/log";
import "libmkt/quotes2";
import "libmkt/models";
import "libmkt/model";
import "data/cts";
import "data/acc/ann";
import "data/acc/settlement";
import "data/acc/pf";
import "data/co/cosT";
import "data/co/co";
import "data/investor/investor";
import "data/investor/istrategy";
import "db/svCodesTb";
import "db/acc/diariesDb";
import "db/cosTb";
import "db/quotesDb";
import "db/investorTb";
import "db/trading/closesTb";

mkUrl = \nick -> {
  Codes = svCodesTb.read("YAHOO");
  Code = dic.get(Codes, nick);
  if (!!Code)
    return str.fmt(
      "https://es.finance.yahoo.com/quote/%s", [Code!]
    );
  return "";
};

rpErr = \error -> {sys.print(rp.mk({error}));};

/// \m -> ()
process = \Rq -> {
  switch (Rq.rq) {
    "idata": {
      Anns = diariesDb.investorAnns(diariesDb.investorYears()[0]);
      Pf = ann.mkSettlement(Anns)[settlement.Portfolio];
      Nicks = arr.map(
        arr.filter(cosTb.read()[cosT.Cos], \:co c -> return c.isSelected;),
        \:co c -> return c.nick;
      );
      R = []; // [[s, b, s]...]
      for (nk = Nicks)
        arr.push(R, [nk, !!dic.get(Pf, nk), mkUrl(nk)]);
      sys.print(rp.mk({
        list: R
      }));
    }
    "nickData": {
      nk = Rq.nick;
      Error = [""];
      ClOp = dic.get(closesTb.read(), nk);
      if (!ClOp) {rpErr("Close of " + nk + " not found"); return;}
      isHistoric = ClOp![0];
      cl = ClOp![1];
      mainNick = cosTb.read()[cosT.main];
      QsRs = quotesDb.readQuotes(mainNick, nk);
      if (!QsRs[1]) {rpErr(QsRs!); return;}
      QsV = [QsRs!];
      if (!isHistoric) {
        :quotes2 qs = QsV!;
        Dates = qs.Dates;
        arr.shift(Dates);
        arr.push(Dates, time.toStr(time.now()));
        Opens = qs.Opens;
        arr.shift(Opens);
        arr.push(Opens, [cl]);
        Closes = qs.Closes;
        arr.shift(Closes);
        arr.push(Closes, [cl]);
        QsV! = quotes2.new(qs.Cos, Dates, Opens, Closes);
      }
      :quotes2 qs = QsV!;

      Refs = []; //[[f...]...]
      Anns = diariesDb.investorAnns(diariesDb.investorYears()[0]);
      Pf = ann.mkSettlement(Anns)[settlement.Portfolio];
      eOp = dic.get(Pf, nk);
      stocks = !eOp ? 0 : eOp![0];
      price = !eOp ? -1.0 : eOp![1];


      strgOp = dic.get(investorTb.read()[investor.Nicks], nk);
      if (!strgOp) {
        rpErr(str.fmt("Strategy of %v not found", [nk]));
        return;
      }
      :istrategy strg = strgOp!;
      mdOp = models.get(strg.modelId);
      if (!mdOp) {rpErr("Model " + strg.modelId + " not found"); return;}
      :model md = mdOp!;
      Params = strg.Params;
      Rs = md.calc(qs.Closes, Params);
      arr.push(Refs, arr.map(Rs, \R -> return math.round(R!, 4);));

      sys.print(rp.mk({
        error: Error!,
        price,
        profits: math.itof(stocks) * (cl - price),
        dates: qs.Dates,
        closes: arr.map(qs.Closes, \cOp -> return cOp!;),
        refs: Refs
      }));
    }
    default: sys.throw("Value of rq (" + Rq.rq + ") is not valid");
  }
};
