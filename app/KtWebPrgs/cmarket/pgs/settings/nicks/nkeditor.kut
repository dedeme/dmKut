// Copyright 23-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Nicks editor page

import "KtWeb/rp";
import "libdm/log";
import "libmkt/qs";
import "libmkt/quote";
import "db/quotesDb";
import "db/svCodesTb";
import "data/qs/qsvs";
import "data/qs/qsv";
import "qspr";

/// \m -> ()
process = \Rq -> {
  switch (Rq.rq) {
    "idata": {
      mainNick = Rq.mainNick;
      nick = Rq.nick;

      Rp = {
        ok: true,
        quotes: [], // [JS<<quote>>...]
        manuals: 0.0,
        mquotes: [], // [JS<<quote>>...]
        sIdCodes: [] // [JS<[s,b,s]>...]
      };

      Mqs = quotesDb.readQs(mainNick);
      if (Mqs[1]) {
        Rp.mquotes = arr.map(qs.quotes(Mqs!), quote.toJs);
        Qs = quotesDb.readQs(nick);
        if (Qs[1]) {
          Qs2 = qs.quotes(Qs!);
          Rp.quotes = arr.map(Qs2, quote.toJs);
          Rp.manuals = math.itof(
            arr.reduce(Qs2, 0, \r, e -> return e.force ? r + 1 : r;)
          );
          for (sv = qsvs.list()) {
            id = qsv.id(sv);
            Codes = svCodesTb.read(id);
            Code = dic.get(Codes, nick);
            if (Code) {
              arr.push(Rp.sIdCodes, [id, qsv.withHistoric(sv), Code!]);
            } else {
              log.error(str.fmt(
                "Fail reading code of %v in server %v", [nick, id]
              ));
              Rp.ok = false;
              break;
            }
          }
        } else {
          log.error(str.fmt("Fail reading %v: %v", [nick, Qs!]));
          Rp.ok = false;
        }
      } else {
        log.error(str.fmt("Fail reading %v: %v", [mainNick, Mqs!]));
        Rp.ok = false;
      }
      sys.print(rp.mk(Rp));
    }
    "updateCode": {
      server = Rq.server;
      nick = Rq.nick;
      code = Rq.code;
      // {s...}
      NkCds = svCodesTb.read(server);
      NkCds[nick] = code;
      svCodesTb.write(server, NkCds);
      sys.print(rp.mkEmpty());
    }
    "download": {
      mainNick = Rq.mainNick;
      nick = Rq.nick;
      Rs = qspr.updateHistoric("Updating " + nick, mainNick, nick);
      Err = qspr.updateClosesAndRefs(nick);
      qspr.updateOperations();
      sys.print(rp.mk({
        result: Rs.withError | Err
          ? "error"
          : Rs.withWarnings
            ? "warnings"
            : ""
      }));
    }
    "serverTest": {
      server = Rq.server;
      nick = Rq.nick;
      code = Rq.code;
      WithErrors = [false];
      WithWarnings = [false];

      Sv = arr.find(qsvs.list(), \s -> return qsv.id(s) == server;);
      if (Sv) {
        Html = qsv.downloadHistoric(Sv!, code);
        if (Html[1]) {
          // [[<qsv>]|[], [s...]]
          Tp = qsv.readHistoric(Sv!, Html!);
          Qs = Tp[0];
          if (Qs) {
            if (Tp[1]) {
              for (err = Tp[1])
                log.error(str.fmt("(Test in %s:%s) %s", [server, nick, err]));
              WithWarnings! = true;
            }
          } else {
            for (err = Tp[1])
              log.error(str.fmt("(Test in %s:%s) %s", [server, nick, err]));
            WithWarnings! = true;
            WithErrors! = true;
          }
        } else {
          log.error(str.fmt("(Test in %s:%s) %s", [server, nick, Html!]));
          WithErrors! = true;
        }
      } else {
        log.error(str.fmt("Server '%s' not found", [server]));
        WithErrors! = true;
      }
      sys.print(rp.mk({
        withErrors: WithErrors!,
        withWarnings: WithWarnings!
      }));
    }
    "test": {
      mainNick = Rq.mainNick;
      nick = Rq.nick;
      qs = Rq.qs;
      prefix = "Fail testing " + nick;
      // <qsprRs<s>>
      Rs = nick == mainNick
        ? qspr.correctStr(prefix, qs)
        : qspr.correctStr2(prefix, qs, mainNick)
      ;
      sys.print(rp.mk({
        result: Rs.withError
          ? "error"
          : Rs.withWarnings
            ? "warnings"
            : ""
      }));
    }
    "qModify": {
      mainNick = Rq.mainNick;
      nick = Rq.nick;
      qs = Rq.qs;
      prefix = "Fail modifying " + nick;
      // <qsprRs<s>>
      Rs = nick == mainNick
        ? qspr.correctStr(prefix, qs)
        : qspr.correctStr2(prefix, qs, mainNick)
      ;
      ok = !Rs.withError & !Rs.withWarnings;
      if (ok) quotesDb.write(nick, qs);
      sys.print(rp.mk({ok}));
    }
    "getQuotes": {
      nick = Rq.nick;

      Rp = {
        ok: true,
        quotes: [] // [JS<<quote>>...]
      };

      Qs = quotesDb.readQs(nick);
      if (Qs[1]) {
        Rp.quotes = arr.map(qs.quotes(Qs!), quote.toJs);
      } else {
        log.error(str.fmt("Fail reading %s: %s", [nick, Qs!]));
        Rp.ok = false;
      }
      sys.print(rp.mk(Rp));
    }
    default: sys.throw("Value of rq (" + Rq.rq + ") is not valid");
  }
};
