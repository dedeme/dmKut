// Copyright 23-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Quotes processing management.

import "libdm/log";
import "libmkt/models";
import "libmkt/qs";
import "libmkt/cts" : mcts;
import "libmkt/quotes2";
import "libmkt/model";
import "db/quotesDb";
import "db/cosTb";
import "db/svCodesTb";
import "db/investorTb";
import "db/invOperationsTb";
import "db/ibexTb";
import "db/trading/closesTb";
import "db/trading/refsTb";
import "db/acc/diariesDb";
import "db/acc/profitsDb";
import "db/daily/dailyChartsTb";
import "data/cts";
import "data/qsprRs";
import "data/ibex";
import "data/acc/ann";
import "data/acc/ldg";
import "data/acc/settlement";
import "data/acc/opr";
import "data/invOperation";
import "data/qs/qsv";
import "data/qs/qsvs";
import "data/svs/indexesSv";
import "data/svs/ibexSv";
import "data/chart/dailyChart";
import "data/chart/profitsEntry";
import "data/chart/dailyInvestorData";
import "data/investor/investor";
import "data/investor/istrategy";
import "data/co/cosT";
import "data/co/co";

// Create a result without error nor warnings.
//   value: Result value.
//   Returns {value: 'value', withWarnings: false, withError: false}
// \* -> <qsprRs>
ok = \value -> return qsprRs.new(value, false, false);;

// Create a result with error written in log. (qsprRs.value = [])
//   msg: Error message.
//   Returns {value: [], withWarnings: false, withError: true}
// \s -> <qsprRs>
error = \msg -> {
  log.error(msg);
  return qsprRs.new([], false, true);
};

// Create a result with warnings written in log.
//   msgs: Warning messages
//   value: Result value.
//   Returns {value: 'value', withWarnings: true, withError: false}
// \[s...], * -> d<qsprRs>
warning = \msgs, value -> {
  for (w = msgs) log.warning(w);
  return qsprRs.new(value, true, false);
};

// Returns a new <qsprRs> such that:
//   - If rs.withError == true -> rs is returned.
//   - Otherwise 'fn' is run and its result is returned. If rs is withWarnings
//     the final result is withWarnings too.
//   rs: First result.
//   fn: Function with 'rs.value' as argument.
// \<qsprRs>, (\* -> <qsprRs>) -> <qsprRs>
bind = \:qsprRs rs, fn -> {
  if (rs.withError) return rs;
  :qsprRs rs2 = fn(rs.value);
  rs2.withWarnings |= rs.withWarnings;
  return rs2;
};

// UTILITIES -------------------------------------------------------------------

// \s, s, i -> <qsprRs<<qs>>>
toQs = \prefix, qts, size -> {
  qsRs = qs.fromStr(size, qts);
  return qsRs[1]
    ? ok(qsRs!)
    : error(prefix + ": " + qsRs!)
  ;
};

// \s -> <qsprRs<<qs>>>
getQs = \nick -> {
  qsRs = quotesDb.readQs(nick);
  return qsRs[1]
    ? ok(qsRs!)
    : error("Reading company " + nick + ": " + qsRs!)
  ;
};

// \s, s -> <qsprRs<<qs>>>
simpleCorrection = \prefix, qts ->
  return bind(
    toQs(prefix, qts, mcts.historicQuotes),
    \qts -> {
      // [<qs>, [s...]]
      Tp = qs.correct(qts);
      return !!Tp[1]
        ? warning(arr.map(Tp[1], \e -> return prefix + ": " + e;), Tp[0])
        : ok(Tp[0])
      ;
    });;

// \s, <qs>, <qs> -> <qsprRs<<qs>>>
dateCorrection = \prefix, mqts, qts -> {
  // [<qs>, [s...]]
  Tp = qs.correctDates(qts, mqts);
  return !!Tp[1]
    ? warning(arr.map(Tp[1], \e -> return prefix + ": " + e;), Tp[0])
    : ok(Tp[0])
  ;
};

// \s, sv, s -> <qsprRs<s>>
getCode = \prefix, nick -> {
  codeOp = dic.get(svCodesTb.read(qsv.id(qsvs.currentHistoric())), nick);
  if (!!codeOp) return ok(codeOp!);
  return error(prefix + str.fmt(": Code of %v not found", [nick]));
};

// \s, s -> <qsprRs<<qs>>>
downloadHistoric = \prefix, code -> {
  sv = qsvs.currentHistoric();
  htmlRs = qsv.downloadHistoric(sv, code);
  if (!htmlRs[1]) return error(prefix + ": " + htmlRs!);

  Tp = qsv.readHistoric(sv, htmlRs!);
  qtsOp = Tp[0];
  Errs = Tp[1];

  errV = [""];
  if (!qtsOp) errV! = prefix + ": Quotes can not be read";
  else {
    qts = qtsOp!;
    if (qs.size(qts) == 0) errV! = prefix + ": No quotes found";
    else if (qs.size(qts) < cts.historicMinimumEntries)
      errV! = prefix + str.fmt(
        ": Only %v quotes found (Minimum %v)",
        [qs.size(qts), cts.historicMinimumEntries]
      );
  }

  if (errV! != "") {
    for (w = Errs) log.warning(w);
    return error(errV!);
  }

  return !!Errs
    ? warning(Errs, qtsOp!)
    : ok(qtsOp!)
  ;
};

// \ -> <qsprRs<<qs>>>
downloadIbexHistoric = \ -> {
  Tp = ibexSv.readHistoricQuotes();

  qtsOp = Tp[0];
  Errs = Tp[1];

  errV = [""];
  if (!qtsOp) errV! = "IBEX: Quotes can not be read";
  else {
    qts = qtsOp!;
    if (qs.size(qts) == 0) errV! = "IBEX: No quotes found";
    else if (qs.size(qts) < cts.historicMinimumEntries)
      errV! =str.fmt(
        "IBEX: Only %v quotes found (Minimum %v)",
        [qs.size(qts), cts.historicMinimumEntries]
      );
  }

  if (errV! != "") {
    for (w = Errs) log.warning(w);
    return error(errV!);
  }

  return !Errs
    ? ok(qtsOp!)
    : warning(Errs, qtsOp!)
  ;
};

// \s, <qs>, <qs>, <qs> -> <qsprRs<<qs>>>
merge = \prefix, mqs, nqs, oqs -> {
  // [<qs>, [s...]]
  Tp = qs.merge(nqs, mqs, oqs);
  return !!Tp[1]
    ? warning(arr.map(Tp[1], \e -> return prefix + ": " + e;), Tp[0])
    : ok(Tp[0])
  ;
};

// PUBLIC INTERFACE ------------------------------------------------------------

/// Returns <qsprRs<s>> with 'qs' corected.
/// Return and paremeter quotes are type file 'NICK.tb'.
///   prefix: Prefix for errors and warnings.
///   qts   : Copany quotes. (Company can not be main)
/// \s, s -> <qsprRs<s>>
correctStr = \prefix, qts ->
  return bind(
    simpleCorrection(prefix, qts),
    \qts -> return ok(qs.toStr(qts));
  );;

/// Return <qsprRs<s>> with 'qs' corected.
/// Return and paremeter quotes are type file 'NICK.tb'.
///   prefix  : Prefix for errors and warnings.
///   qs      : Copany quotes.
///   mainNick: Main company nick.
/// \s, s, s -> <qsprRs<s>>
correctStr2 = \prefix, qts, mainNick ->
  return bind(
    simpleCorrection(prefix, qts),
    \qts -> return bind(
        getQs(mainNick),
        \mqts -> return bind(
          dateCorrection(prefix, mqts, qts),
          \qts -> return ok(qs.toStr(qts));
        );
      );
    );;

/// Reads quotes of 'nick' from current server, merges with current quotes,
/// corrects and, if it have not errors, writes them in 'quotesDb'.
///   prefix  : Prefix for errors and warnings.
///   mainNick: Main company nick.
///   nick    : Company nick.
/// \s, s, s -> <qsprRs<qs>>
updateHistoric = \prefix, mainNick, nick ->
    return bind(
      getCode(prefix, nick),
      \code -> return bind(
        downloadHistoric(prefix, code),
        \newQs -> return bind(
          getQs(nick),
          \oldQs -> return bind(
            nick == mainNick
              ? ok([])
              : getQs(mainNick),
            \mainQs -> {
              :qsprRs R = merge(prefix, mainQs, newQs, oldQs);
              quotesDb.write(nick, qs.toStr(R.value));
              return R;
            }
          );
        );
      );
    );;

/// Reads quotes of Ibex, merges with current quotes,
/// corrects and, if it have not errors, writes them in 'ibexTb'.
///   mainNick: Main company nick.
/// \s -> <qsprRs<qs>>
updateIbexHistoric = \mainNick -> {
  :ibex qs = ibexTb.read();
  return bind(
    downloadIbexHistoric(),
    \newQs -> return bind(
      ok(qs.qs),
      \oldQs -> return bind(
        getQs(mainNick),
        \mainQs -> {
          :qsprRs R = merge("IBEX", mainQs, newQs, oldQs);
          ibexTb.write(ibex.new(qs.Cos, R.value));
          return R;
        }
      );
    );
  );
};

/// Update last closes and references tables from historic and returns
/// "" or an error if the update failed.
/// \s -> s
updateClosesAndRefs = \co -> {
  if (arr.any(cts.IxNicks, \e -> return e == co;)) {
    IxsRs = indexesSv.read();
    if (!IxsRs[1]) return IxsRs!;
    Ixs = IxsRs!;
    Closes = closesTb.read();
    dic.put(Closes, co, [true, Ixs[co]]);
    closesTb.write(Closes);
    return "";
  }

  QsRs = quotesDb.readQs(co);
  if (!QsRs[1]) return QsRs!;
  Closes = closesTb.read();
  dic.put(Closes, co, [true, arr.peek(qs.closes(QsRs!))]);
  closesTb.write(Closes);

  Refs = refsTb.read();
  :investor inv = investorTb.read();

  StrOp = dic.get(inv.Nicks, co);
  if (!StrOp) return str.fmt(
      "Strategy for [inv%v-%v] not found", [inv, co]
    );
  :istrategy strg = StrOp!;
  mdOp = models.get(strg.modelId);
  if (!mdOp) return str.fmt(
      "Model %s of [inv%v-%v] not found", [strg.modelId, inv, co]
    );
  :model md = mdOp!;

  :cosT cos = cosTb.read();
  mainNick = cos.main;

  quotesRs = quotesDb.readQuotes(mainNick, co);
  if (!quotesRs[1]) return quotesRs!;
  :quotes2 quotes = quotesRs!;

  Srfs = md.calc(quotes.Closes, strg.Params);
  currentRef = arr.pop(Srfs)[0];
  prevRef = arr.peek(Srfs)[0];
  dic.put(Refs, co, [prevRef, currentRef]);

  refsTb.write(Refs);

  return "";
};

/// Update closes from daily data. Returns an empty string it all go good or
/// a error message.
/// \ -> s
updateDailyCloses = \ -> {
  sv = qsvs.currentDiary();
  Codes = svCodesTb.read(qsv.id(sv));
  HtmlRs = qsv.downloadDiary(sv);
  if (!HtmlRs[1]) return HtmlRs!;
  Tp = qsv.readDiary(sv, HtmlRs!);
  for (w = Tp[1]) log.warning(w);
  CodeQuotes = Tp[0];
  Closes = closesTb.read();

  :cosT cos = cosTb.read();
  SelNicks = arr.map(
    arr.filter(cos.Cos, \:co c -> return c.isSelected;),
    \:co c -> return c.nick;
  );

  NewCloses = {}; // {[b,f]...}
  for (nk = SelNicks) {
    Code = dic.get(Codes, nk);
    if (!!Code) {
      NkQuote = arr.find(CodeQuotes, \NQ -> return NQ[0] == Code!;);
      if (!!NkQuote) {
        dic.put(NewCloses, nk, [false, NkQuote![1]]);
      } else {
        log.error("Daily quote of " + nk + " not found");
        Quote = dic.get(Closes, nk);
        if (!!Quote) dic.put(NewCloses, nk,  [false, Quote![1]]);
        else log.error("Quote of " + nk + " not found");
      }
    } else {
      log.error("Code of " + nk + " not found in " + qsv.id(sv));
      Quote = dic.get(Closes, nk);
      if (!!Quote) dic.put(NewCloses, nk, [false, Quote![1]]);
      else log.error("Quote of " + nk + " not found");
    }
  }

  // Indexes nick
  IxsRs = indexesSv.read();
  if (IxsRs[1]) {
    Ixs = IxsRs!;
    for (nk = cts.IxNicks)
      dic.put(NewCloses, nk, [false, Ixs[nk]]);
  } else {
    for (nk = cts.IxNicks)
      dic.put(NewCloses, nk, Closes[nk]);
    log.error(IxsRs!);
  }

  closesTb.write(NewCloses);

  return "";
};

/// Update operations. Returns a message if an error happend. Otherwise returns
/// an empty string.
/// \b -> s
updateOperations = \ -> {
  Closes = closesTb.read();
  Refs = refsTb.read();
  Years = diariesDb.investorYears();
  Anns = !!Years
    ? diariesDb.investorAnns(Years[0])
    : []
  ;
  Pf = ann.mkSettlement(Anns)[settlement.Portfolio];

  InvOps = []; // [<invOperation>...]
  Nicks = arr.map(
    arr.filter(cosTb.read()[cosT.Cos], \:co c -> return c.isSelected;),
    \:co c -> return c.nick;
  );
  for (nk = Nicks) {
    HClose = dic.get(Closes, nk);
    if (!HClose) return "Closes of " + nk + " not found in 'closes.tb'";
    isHistoric = HClose![0];
    cl = HClose![1];

    QsRs = quotesDb.readQs(nk);
    if (!QsRs[1]) return QsRs!;
    Cls = qs.closes(QsRs!);
    pvCl = isHistoric ? Cls[-2:][0] : arr.peek(Cls);

    RfsOp = dic.get(Refs, nk);
    if (!RfsOp) return "References of " + nk + " not found in 'refs.tb'";

    Rfs = RfsOp!;
    rf = isHistoric ? Rfs[0] : Rfs[1];
    if (pvCl < rf & rf < cl) {
      arr.push(InvOps, invOperation.new(0, nk));
    } else if (pvCl > rf & rf > cl) {
      StPrOp = dic.get(Pf, nk);
      if (!!StPrOp) {
        stocks = StPrOp![0];
        arr.push(InvOps, invOperation.new(stocks, nk));
      }
    }
  }

  /* For when keeping stocks that had to be sold.
  for (Old = invOperationsTb.read())
    if (
      Old.stocks > 0 &
      dic.hasKey(Pf, Old.nick) &
      !!Pf[Old.nick] &
      !arr.any(
        InvOps,
        \IO -> return IO.nick == Old.nick;
      )
    )
      arr.push(InvOps, Old);
  */

  invOperationsTb.write(InvOps);
  return "";
};


/// Craate daily charts table.
/// Must be called after 'qspr.updateClosesAndRefs'.
createDailyCharts = \ -> {
  now = time.now();
  today = time.toStr(now);
  h = time.hour(now);

  :cosT cos = cosTb.read();
  SelNicks = arr.map(
    arr.filter(cos.Cos, \:co c -> return c.isSelected;),
    \:co c -> return c.nick;
  );

  Closes = closesTb.read();
  Refs = refsTb.read();

  BuyAnns = []; // [<ann>.]
  cashV = [0.0];
  Anns = diariesDb.investorAnns(today[:4]);
  :settlement set = ann.mkSettlement(Anns);
  Pf = set.Portfolio;
  cashV! += set.ledger[ldg.cash];
  for (:ann a = Anns)
    if (a.date >= today & opr.type(a.op) == opr.buT)
      arr.push(BuyAnns, a);

  Entries = []; // [<dailyChart>.]
  AllClose = [0.0];
  AllQuote = [0.0];
  for (nk = SelNicks) {
    QsRs = quotesDb.readQs(nk);
    if (!QsRs[1]) {
      log.error(QsRs!);
      continue;
    }
    historicClose = arr.peek(qs.closes(QsRs!));

    Close = dic.get(Closes, nk);
    if (!Close) {
      log.error("Close of " + nk + " not found");
      continue;
    }
    close = Close![1];

    :investor inv = investorTb.read();
    :istrategy strg = inv.Nicks[nk];

    PfEntry = dic.get(Pf, nk);
    StPr = !!PfEntry ? PfEntry! : [0, 0.0];
    stocks = StPr[0];
    price = StPr[1];
    new = StPr[0] > 0 & arr.any(
      BuyAnns,
      \:ann a -> return opr.nick(a.op) == nk;
    );

    AllQuote! += math.itof(stocks) * close;
    if (new) AllClose! += math.itof(stocks) * price;
    else AllClose! += math.itof(stocks) * historicClose;

    RefOp = dic.get(Refs, nk);
    if (!RefOp) log.error("References of " + nk + " not found");
    ref = !!RefOp ? RefOp![1] : close;
    invData = dailyInvestorData.new(
      strg.modelId,
      strg.Params,
      stocks,
      price,
      ref,
      new
    );
    arr.push(Entries, dailyChart.new(nk, close, [h], [close], invData));
  }

  arr.push(Entries, dailyChart.new(
    cts.meNick, cashV! + AllClose!, [h], [cashV! + AllQuote!],
    dailyInvestorData.mkEmpty()
  ));

  // Indexes nick
  for (nk = cts.IxNicks) {
    Qs = Closes[nk][1];
    arr.push(Entries, dailyChart.new(
      nk, Qs[1], [h], [Qs[0]], dailyInvestorData.mkEmpty()
    ));
  }

  dailyChartsTb.write(Entries);
};

/// Update daily chart table.
/// \ -> ();
updateDailyCharts = \ -> {
  now = time.now();
  today = time.toStr(now);
  h = time.hour(now);

  :cosT cos = cosTb.read();
  SelNicks = arr.map(
    arr.filter(cos.Cos, \:co c -> return c.isSelected;),
    \:co c -> return c.nick;
  );

  BuyAnns = []; // [<ann>.]
  cashV = [0.0];
  Anns = diariesDb.investorAnns(today[:4]);
  :settlement set = ann.mkSettlement(Anns);
  Pf = set.Portfolio;
  cashV! += set.ledger[ldg.cash];
  for (:ann a = Anns)
    if (a.date >= today & opr.type(a.op) == opr.buT)
      arr.push(BuyAnns, a);

  Closes = closesTb.read();
  Refs = refsTb.read();

  Entries = dailyChartsTb.read(); // [<dailyChart>.]
  AllClose = [0.0];
  AllQuote = [0.0];
  for (nk = SelNicks) {
    eOp = arr.find(Entries, \:dailyChart e -> return e.nick == nk;);
    if (!eOp) updateClosesAndRefs(nk);

    QsRs = quotesDb.readQs(nk);
    if (!QsRs[1]) {
      log.error(QsRs!);
      continue;
    }
    historicClose = arr.peek(qs.closes(QsRs!));

    Close = dic.get(Closes, nk);
    if (!Close) {
      log.error("Close of " + nk + " not found");
      continue;
    }
    close = Close![1];

    :investor inv = investorTb.read();
    :istrategy strg = inv.Nicks[nk];
    PfEntry = dic.get(Pf, nk);
    StPr = !!PfEntry ? PfEntry! : [0, 0.0];
    stocks = StPr[0];
    price = StPr[1];
    new = StPr[0] > 0 & arr.any(
      BuyAnns,
      \:ann a -> return opr.nick(a.op) == nk;
    );

    AllQuote! += math.itof(stocks) * close;
    if (new) AllClose! += math.itof(stocks) * price;
    else AllClose! += math.itof(stocks) * historicClose;

    RefOp = dic.get(Refs, nk);
    if (!RefOp) log.error("References of " + nk + " not found");
    ref = !!RefOp ? RefOp![1] : close;
    invData = dailyInvestorData.new(
      strg.modelId,
      strg.Params,
      stocks,
      price,
      ref,
      new
    );
    if (!eOp) {
      arr.push(Entries, dailyChart.new(nk, close, [h], [close], invData));
    } else {
      :dailyChart e = eOp!;
      arr.push(e.Hours, h);
      arr.push(e.Quotes, close);
      e.invData = invData;
    }
  }

  :dailyChart e = arr.find(
    Entries, \:dailyChart e -> return e.nick == cts.meNick;
  )!;
  e.close = AllClose! + cashV!;
  arr.push(e.Hours, h);
  arr.push(e.Quotes, AllQuote! + cashV!);

  NoCosEntries = arr.filter(
    Entries,
    \:dailyChart e -> return arr.any(cts.IxNicks, \nk -> return e.nick == nk;);
  );
  for (:dailyChart e = NoCosEntries) {
    ClOp = dic.get(Closes, e.nick);
    if (!!ClOp) e.close = ClOp![1][1];
    Qs = e.Quotes;
    arr.push(Qs, !!ClOp ? ClOp![1][0] : arr.peek(Qs));
    arr.push(e.Hours, h);
  }

  dailyChartsTb.write(Entries);
};

/// Update historic profits. Returns an array with errors.
/// \ -> [s...]
updateHistoricProfits = \ -> {
  today = time.toStr(time.now());
  year = today[:4];
  Closes = closesTb.read();
  Refs = refsTb.read();
  Errs = []; // [s...]

  :settlement set = ann.mkSettlement(diariesDb.investorAnns(year));
  :ldg L = set.ledger;
  Pf = set.Portfolio;
  PrSum = [0.0];
  AccSum = [0.0];
  RfSum = [0.0];
  for (nk, E = Pf) {
    stocks = E[0];
    AccSum! += math.itof(stocks) * E[1];
    ClOp = dic.get(Closes, nk);
    if (!!ClOp) PrSum! += math.itof(stocks) * ClOp![1];
    else arr.push(Errs, "Close of " + nk + " not found");

    RfOp = dic.get(Refs, nk);
    if (!!RfOp) {
      if (!!ClOp) {
        rfV = [RfOp![1]];
        if (rfV! > ClOp![1]) rfV! = ClOp![1];
        RfSum! += math.itof(stocks) * rfV!;
      }
    } else {
      arr.push(Errs, "References of " + nk + " not found");
    }
  }

  tbYear = profitsDb.investorYears()[0];
  if (year != tbYear)
    profitsDb.write(year, profitsEntry.new(today, 0.0, 0.0, 0.0));

  prff = \val -> return val + L.cash + L.equity;;

  Entries = profitsDb.read(year);
  :profitsEntry e = arr.pop(Entries);
  newE = profitsEntry.new(
    today, prff(PrSum!), prff(AccSum!), prff(RfSum!)
  );
  if (e.date != today) arr.push(Entries, e);
  arr.push(Entries, newE);
  profitsDb.write(year, Entries);

  return Errs;
};
