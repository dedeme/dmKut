// Copyright 12-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Scheduler

import "libdm/log";
import "db";
import "db/calendarTb";
import "db/activityTb";
import "db/cosTb";
import "db/investorTb";
import "db/svCodesTb";
import "db/ibexTb";
import "db/trading/closesTb";
import "db/trading/refsTb";
import "db/acc/diariesDb";
import "db/acc/profitsDb";
import "db/daily/cosSelTb";
import "data/cts";
import "data/qsprRs";
import "data/ibex";
import "data/calendar/calendar";
import "data/co/cosT";
import "data/co/co";
import "data/activity";
import "data/acc/opr";
import "data/acc/ann";
import "data/acc/ldg";
import "data/acc/annsTb";
import "data/acc/settlement";
import "data/qs/qsv";
import "data/svs/ibexSv";
import "data/svs/bmania";
import "data/chart/profitsEntry";
import "qspr";

// If it fails, returns "". The found PID must be different to pid.
// \s -> s
getPid = \pid -> {
  R = sys.cmd("ps", ["-x"]);
  if (!R[1]) return "";

  cmd = "kutmkt /dm/dmKut/app/KtWebPrgs/cmarket/main start";
  for (prg = str.splitTrim(R!, "\n")) {
    if (str.index(prg, cmd) != -1) {
      ix = str.index(prg, " ");
      if (ix != -1) {
        r = prg[:ix];
        if (r != pid) return r;
      }
    }
  }
  return "";
};

/// \s -> <qsprRs<qs>>
ibexHistoricUpdate = \mainNick -> {
  :cosT cos = cosTb.read();

  :qsprRs rs = qspr.updateIbexHistoric(cos.main);

  CodesRs = ibexSv.readComponents();
  if (!CodesRs[1]) {
    log.error("Reading Ibex components: " + CodesRs!);
    rs.withError = true;
    return rs;
  }
  Codes = CodesRs!;

  BmaniaCodes = svCodesTb.read(qsv.id(bmania.new()));
  Nicks = []; // [s.]
  for (code = Codes){
    NkOp = [];
    for (nk, cd = BmaniaCodes) {
      if (cd == code) {
        arr.push(NkOp, nk);
        break;
      }
    }
    if (!NkOp) {
      log.error("Reading Ibex components: Unknown company code " + code);
      rs.withError = true;
      return rs;
    }

    arr.push(Nicks, NkOp!);
  }

  :ibex ibexT = ibexTb.read();
  ibexT.Cos = Nicks;
  ibexTb.write(ibexT);

  for (nk = Nicks) {
    cOp = arr.find(cos.Cos, \:co c -> return c.nick == nk;);
    if (!cOp) {
      log.error("Reading Ibex components: " + nk +
        " in server not found in companies data base");
      rs.withError = true;
      return rs;
    }
    :co c = cOp!;
    if (!c.isSelected) {
      log.warning("Reading Ibex components: Ibex company " + nk + " not selected");
      rs.withWarnings = true;
    }
  }

  for (:co c = cos.Cos) {
    if (c.isSelected & !arr.any(Nicks, \n -> return n == c.nick;)) {
      log.warning("Reading Ibex components: Selectd company " + c.nick +
        " not in Ibex");
      rs.withWarnings = true;
    }
  }

  return rs;
};

/// \ -> ()
historicUpdate = \ -> {
  log.warning("Historic update");

  :cosT cos = cosTb.read();
  SelCos = arr.filter(cos.Cos, \:co c -> return c.isSelected;);

  // Update historic.
  :qsprRs r0 = qspr.updateHistoric(
    "Updating historic of main company " + cos.main, cos.main, cos.main
  );
  if (r0.withError)
    log.error("Fail reading main company " + cos.main);
  else
    for (:co c = cos.Cos)
      qspr.updateHistoric(
        "Updating historic of " + c.nick, cos.main, c.nick)
      ;

  // Update ibex (Must be called after 'qspr.updateHistoric')
  ibexHistoricUpdate(cos.main);

  // Update investors.
  investorTb.update();

  // Clean Closes
  Closes = closesTb.read();
  for (nk = dic.keys(Closes))
    if (
      !arr.any(SelCos, \:co c -> return c.nick == nk;) &
      !arr.any(cts.IxNicks, \i -> return i == nk;)
    ) dic.remove(Closes, nk);
  closesTb.write(Closes);

  // Clean Refs
  Refs = refsTb.read();
  for (nk = dic.keys(Refs))
    if (!arr.any(SelCos, \:co c -> return c.nick == nk;)) dic.remove(Refs, nk);
  refsTb.write(Refs);

  // Clean daily charts selected companies
  cosSelTb.write(arr.filter(
    cosSelTb.read(),
    \nk -> return arr.any(SelCos, \:co c -> return c.nick == nk;);
  ));

  // Update Closes and Refs
  for (:co c = SelCos) {
    err = qspr.updateClosesAndRefs(c.nick);
    if (err != "") log.error(err);
  }
  // Update indexes
  for (nk = cts.IxNicks) {
    err = qspr.updateClosesAndRefs(nk);
    if (err != "") log.error(err);
  }

  qspr.updateOperations();
};

// \ -> ()
dailyUpdate = \ -> {
  err = qspr.updateDailyCloses();
  if (err != "") log.error(err);

  qspr.updateDailyCharts();

  Errs = qspr.updateHistoricProfits();
  for (E = Errs) log.error(E);
};

/// \ -> ()
dailyActivate = \ -> { // Include dailyUpdate
  log.warning("Daily activate");

  investorTb.update();
  :cosT cos = cosTb.read();
  // Update Closes and Refs
  SelCos = arr.filter(cos.Cos, \:co c -> return c.isSelected;);
  for (:co c = SelCos) {
    err = qspr.updateClosesAndRefs(c.nick);
    if (err != "") log.error(err);
  }
  qspr.createDailyCharts();
  dailyUpdate();
};

// \ -> ()
dailyDeactivate = \ -> {
  log.warning("Daily deactivate");

  investorTb.update();
  qspr.updateOperations();
};

// \ -> ()
closeAccountingYear = \ -> {
  currentYear = math.itos(time.year(time.now()));
  dataYear = diariesDb.investorYears()[0];
  if (dataYear != currentYear) {
    Anns = diariesDb.investorAnns(dataYear);
    :settlement set = ann.mkSettlement(Anns);
    if (!!set.Errors) {
      for (e = set.Errors) log.error(e);
      log.error("Can not change accounting year");
      return;
    }

    date = currentYear + "0101";
    NewTable = annsTb.new();
    annsTb.add(NewTable, ann.new(
      -1, date, opr.newIn(set.ledger[ldg.cash])
    ));
    for (nick, StPf = set.Portfolio)
      annsTb.add(NewTable, ann.new(
        -1, date, opr.newSt(nick, StPf[0], StPf[1])
      ));
    diariesDb.write(currentYear, NewTable);
  }

  dataYear2 = profitsDb.investorYears()[0];
  if (dataYear2 != currentYear) {
    :profitsEntry e = arr.peek(profitsDb.read(dataYear2));
    profitsDb.write(
      currentYear,
      [profitsEntry.new(currentYear + "0101", e.total, e.acc, e.risk)]
    );
  }
};

/// Starts server.
/// \ -> ()
start = \ -> {
  pid1 = getPid("*");
  pid = getPid(pid1);
  if (pid != "") {
    sys.println("Server is already running");
    return;
  }

  closeAccountingYear();

  while () {
    Cal = calendarTb.read();
    now = time.now();
    tmSleep = calendar.isTimeToWatch(Cal, now)
      ? cts.schedulerWatchingTime
      : cts.schedulerSleepTime
    ;

    :activity act = activityTb.read();
    if (
      ( time.toStr(act.tm) != time.toStr(now) |
        time.hour(act.tm) <= cts.actHistoricStart
      ) & time.hour(now) > cts.actHistoricStart
    ) {
      historicUpdate();
      activityTb.write(activity.newNow(cts.actSleeping));
      continue;
    }

    if (calendar.isMarketDay(Cal, now)) {
      if (act.activity == cts.actSleeping) {
        if (calendar.isOpen(Cal, now)) {
          dailyActivate();
          activityTb.write(activity.newNow(cts.actActive));
        } else if (time.hour(act.tm) < 12 & time.hour(now) > 12) {
          dailyActivate();
          dailyDeactivate();
          activityTb.write(activity.newNow(cts.actSleeping));
        }
      } else {
        dailyUpdate();
        if (!calendar.isOpen(Cal, now)) {
          dailyDeactivate();
          activityTb.write(activity.newNow(cts.actSleeping));
        }
      }
    }

    sys.sleep(tmSleep);
  }
};

/// Stops server
/// \ -> ()
stop = \ -> {
  pid = getPid("*");
  if (pid == "") {
    sys.println("Proccess 'cmarket' not found");
    return;
  }

  if (!db.lock()) {
    sys.println("Date base locked when stopping");
    return;
  }

  ok = sys.cmd("kill", [pid])[1];

  db.unlock();

  if (ok) sys.println("cmarket stoped");
  else sys.println("cmarket could not be stopped");
};
