// Copyright 26-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Data base

import "libdm/log";
import "libmkt/qs";
import "libmkt/quotes2";
import "libmkt/models";
import "libmkt/model";
import "data/cts";
import "data/modelEval";
import "update";

// s
quotesTbPath = path.cat([cts.dataPath, "quotes.tb"]);

// \s -> s
evalsTbPath = \modelId -> return path.cat(
    [cts.dataPath, "evals", modelId + ".tb"]
  );;

/// \ -> ()
init = \ -> {
  if (!file.exists(cts.dataPath)) {
    file.mkdir(cts.dataPath);
    file.mkdir(path.cat([cts.dataPath, "evals"]));

    log.init(path.cat([cts.dataPath, "log.tb"]));
    writeQuotes(updateQuotes());
  }

  log.init(path.cat([cts.dataPath, "log.tb"]));
  Update = [false];
  for (:model md = models.list()) {
    mdId = md.id;
    if (!file.exists(evalsTbPath(mdId))) {
      writeEvals(mdId, modelEval.newTb("11111111", []));
      Update! = true;
    }
  }
  if (Update!) update.run();
};

/// Read CMarket quotes.
/// \b -> <quotes>
updateQuotes = \ -> {
  dataPath = cts.cmarketDataPath;
  qpath = path.cat([dataPath, "quotes"]);
  ibexT = js.r(file.read(path.cat([dataPath, "ibex.tb"])));
  Cos = ibexT[0];
  arr.sort(Cos, \c1, c2 -> return c1 < c2;);

  return quotes2.read(qpath, Cos);
};

/// Returns the last quote read by cmarket or throws an exception if such date
/// can not be read.
/// \ -> s
lastSourceDate = \ -> {
  dataPath = cts.cmarketDataPath;
  cosT = js.r(file.read(path.cat([dataPath, "cos.tb"])));
  main = cosT[0];
  qts = file.read(path.cat([dataPath, "quotes", main + ".tb"]));
  date = qts[0:str.index(qts, ":")];
  if (!time.fromStr(date)) sys.throw("Bad date: " + date); // testing date.
  return date;
};

/// Read quotes from "quotes.tb".
/// \ -> <quotes>
readQuotes = \ -> return quotes2.fromJs(js.r(file.read(quotesTbPath)));;

/// Writes quotes to 'quotes.tb"
/// \<quotes> -> ()
writeQuotes = \qts -> file.write(quotesTbPath, js.w(quotes2.toJs(qts)));;

/// Read evaluations from "evals/MODEL_ID.tb".
/// \s -> <modelEvalTb>
readEvals = \modelId ->
  return modelEval.tbFromJs(js.r(file.read(evalsTbPath(modelId))));;

/// Write evaluations to "evals/MODEL_ID.tb".
/// \s, <modelEvalTb> -> ()
writeEvals = \modelId, EvalsTb ->
  file.write(evalsTbPath(modelId), js.w(modelEval.tbToJs(EvalsTb)));;
