// Copyright 27-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Company charts page.

import "KtWeb/rp";
import "libmkt/models";
import "libmkt/quotes2";
import "libmkt/order";
import "libmkt/strategy";
import "libmkt/stRs";
import "libmkt/cts";
import "data/result";
import "data/modelEval";
import "data/jsModel";
import "db";

/// \m -> ()
process = \Rq -> {
  switch (Rq.rq) {
    "idata": {
      mdId = Rq.modelId;
      PParams = Rq.params; // [[f...]]|[]
      MMd = models.get(mdId);
      if (!MMd) {
        sys.print(rp.mk({ok: false}));
        return;
      }
      md = MMd!;

      Evals = db.readEvals(mdId).evals;
      EEval = !!PParams
        ? modelEval.get(Evals, PParams!)
        : [modelEval.best(Evals)]
      ;
      if (!EEval) {
        sys.print(rp.mk({ok: false}));
        return;
      }
      Eval = EEval!;
      :quotes2 qts = db.readQuotes();
      :stRs StrgRs = strategy.open(md, qts, Eval.params);

      Dates = qts.Dates;
      dSize = arr.size(Dates);
      noLossM = cts.noLossMultiplicator;
      Pf = {}; // {f.} :: {nick -> price}
      BuyCos = arr.new(dSize, 0);
      QuarantineCos = arr.new(dSize, 0);
      Orders = StrgRs.Orders;
      oSize = arr.size(Orders);
      if (!!Orders) {
        iOV = [0];
        OV = [Orders[iOV!]];
        oDateV = [OV![order.date]];
        for (i, d = Dates) {
          while(oDateV! <= d & iOV! < oSize) {
            :order o = OV!;
            if (o.type == cts.orderBuy) {
              dic.put(Pf, o.nick, o.price);
            } else {
              bprice = Pf[o.nick];
              dic.remove(Pf, o.nick);
              days = o.price >= bprice * noLossM ? 0 : cts.daysLoss;
              end0 = i + days;
              end = end0 >= dSize ? dSize : end0;
              for (j = i:end) QuarantineCos[j] += 1;
            }
            iOV! += 1;
            if (iOV! < oSize) {
              OV! = Orders[iOV!];
              oDateV! = OV![order.date];
            }
          }
          BuyCos[i] = dic.size(Pf);
        }
      }

      sys.print(rp.mk({
        ok: true,
        model: jsModel.toJs(models.get(mdId)!),
        result: result.toJs(result.new(
            arr.peek(StrgRs.Hassets),
            arr.reduce(StrgRs.Profits, 0.0, \r, e -> return r + e;) /
              math.itof(arr.size(StrgRs.Profits)),
            math.itof(order.sales(StrgRs.Orders))
          )),
        eval: modelEval.toJs(Eval),
        dates: Dates,
        assets: StrgRs.Hassets,
        withdrawals: StrgRs.Hwithdrawals,
        buyCos: arr.map(BuyCos, math.itof),
        quarantineCos: arr.map(QuarantineCos, math.itof)
      }));
    }
    default: sys.throw("Value of rq (" + Rq.rq + ") is not valid");
  }
};
