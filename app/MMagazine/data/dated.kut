// Copyright 28-Mar-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// <Dated> is a map with a key "date"  which hold a date in format "YYYYMMDD"

/// Adds a new element in place to and regularize 'a'.
///   'A': Sorted array by date, from after to before.
///   'E': Dated element to add.
/// \[<Dated>...], <Dated> -> [<Dated>...]
add = \A, E -> {
  // \[<Dated...] -> ()
  regularize =  \A -> {
    // \s, s -> b
    eqYear = \d1, d2 -> return d1[0:4] == d2[0:4];;
    // \s, s -> b
    eqMonth = \d1, d2 -> return d1[0:6] == d2[0:6];;

    today = time.now();
    lastSunday = time.addDays(today, -time.weekday(today));
    topMonthly = time.addDays(lastSunday, -56);
    tMonthly = time.toStr(topMonthly);
    tYearly = time.toStr(
      time.newDate(1, time.month(topMonthly), time.year(topMonthly) - 1)
    );

    Rs = [];
    Last = [""];
    for (D = A) {
      if (D.date > tMonthly) arr.push(Rs, D);
      else if (D.date < tYearly) {
        if (!eqYear(D.date, Last!)) arr.push(Rs, D);
      }
      else {
        if (!eqMonth(D.date, Last!)) arr.push(Rs, D);
      }

      Last! = D.date;
    }

    arr.clear(A);
    for (D = Rs) arr.push(A, D);
  };

  if (A[0].date == E.date) A[0] = E;
  else {
    arr.unshift(A, E);
    regularize(A);
  }
  return A;
};

