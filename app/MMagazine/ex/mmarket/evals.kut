// Copyright 01-Apr-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Retrieves evaluation data from MMarket.

import "data/modelEval";
import "data/paramsEval";
import "data/mmarket/mModelEval";

dir = "/home/deme/.dmCApp/MMarket/data/evals";

// s -> s
fpath = \model -> return path.cat([dir, model + ".tb"]);;

/// Returns model list.
/// \-> [s...]
list = \-> return arr.mp(
  arr.filter(
    file.dir(dir),
    \f -> return str.ends(f, ".tb");
  ),
  \f -> return f[:-3];
);;

/// Returns the best result of each model.
/// \-> [<ModelEval>...]
ranking = \-> {
  // \s -> <ModelEval>
  lastBest = \f -> {
    model = f[:-3];
    fpath = path.cat([dir, f]);
    Rk = arr.mp(
      js.ra(js.ra(file.read(fpath))[1]),
      \e -> return mModelEval.fromJs(e);
    );

    hvalue = mModelEval.hvalue;
    return modelEval.new(
      model,
      math.toInt(math.round(
        arr.reduce(
          Rk,
          0.0,
          \r, e -> return e[hvalue] > r ? e[hvalue] : r;
        ) * 100000.0,
        0
      ))
    );
  };

  return arr.mp(
    arr.filter(
      file.dir(dir),
      \f -> return str.ends(f, ".tb");
    ),
    \f -> return lastBest(f);
  );
};

/// Returns parameters and evaluations of a model.
///   model: Model identifier.
/// \s -> [<paramEval>...]
paramsEvals = \model -> {
  fpath = fpath(model);
  return arr.mp(
    js.ra(js.ra(file.read(fpath))[1]),
    \e -> {
      params = mModelEval.params;
      hvalue = mModelEval.hvalue;
      Ev = mModelEval.fromJs(e);
      return paramsEval.new(
        Ev[params], math.toInt(math.round(Ev[hvalue] * 100_000.0, 0))
      );
    }
  );
};

