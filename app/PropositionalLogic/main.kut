// Copyright 31-Jul-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Program start

import "dm/cgi";
import "cts";
import "deductionPg";
import "theoremsPg";
import "db";

help = "Usage: PropositionalLogic [test | help | <request>]";

/// Application test
test = \-> {
  sys.println("No test done");
};

/// Process a web request.
process = \rq -> {
  ix = str.index(rq, ":");

  // CONNECTION --------------------------------------------------------------

  if (ix == -1) {
    sys.print(cgi.connect(rq));
    return;
  }

  // AUTHENTICATION ----------------------------------------------------------

  if (ix == 0) {
    key = cryp.key(cts.appName, cgi.klen);
    data = cryp.decode(key, rq[1:]);
    Ps = str.split(data, ":");
    sys.print(cgi.authentication(key, Ps[0], Ps[1], Ps[2] == "1"));
    return;
  }

  // NORMAL DATA -------------------------------------------------------------

  sessionId = rq[:ix];
  ConKey = [""];
  Rest = [rq[ix + 1:]];
  ix2 = str.index(Rest!, ":");
  if (ix2 != -1) {
    ConKey! = Rest![:ix2];
    Rest! = Rest![ix2 + 1:];
  }
  ComKey = cgi.getComKey(sessionId, ConKey!);
  if (arr.size(ComKey) == 0) {
    sys.print(cgi.rpExpired());
  } else {
    j = cryp.decode(ComKey!, Rest!);
    Data = js.ro(j);
    sys.print(processHub(Data));
  }
};

// \m -> s
processMain = \Rq -> {
  rq = js.rs(Rq.rq);
  switch (rq) {
    "close": {
      sessionId = js.rs(Rq.sessionId);
      cgi.delSession(sessionId);
      return cgi.rpEmpty();
    }
    default: sys.fail("Value of rq (" + rq + ") is not valid");
  };
};

// \m -> s
processHub = \Rq -> {
  source = js.rs(Rq.source);
  switch (source) {
    "ChangePass": {
      user = js.rs(Rq.user);
      old = js.rs(Rq.old);
      new = js.rs(Rq.new);
      return cgi.changePass(user, old, new);
    }
    "Main": return processMain(Rq);
    "Deduction": return deductionPg.process(Rq);
    "Theorems": return theoremsPg.process(Rq);
    default: sys.fail("Value of source (" + source + ") is not valid");
  };
};


args = sys.args();
if (arr.size(args) != 1) {
  sys.println(help);
  return;
}

rq = sys.args()[0];
if (!map.hasKey(sys.environ(), "USER")) {
  cgi.init(cts.webHome, 900);
  process(rq);
} else {
  switch (rq) {
    "test": test();
    default: sys.println(help);
  }
}
