// Copyright 06-Jan-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Result of match can continue.
more = 0;
/// Result of draw end.
draw = 1;
/// Result of win end.
win = 2;

/// Create a new board
/// \ -> <board>
new = \-> return [
    "       ",
    "       ",
    "       ",
    "       ",
    "       ",
    "       "
  ];;

//  Board position value (returns "O", "X", " " or "")
//  \<board>, i, i -> s
checkerAt = \B, row, col ->
  return row >= 0 & row < 6 & col >= 0 & col < 7 ? B[row][col] : "";
;


/// Puts a checker in a column of boar and returns its result.
/// Values for column are 0, 1, 2, 3, 4, 5 or 6.
/// The result can be:
///   board.more -> The match is not finished.
///   board.draw -> The match has finished with draw.
///   board.win -> The match has finised with win.
/// If the column is full or column is out of limits, a fail 'out of range'
/// is raised.
/// \<board>, i, b -> i
put = \B, column, isWhite -> {
    checker = isWhite ? "O": "X";
    Row = [5];
    for (r, i = B) {
      if (r[column] != " ") {
        Row! = i - 1;
        break;
      }
    }
    row = Row!;
    r = B[row];
    B[row] = r[:column] + checker + r[column + 1:];

    check = \x, y -> return checkerAt(B, row + x, column + y) == checker;;

    if (check(-1, -1)) {
      if (check(-2, -2)) {
        if (check(-3, -3)) return win;
        if (check(1, 1)) return win;
      } else {
        if (check(1, 1) & check(2, 2)) return win;
      }
    } else {
      if (check(1, 1) & check(2, 2) & check(3, 3)) return win;
    }

    if (check(-1, 1)) {
      if (check(-2, 2)) {
        if (check(-3, 3)) return win;
        if (check(1, -1)) return win;
      } else {
        if (check(1, -1) & check(2, -2)) return win;
      }
    } else {
      if (check(1, -1) & check(2, -2) & check(3, -3)) return win;
    }

    if (check(0, -1)) {
      if (check(0, -2)) {
        if (check(0, -3)) return win;
        if (check(0, 1)) return win;
      } else {
        if (check(0, 1) & check(0, 2)) return win;
      }
    } else {
      if (check(0, 1) & check(0, 2) & check(0, 3)) return win;
    }

    if (check(1, 0) & check(2, 0) & check(3, 0)) return win;

    if (str.index(B[0], " ") == -1) return draw;

    return more;

  };

/// Returns values of top row.
/// \<board> -> s
topRow = \B -> return B[0];;

/// \<board> -> s
toStr = \B -> return arr.join(
    arr.mp(
      str.split(arr.join(B, "\n"), "\n"),
      \r -> return "|" + arr.join(str.split(r, ""), "|") + "|";
    ),
    "\n"
  ) + "\n---------------\n 1 2 3 4 5 6 7";;

/// \<board> -> s
toJs = \B -> return js.wa(arr.mp(B, \r -> return js.ws(r);));;

/// \s -> <board>
fromJs = \j -> return arr.mp(js.ra(j), \rj -> return js.rs(rj););;

