// Copyright 08-Jan-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Movements (1-2-3-4-5-6-7 | 0)

import "data/board";

Bo = board.new();
MachineWhite = [true];
/// Human move.
/// Returns -1, 0, 1, 2, 3, 4, 5 or 6
/// \<board> -> i
human = \move -> {
  if (move < 0) {
    MachineWhite! = false;
  } else {
    board.put(Bo, move, MachineWhite!);
  }

  moves = [];
  for (c, i = str.split(board.topRow(Bo), ""))
    if (c == " ") arr.push(moves, math.toStr(i + 1));
  Move = [-1];
  while (Move! == -1) {
    sys.println(board.toStr(Bo));
    sys.print("Input your move " + arr.join(moves, ", ") + " or\n" +
      "0 to finish match: "
    );
    move = sys.readLine();
    if (move == "0") {
      Move! = 0;
    } else {
      for (m = moves) if (m == move) Move! = math.toInt(m);
    }
    if (Move! == -1)
      sys.println("Movement '" + move + "' is not valid.");
  }

  responseMove = Move! - 1;
  if (responseMove >= 0) board.put(Bo, responseMove, !MachineWhite!);

  return responseMove;
};

TrainerMove = [-1];
/// Training move.
trainer = \move -> {
trace move;
  TrainerMove! = move;
  R = [];
  thread.sync(\-> {
    while (TrainerMove! == -1) {
      sys.sleep(5);
    }
    arr.push(R, TrainerMove!);
trace(TrainerMove!);
    if (TrainerMove! >= 0) TrainerMove! = -1;
  });
  return R!;
};
