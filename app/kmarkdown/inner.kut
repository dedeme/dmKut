// Copyright 15-Mar-2022 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Processing of a 'non-top' text.

import "err";
import "prpmarks";

/// Look for next symbols: '\\', '//', '##', '||', '__', '<{', '<(', '$',
/// '·', '&' and '<'.
///   Store: Array which will be modified in place, with next values:
///     0: Already read text.
///     1: Current mark.
///     2: Rest of text.
/// \[s, s, s] -> ()
cut = \Store -> {
  tx = Store[2];
  Ix = [-1];
  S = [""];
  update = \s -> {
    ix = str.index(tx, s);
    if (ix != -1 & (Ix! == -1 | ix < Ix!)) {
      S! = s;
      Ix! = ix;
    }
  };

  update("\\\\");
  update("//");
  update("##");
  update("<{");
  update("<(");
  update("$");
  update("||");
  update("__");
  update("·");
  update("&");
  update("<");

  if (Ix! != -1) {
    ix = Ix!;
    s = S!;
    Store[0] += tx[:ix];
    Store[1] = s;
    Store[2] = tx[ix + str.len(s):];
  } else {
    Store[0] += tx;
    Store[1] = "";
    Store[2] = "";
  }
};

/// Processes the following marks: '<{I', '<{i', '<{h' and '<{v'.
///   Store: Array which will be modified in place, with next values:
///     0: Already read text.
///     1: Current mark.
///     2: Rest of text.
/// \[s, s, s] -> ()
bracket = \Store -> {
  image = \withFrame -> {
    tx = Store[2][1:];
    ix = str.index(tx, "}>");
    if (ix == -1) {
      err.show("'" + (withFrame ? "<{I" : "<{i") + "' not closed", tx);
      Store[0] += "&lt;{";
      return;
    }
    Src = [tx[:ix]];
    N = [""];
    while () {
      if (Src! == "") break;
      ch = Src!!;
      if (ch >= "0" & ch <= "9") {
        N! += ch;
      } else {
        break;
      }
      Src! = Src![1:];
    }

    n = N!;
    size = n == "" ? "" : " style='width:" + n + "px' ";

    Src! = str.trim(Src!);
    if (Src! == "") {
      err.show("Image source is empty", tx);
      Store[0] += "&lt;{";
      return;
    }
    if (str.index(Src!, ".") == -1) Src! = Src! + ".png";
    if (str.index(Src!, "/") == -1) Src! = path.cat(["img", Src!]);
    class = withFrame ? " class='kmd-fm' " : "";

    Store[0] += "<img src='" + Src! + "'" + class + size + ">";
    Store[2] = tx[ix + 2:];
  };

  hyper = \-> {
    tx = Store[2][1:];
    ix = str.index(tx, "}>");
    if (ix == -1) {
      err.show("Empty hyperlink", tx);
      Store[0] += "&lt;{";
      return;
    }

    Hyp = [str.trim(tx[1:ix])];
    if (Hyp! == "") {
      err.show("Empty hyperlink", tx);
      Store[0] += "&lt;{";
      return;
    }
    Hyp! = regex.replace(Hyp!, "\\s", " ");

    Rest = [""];
    ix2 = str.index(Hyp!, " ");
    if (ix2 != -1) {
      Rest! = str.ltrim(Hyp![ix2 + 1:]);
      Hyp! = Hyp![:ix2];
    }
    if (str.index(Hyp!, '"') != -1 & Hyp! != "\"\"") {
      err.show("Hyperlink contains quotes", tx);
      Store[0] += "&lt;{";
      return;
    }
    if (Rest! == "" & Hyp! != "\"\"") {
      Rest! = path.base(Hyp!);
      ix = str.lastIndex(Rest!, ".");
      if (ix > 0) Rest! = Rest![:ix];
    }
    if (Rest! == "") {
      err.show("Hyperlink label is missing", tx);
      Store[0] += "&lt;{";
      return;
    }
    if (Hyp! == "\"\"") Hyp! = "";

    Store[0] += "<a href='" + Hyp! + "'>" + Rest! + "</a>" ;
    Store[2] = tx[ix + 2:];
  };

  verb = \-> {
    tx = Store[2][1:];
    ix = str.index(tx, "}>");
    if (ix == -1) {
      err.show("'<{v' not closed", tx);
      Store[0] += "&lt;{";
      return;
    }
    Store[0] += tx[:ix];
    Store[2] = tx[ix + 2:];
  };

  // ---------------------------------------

  tx = Store[2];
  if (str.starts(tx, "i")) image(false);
  else if (str.starts(tx, "I")) image(true);
  else if (str.starts(tx, "h")) hyper();
  else if (str.starts(tx, "v")) verb();
  else Store[0] += "&lt;{";
};

/// Processes '$' mark (MathJax functions).
///   Store: Array which will be modified in place, with next values:
///     0: Already read text.
///     1: Current mark.
///     2: Rest of text.
/// \[s, s, s] -> ()
dolar = \Store -> {
  tx = Store[2];
  if (str.starts(tx, "$")) {
    ix = str.index(tx, "$$");
    if (ix == -1) {
      err.show("'$$' not closed", tx);
      Store[0] += "$";
      return;
    }
    Store[0] += "$" + tx[:ix] + "$$";
    Store[2] = tx[ix + 2:];
    return;
  }
  ix = str.index(tx, "$");
  if (ix == -1) {
    err.show("'$' not closed", tx);
    Store[0] += "$";
    return;
  }
  Store[0] += "$" + tx[:ix] + "$";
  Store[2] = tx[ix + 1:];
};


/// Processes literal escaping.
///   Store: Array which will be modified in place, with next values:
///     0: Already read text.
///     1: Current mark.
///     2: Rest of text.
/// \[s, s, s] -> ()
paren = \Store -> {
  update = \s, n -> {
    Store[0] += s;
    Store[2] = Store[2][n:];
  };

  tx = Store[2];
  if (str.starts(tx, "$)>")) update("&#036;", 3);
  else if (str.starts(tx, "<)>")) update("&lt;", 3);
  else if (str.starts(tx, "&)>")) update("&amp;", 3);
  else if (str.starts(tx, "·)>")) update("·", 4);
  else if (str.starts(tx, "\\\\)>")) update("\\\\", 4);
  else if (str.starts(tx, "//)>")) update("//", 4);
  else if (str.starts(tx, "__)>")) update("__", 4);
  else if (str.starts(tx, "||)>")) update("||", 4);
  else if (str.starts(tx, "##)>")) update("##", 4);
  else Store[0] += "&lt;(";
};

/// Processes marks inside paragraphs.
///   tx: Paragraph text.
/// \s -> s
process = \tx -> {
  Store = ["", "", tx];
  Cursive = [false];
  Code = [false];
  Underline = [false];
  Frame = [false];
  while () {
    cut(Store);
    if (Store[1] == "") break;

    switch (Store[1]) {
      "\\\\" :  Store[0] = Store[0] + "<br>";
      "//"   :  {
                  Store[0] = Store[0] + (Cursive! ? "</i>" : "<i>");
                  Cursive! = !Cursive!;
                }
      "##"   :  {
                  Store[0] = Store[0] + (Code! ? "</code>" : "<code>");
                  Code! = !Code!;
                }
      "<{"   :  bracket(Store);
      "<("   :  paren(Store);
      "$"    :  dolar(Store);
      "__"   :  {
                  Store[0] = Store[0] + (Underline! ? "</u>" : "<u>");
                  Underline! = !Underline!;
                }
      "||"   :  {
                  Store[0] = Store[0] +
                    (Frame! ? "</span>" : "<span class='kmd-fm'>");
                  Frame! = !Frame!;
                }
      "·"    :  Store[0] = Store[0] + "&nbsp;";
      "&"    :  Store[0] = Store[0] + "&amp;";
      "<"    :  Store[0] = Store[0] + "&lt;";
      default: sys.fail("Unexpected value: " + Store[1]);
    }
  }

  return Store[0];
};

