// Copyright 16-Mar-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Metadata management.

import "err";

/// Creates a new book metadata.
///   book : Title of book or "".
///   pages: Array with pages metadata.
/// \s, [m...] -> m
newBook = \book, Pages -> return {
    "book": book,
    "pages": Pages
  };;

/// Creates a new page metadata.
///   fpage: File name without extension '.kmd'
///   title: Page title or "".
///   numbered: 'true' if headers '**' should be numbered.
///   withUp: 'true' if an up arrow is shown.
///   withDown: 'true' if an down arrow is shown.
/// \s, s, b, b, b -> m
newPage = \fpage, title, numbered, withUp, withDown -> return {
    "fpage": fpage,
    "title": title,
    "numbered": numbered,
    "withUp": withUp,
    "withDown": withDown
  };;

/// Returns [page metadata of file 'fpage'] or '[]' if it is not found.
///   pgMetas: Array with all the pages metadata.
///   fpage  : Page to search.
/// \[m...], s -> ([m] | [])
getCurrent = \PgMetas, fpage -> {
  for (PgMeta = PgMetas)
    if (PgMeta.fpage == fpage) return [PgMeta];
  return [];
};

/// Returns [page metadata of the file previous to 'fpage'] or '[]' if it is
/// not found.
///   pgMetas: Array with all the pages metadata.
///   fpage  : Page to search.
/// \[m...], s -> ([m] | [])
getPrevious = \PgMetas, fpage -> {
  for (PgMeta, i = PgMetas)
    if (PgMeta.fpage == fpage) return i > 0 ? [PgMetas[i - 1]] : [];
  return [];
};

/// Returns [page metadata of the file next to 'fpage'] or '[]' if it is
/// not found.
///   pgMetas: Array with all the pages metadata.
///   fpage  : Page to search.
/// \[m...], s -> ([m] | [])
getNext = \PgMetas, fpage -> {
  for (PgMeta, i = PgMetas)
    if (PgMeta.fpage == fpage)
      return i < arr.size(PgMetas) - 1 ? [PgMetas[i + 1]] : [];
  return [];
};

// DB -----------------------------

/// Returns a book metadata of a directory.
///   Fkmds: .kmd files of a directory.
/// \[s] -> m
read = \Fkmds -> {
  Book = [""];
  PgMetas = [];

  for (fkmd = Fkmds) {
    err.setFile(fkmd);

    PgMeta = newPage(fkmd[:-4], "", false, false, false);

    // Returns true for ending process.
    process = \line -> {
      l = str.trim(line);
      if (l == "") return false;
      if (l == "=") return true;

      if (l == "numbered") {
        PgMeta.numbered = true;
        return false;
      }

      if (l == "withUp") {
        PgMeta.withUp = true;
        return false;
      }

      if (l == "withDown") {
        PgMeta.withDown = true;
        return false;
      }

      ix = str.index(l, "=");
      if (ix == -1) {
        err.show("'=' is missing in metadada.", line);
        return true;
      }
      key = str.rtrim(l[:ix]);
      value = str.ltrim(l[ix + 1:]);
      switch (key) {
        "book": Book! = value;
        "title": PgMeta.title = value;
        default: {
          err.show("Wrong key in metadada.", line);
          return true;
        }
      }
      return false;
    };

    f = file.ropen(fkmd);
    L = file.readLine(f);
    if (!L | str.trim(L!) != "=") continue;
    while () {
      L = file.readLine(f);
      if (!L) break;
      if (process(L!)) break;
    }
    file.close(f);

    arr.push(PgMetas, PgMeta);
  }

  arr.sort(PgMetas, \p1, p2 -> return p1.fpage < p2.fpage;);
  return newBook(Book!, PgMetas);
};
