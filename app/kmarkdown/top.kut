// Copyright 15-Mar-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Processing of text at top of file.

import "prpmarks";
import "inner";
import "err";
import "prlist";
import "prdefinition";
import "prtable";
import "prcode";

Nheader = [-1];

/// Processes a 'top' paragraph.
///   isNumbered: 'true' if headers sould be numbered.
///   Hs        : Empty list of headers (h2) to populate.
///               Each entry has the form: 000Title, where '000' is a hyperlink
///               and Title is text.
///   tx        : Text to process.
/// \b, m, s -> s
processP = \isNumbered, Hs, tx -> {
  txt = str.trim(tx);
  if (txt == "") return "";
  if (str.starts(txt, "* ")) return prpmarks.h1(txt[2:]);
  if (str.starts(txt, "** ")) {
    Txt = [txt[3:]];
    if (isNumbered) Txt! = math.itos(Nheader!) + ". " + Txt!;
    nlink = ("00" + math.itos(Nheader!))[-3:];
    Txt! = inner.process(Txt!);
    arr.push(Hs, nlink + Txt!);

    Nheader! += 1;
    return "<h2 id='hp:" + nlink + "'>" + Txt! + "</h2>\n";
  }
  if (str.starts(txt, "*** ")) return prpmarks.h3(txt[4:]);
  if (str.starts(txt, "<|f")) return prpmarks.frame(txt[3:], false);
  if (str.starts(txt, "<|F")) return prpmarks.frame(txt[3:], true);
  if (str.starts(txt, "<|i")) return prpmarks.img(txt[3:], false);
  if (str.starts(txt, "<|I")) return prpmarks.img(txt[3:], true);
  if (str.starts(txt, "<|a")) return prpmarks.align(txt[3:], false);
  if (str.starts(txt, "<|A")) return prpmarks.align(txt[3:], true);
  return "<p>" + inner.process(txt) + "</p>\n";
};

/// Processes text at top of file.
///   numbered: 'true' if headers sould be numbered.
///   Hs       : Empty list of headers (h2) to populate.
///              Each entry has the form: 000Title, where '000' is a hyperlink
///              and Title is text.
///   tx       : Text to process.
/// \b, m, s -> s
process = \numbered, Hs, tx -> {
  Tx = [str.trim(tx)];
  Ps = [];
  Nheader! = 1;
  if (str.starts(Tx!, "=\n")) {
    ix = str.index(Tx!, "\n=");
    if (ix == -1 | (str.len(Tx!) > ix + 2 & Tx![ix + 2] != "\n")) {
      err.show("End of metadata ('=') is missing.", Tx!);
      return "";
    }
    Tx! = str.ltrim(Tx![ix + 2:]);
  }
  while () {
    tx = Tx!;
    if (str.starts(tx, "<{l")) {
      ix = str.index(tx, "\n}>");
      if (ix == -1) {
        err.show("'<{l' without closing.", tx);
        break;
      }
      arr.push(Ps, prlist.process(tx[3:ix]));
      Tx! = str.ltrim(tx[ix + 3:]);
      continue;
    }
    if (str.starts(tx, "<{d")) {
      ix = str.index(tx, "\n}>");
      if (ix == -1) {
        err.show("'<{d' without closing.", tx);
        break;
      }
      arr.push(Ps, prdefinition.process(tx[3:ix]));
      Tx! = str.ltrim(tx[ix + 3:]);
      continue;
    }
    if (str.starts(tx, "<{t")) {
      ix = str.index(tx, "\n}>");
      if (ix == -1) {
        err.show("'<{t' without closing.", tx);
        break;
      }
      arr.push(Ps, prtable.process(tx[3:ix], false));
      Tx! = str.ltrim(tx[ix + 3:]);
      continue;
    }
    if (str.starts(tx, "<{T")) {
      ix = str.index(tx, "\n}>");
      if (ix == -1) {
        err.show("'<{T' without closing.", tx);
        break;
      }
      arr.push(Ps, prtable.process(tx[3:ix], true));
      Tx! = str.ltrim(tx[ix + 3:]);
      continue;
    }
    if (str.starts(tx, "<{c")) {
      ix = str.index(tx, "\n}>");
      if (ix == -1) {
        err.show("'<{c' without closing.", tx);
        break;
      }
      arr.push(Ps, prcode.process(tx[3:ix], false));
      Tx! = str.ltrim(tx[ix + 3:]);
      continue;
    }
    if (str.starts(tx, "<{C")) {
      ix = str.index(tx, "\n}>");
      if (ix == -1) {
        err.show("'<{c' without closing.", tx);
        break;
      }
      arr.push(Ps, prcode.process(tx[3:ix], true));
      Tx! = str.ltrim(tx[ix + 3:]);
      continue;
    }
    if (str.starts(tx, "<{V")) {
      ix = str.index(tx, "\n}>");
      if (ix == -1) {
        err.show("'<{T' without closing.", tx);
        break;
      }
      arr.push(Ps, str.trim(tx[3:ix]));
      Tx! = str.ltrim(tx[ix + 3:]);
      continue;
    }

    ix = str.index(tx, "\n\n");
    if (ix == -1) {
      arr.push(Ps, processP(numbered, Hs, tx));
      break;
    }
    arr.push(Ps, processP(numbered, Hs, tx[:ix]));
    Tx! = str.ltrim(tx[ix + 2:]);
  }
  return arr.join(Ps, "");
};

