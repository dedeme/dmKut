// Code generated by mkBuiltC.

/// Built-in C header.
/// s
code = """
  #define GC_THREADS
  #define __STDC_WANT_LIB_EXT2__ 1  //Define for asprintf
  #define _GNU_SOURCE // Need for environ

  #define TRUE 1
  #define FALSE 0
  #define MALLOC(type) (type *)GC_MALLOC(sizeof(type))
  #define ATOMIC(size) GC_MALLOC_ATOMIC(size)
  #define REPEAT(n) { \
    int __i = (n) + 1; \
    while (--__i) {
  #define _REPEAT }}
  #define RANGE0(i, end) { \
    int __end = end; \
    int i = -1; \
    while (++i < __end) {
  #define RANGE(i, begin, end) { \
    int __end = end; \
    int i = (begin) - 1; \
    while (++i < __end) {
  #define _RANGE }}
  #define EACH(a, type, e) { \
    Arr *__a = (Arr *)a; \
    void **__p = arr_begin(__a); \
    void **__pend = arr_end(__a); \
    type *e; \
    int _i = -1; \
    while(__p < __pend) { \
      ++_i; \
      e = *__p++;
  #define EACHR(a, type, e) { \
    Arr *__a = (Arr *)a; \
    void **__p = arr_end(__a); \
    void **__pstart = arr_begin(__a); \
    type *e; \
    int _i = arr_size(__a); \
    while(__p > __pstart) { \
      --_i; \
      e = *(--__p);
  #define _EACH }}
  #define TRY { \
    jmp_buf *__TRY_buf = MALLOC(jmp_buf); \
    exc_add(__TRY_buf); \
    if (!setjmp(*__TRY_buf)) {
  #define CATCH(e) ;exc_remove();} else { exc_remove(); Exc *e = exc_get();
  #define _TRY }}
  #define THROW(type, msg) \
      exc_throw(type, msg, __FILE__, (char *)__func__, __LINE__)
  #define EXC_GENERIC(msg) \
    THROW(exc_generic_t, msg)
  #define EXC_RANGE(value, min, max) { \
      int __v = value; \
      int __min = min; \
      int __max = max; \
      if (__v < __min || __v > __max) \
        THROW(exc_range_t, exc_range(__min, __max, __v)); \
    }
  #define EXC_ILLEGAL_ARGUMENT(msg, expected, actual) \
    THROW(exc_illegal_argument_t, exc_illegal_argument(msg, expected, actual))
  #define EXC_ILLEGAL_STATE(msg) \
    THROW(exc_illegal_state_t, msg)
  #define EXC_IO(msg) \
    THROW(exc_io_t, msg)
  #define TEST(actual, expected) { \
      char *__actual = actual; \
      char *__expected = expected; \
      if (strcmp(__actual, __expected)) \
      EXC_ILLEGAL_ARGUMENT("Test failed", __expected, __actual); \
    }
  #define TESTI(actual, expected) { \
      char *__sactual = str_f("%d", actual); \
      char *__sexpected = str_f("%d", expected); \
      if (strcmp(__sactual, __sexpected)) \
      EXC_ILLEGAL_ARGUMENT("Test failed", __sexpected, __sactual); \
    }
  #define TESTF(actual, expected) { \
      char *__sactual = str_f("%.10f", (double)actual); \
      char *__sexpected = str_f("%.10f", (double)expected); \
      if (strcmp(__sactual, __sexpected)) \
      EXC_ILLEGAL_ARGUMENT("Test failed", __sexpected, __sactual); \
    }
  #define exc_generic_t "generic"
  #define exc_range_t "range"
  #define exc_illegal_argument_t "argument"
  #define exc_illegal_state_t "state"
  #define exc_io_t "io"

  #include <gc.h>
  #include <pthread.h>
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>
  #include <wctype.h>
  #include <ctype.h>
  #include <locale.h>
  #include <regex.h>
  #include <assert.h>
  #include <setjmp.h>
  #include <stdint.h>
  #include <time.h>
  #include <sys/time.h>
  #include <dirent.h>
  #include <errno.h>
  #include <dirent.h>
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <stdarg.h>
  #include <execinfo.h>
  #include <unistd.h>
  #include <limits.h>
  #include <float.h>
  #include <math.h>
  #include <sys/types.h>
  #include <pwd.h>
  #include <signal.h>
  #include <netdb.h>
  #include <arpa/inet.h>
  #include <sys/socket.h>
  #include <netinet/in.h>

  typedef void *(*FMAP)(void *);
  typedef int (*FEQ)(void *, void *);
  typedef void (*FPROC)(void *);
  typedef int (*FPRED)(void *);
  typedef char *(*FTO)(void *);
  typedef void *(*FFROM)(char *js);
  typedef struct opt_Opt Opt;
  typedef struct it_It It;
  typedef struct arr_Arr Arr;
  typedef struct bytes_Bytes Bytes;
  typedef struct buf_Buf Buf;
  typedef struct arr_Arr Arr;
  typedef struct exc_Exc Exc;
  typedef int64_t Time;
  typedef struct file_File File;
  typedef struct tp_Tp Tp;
  typedef struct tp3_Tp3 Tp3;
  typedef struct it_It It;
  typedef struct kv_Kv Kv;
  typedef struct arr_Map Map;
  typedef struct regex_RegexOffset RegexOffset;
  typedef struct rs_Rs Rs;
  typedef struct tcp_TcpServer TcpServer;
  typedef struct tcp_TcpConn TcpConn;

  //
  // thread.h ---------------------------------
  //
  pthread_t *thread_start (void (*fn)(void));
  pthread_t *thread_start2 (void (*fn)(void *), void *value);
  void thread_run (void (*fn)(void));
  void thread_run2 (void (*fn)(void *), void *value);
  void thread_join (pthread_t *thr);
  void thread_sync (void (*fn)(void));
  void thread_sync2 (void (*fn)(void *), void *value);
  //
  // opt.h ---------------------------------
  //
  Opt *opt_some (void *value);
  Opt *opt_none (void);
  void *opt_get (Opt *this);
  void *opt_eget (Opt *this);
  char *opt_to_js (Opt *this, char *(*to)(void *e));
  Opt *opt_from_js (char *js, void *(*from)(char *jse));
  //
  // arr.h ---------------------------------
  //
  Arr *arr_new (void);
  Arr *arr_new_bf (int buffer);
  Arr *arr_new_fill (void *e, int size);
  Arr *arr_new_from (void *e, ...);
  Arr *arr_new_c (int size, void **es);
  Arr *arr_copy (Arr *this);
  void **arr_begin (Arr *this);
  void **arr_end (Arr *this);
  int arr_size (Arr *this);
  int arr_empty (Arr *this);
  void *arr_get (Arr *this, int ix);
  void arr_push (Arr *this, void *e);
  void *arr_pop (Arr *this);
  void *arr_peek (Arr *this);
  void arr_set (Arr *this, int ix, void *e);
  void arr_insert (Arr *this, int ix, void *e);
  void arr_remove (Arr *this, int ix);
  void arr_cat (Arr *this, Arr *other);
  void arr_set_arr (Arr *this, int ix, Arr *other);
  void arr_set_range (Arr *this, int ix, Arr *other, int begin, int end);
  void arr_insert_arr (Arr *this, int ix, Arr *other);
  void arr_insert_range (Arr *this, int ix, Arr *other, int begin, int end);
  void arr_remove_range (Arr *this, int begin, int end);
  void arr_clear (Arr *this);
  void arr_reverse (Arr *this);
  void arr_sort (Arr *this, int (*greater)(void *e1, void *e2));
  void arr_shuffle (Arr *this);
  int arr_all (Arr *this, int (*pred)(void *e));
  int arr_any (Arr *this, int (*pred)(void *e));
  void arr_each(Arr *this, void (*fn)(void *e));
  void arr_each_ix(Arr *this, void (*fn)(void *e, int ix));
  int arr_eq(Arr *a1, Arr *a2, int (*feq)(void *e1, void *e2));
  int arr_index (Arr *this, int (*pred)(void *e));
  int arr_last_index (Arr *this, int (*pred)(void *e));
  Opt *arr_find(Arr *this, int (*pred)(void *e));
  Opt *arr_find_last(Arr *this, int (*pred)(void *e));
  void arr_filter_in (Arr *this, int (*pred)(void *e));
  Arr *arr_take (Arr *this, int n);
  Arr *arr_takef (Arr *this, int (*pred)(void *e));
  Arr *arr_drop (Arr *this, int n);
  Arr *arr_dropf (Arr *this, int (*pred)(void *e));
  Arr *arr_filter_to (Arr *this, int (*pred)(void *e));
  Arr *arr_map (Arr *this, void *(*converter)(void *e));
  Arr *arr_map2 (Arr *this, void *(*conv1)(void *e), void *(*conv2)(void *e));
  void *arr_reduce(Arr *this, void *seed, void *(*fn)(void *seed, void *elem));
  Arr *arr_zip (Arr *a1, Arr *a2, void *(*converter)(void *e1, void *e2));
  Arr *arr_zip3 (
    Arr *a1, Arr *a2, Arr *a3, void*(*converter)(void*e1, void*e2, void*e3)
  );
  Arr *arr_duplicates (Arr *this, int (feq)(void *e1, void *e2));
  char *arr_cjoin(Arr *a, char sep);
  char *arr_join(Arr *a, char *sep);
  It *arr_to_it (Arr *this);
  Arr *arr_from_it (It *it);
  char *arr_to_js (Arr *this, char *(*to)(void *e));
  Arr *arr_from_js (char *js, void *(*from)(char *ejs));
  //
  // bytes.h ---------------------------------
  //
  Bytes *bytes_new(void);
  Bytes *bytes_new_bf(int length);
  Bytes *bytes_from_bytes(unsigned char *bs, int length);
  Bytes *bytes_from_str(char *s);
  unsigned char *bytes_bs (Bytes *this);
  int bytes_len (Bytes *this);
  void bytes_add_bytes(Bytes *this, unsigned char *bs, int length);
  void bytes_add(Bytes *this, Bytes *another);
  void bytes_add_str(Bytes *this, char *s);
  char *bytes_to_str(Bytes *this);
  char *bytes_to_js(Bytes *this);
  Bytes *bytes_from_js(char *js);
  //
  // b64.h ---------------------------------
  //
  char *b64_decode(char *b64);
  Bytes *b64_decode_bytes(char *b64);
  char *b64_encode(char *s);
  char *b64_encode_bytes(Bytes *bs);
  //
  // buf.h ---------------------------------
  //
  Buf *buf_new (void);
  Buf *buf_new_bf (int buffer_size);
  char *buf_str (Buf *this);
  int buf_len (Buf *this);
  void buf_add_buf (Buf *this, char *data, int length);
  void buf_add(Buf *this, char *data);
  void buf_cadd(Buf *this, char data);
  void buf_reset(Buf *this);
  //
  // cryp.h ---------------------------------
  //
  char *cryp_genk (int lg);
  char *cryp_key (char *k, int lg);
  char *cryp_encode (char *k, char *s);
  char *cryp_decode (char *k, char *b64);
  //
  // exc.h ---------------------------------
  //
  char *exc_type (Exc *this);
  char *exc_msg (Exc *this);
  Arr *exc_stack (Exc *this);
  void exc_init ();
  void exc_thread_init (void);
  void exc_thread_end (void);
  void exc_add (jmp_buf *jump);
  Exc *exc_get(void);
  void exc_remove ();
  void exc_throw (
    char *type, char *message, char *file, char *func, int line
  );
  char *exc_range (int begin, int end, int index);
  char *exc_illegal_argument (char *msg, char *expected, char *actual);
  //
  // time.h ---------------------------------
  //
  Time time_now (void);
  Time time_new (int day, int month, int year);
  Time time_new_time (
    int day, int month, int year, int hour, int minute, int second
  );
  Time time_from_str (char *date);
  Time time_from_iso (char *date);
  Time time_from_us (char *date);
  Time time_from_iso_sep (char *date, char sep);
  Time time_from_us_sep (char *date, char sep);
  int time_day (Time this);
  int time_month (Time this);
  int time_year (Time this);
  int time_week_day (Time this);
  int time_year_day (Time this);
  int time_hour (Time this);
  int time_minute (Time this);
  int time_second (Time this);
  int time_millisecond (Time this);
  Time time_add (Time this, int days);
  int time_df (Time t1, Time t2);
  int time_eq (Time t1, Time t2);
  char *time_f (Time this, char *template);
  char *time_to_str (Time this);
  char *time_to_iso (Time this);
  char *time_to_us (Time this);
  //
  // file.h ---------------------------------
  //
  char *file_tmp (char *dir, char *path);
  char *file_wd (void);
  void file_cd (char *path);
  void file_mkdir (char *path);
  Arr *file_dir (char *path);
  void file_del (char *path);
  void file_rename (char *old_path, char *new_path);
  void file_link (char *path, char *link);
  int file_exists (char *path);
  int file_is_directory (char *path);
  int file_is_link (char *path);
  int file_is_regular (char *path);
  struct stat *file_info (char *path);
  int file_size(char *path);
  Time file_modified(char *path);
  char *file_read (char *path);
  void file_write (char *path, char *text);
  void file_append (char *path, char *text);
  void file_copy (char *source_path, char *target_path);
  File *file_ropen (char *path);
  File *file_wopen (char *path);
  File *file_aopen (char *path);
  char *file_read_line (File *lck);
  void file_write_text (File *lck, char *text);
  Bytes *file_read_bin_buf (File *lck, int buffer);
  Bytes *file_read_bin (File *lck);
  void file_write_bin (File *lck, Bytes *bs);
  void file_close (File *lck);
  //
  // tp.h ---------------------------------
  //
  Tp *tp_new (void *e1, void *e2);
  void *tp_e1 (Tp *this);
  void *tp_e2 (Tp *this);
  //
  // tp3.h ---------------------------------
  //
  Tp3 *tp3_new (void *e1, void *e2, void *e3);
  void *tp3_e1 (Tp3 *this);
  void *tp3_e2 (Tp3 *this);
  void *tp3_e3 (Tp3 *this);
  //
  // it.h ---------------------------------
  //
  It *it_new (void *o, Opt *(*next)(void *o));
  It *it_empty (void);
  It *it_unary (void *e);
  It *it_range (int begin, int end);
  It *it_range0 (int end);
  int it_has_next (It *this);
  void *it_next (It *this);
  void *it_peek (It *this);
  It *it_add (It *this, void *element);
  It *it_add0 (It *this, void *element);
  It *it_cat (It *this, It *another);
  It *it_take (It *this, int n);
  It *it_takef (It *this, int (*predicate)(void *e));
  It *it_drop (It *this, int n);
  It *it_dropf (It *this, int (*predicate)(void *e));
  It *it_filter (It *this, int (*predicate)(void *e));
  It *it_map (It *this, void *(*converter)(void *e));
  It *it_map2 (It *this, void *(*conv1)(void *e), void *(*conv2)(void *e));
  It *it_zip (It *it1, It *it2);
  It *it_zip3 (It *it1, It *it2, It *it3);
  It *it_reverse (It *this);
  It *it_sort (It *this, int (*greater)(void *e1, void *e2));
  void it_each (It *this, void (*f)(void *e));
  void it_each_ix (It *this, void (*f)(void *e, int ix));
  int it_count (It *this);
  int it_eq (It *it1, It *it2, int (*feq)(void *e1, void *e2));
  int it_index (It *this, int (*predicate)(void *e));
  int it_contains (It *this, int (*predicate)(void *e));
  int it_last_index (It *this, int (*predicate)(void *e));
  Opt *it_find (It *this, int (*predicate)(void *e));
  Arr *it_to (It *this);
  It *it_from (Arr *a);
  Tp *it_duplicates (It *this, int (feq)(void *e1, void *e2));
  //
  // kv.h ---------------------------------
  //
  Kv *kv_new (char *key, void *value);
  char *kv_key (Kv *this);
  void *kv_value (Kv *this);
  char *kv_to_js (Kv *this, char *(*to)(void *e));
  Kv *kv_from_js (char *js, void *(*from)(char *jse));
  //
  // map.h ---------------------------------
  //
  Map *map_new(void);
  int map_size(Map *this);
  void map_add(Map *this, char *key, void *value);
  void map_set(Map *this, char *key, void *value);
  void map_put(Map *this, char *key, void *value);
  int map_has_key(Map *this, char *key);
  Opt *map_get(Map *this, char *key);
  void map_remove(Map *this, char *key);
  Arr *map_keys(Map *this);
  Arr *map_to_array(Map *this);
  Map *map_from_array(Arr *this);
  void map_sort(Map *this);
  void map_sort_locale(Map *this);
  char *map_to_js (Map *this, char *(*to)(void *e));
  Map *map_from_js (char *js, void *(*from)(char *ejs));
  //
  // js.h ---------------------------------
  //
  int js_is_null (char *json);
  int js_rb (char *json);
  int js_ri (char *json);
  long js_rl (char *json);
  double js_rd (char *json);
  char *js_rs (char *json);
  Arr *js_ra (char *json);
  Map *js_ro (char *json);
  char *js_wn(void);
  char *js_wb(int value);
  char *js_wi(int n);
  char *js_wl(long n);
  char *js_wf(double n, int scale);
  char *js_ws(char *s);
  char *js_wa(Arr *a);
  char *js_wo(Map *m);
  //
  // math.h ---------------------------------
  //
  char *math_itos (int64_t n);
  char *math_ftos (double n, int scale);
  int math_stoi (char *s);
  int64_t math_stol (char *s);
  float math_stof (char *s);
  double math_stod (char *s);
  char *math_to_locale (double n, int scale);
  double math_from_iso (char *s);
  double math_from_en (char *s);
  int math_digits (char *s);
  double math_round (double n, int scale);
  int math_eq (double n1, double n2);
  int math_eq_gap (double n1, double n2, double gap);
  double math_abs (double n);
  double math_pow (double base, double exp);
  double math_sqrt (double n);
  //
  // path.h ---------------------------------
  //
  char *path_cat (char *name1, char *name2, ...);
  char *path_base (char *path);
  char *path_parent (char *path);
  char *path_extension (char *path);
  char *path_clean (char *s);
  Opt *path_canonical (char *s);
  //
  // regex.h ---------------------------------
  //
  int regexOffset_begin (RegexOffset *off);
  int regexOffset_end (RegexOffset *off);
  Opt *regex_matches (char *rex, char *s);
  Opt *regex_matches_ic (char *rex, char *s);
  Opt *regex_replace (char *rex, char *s, char *replacement);
  Opt *regex_replace_ic (char *rex, char *s, char *replacement);
  Opt *regex_replacef (char *rex, char *s, char *(*freplacement)(char *match));
  //
  // rs.h ---------------------------------
  //
  Rs *rs_ok (void *value);
  Rs *rs_fail (char *msg);
  void *rs_get (Rs *this);
  char *rs_error (Rs *this);
  char *rs_to_js (Rs *this, char *(*to)(void *e));
  Rs *rs_from_js (char *js, void *(*from)(char *jse));
  //
  // str.h ---------------------------------
  //
  char *str_new(char *s);
  char *str_new_c(char ch);
  int str_cmp(char *s1, char *s2);
  int str_cmp_locale(char *s1, char *s2);
  int str_greater(char *s1, char *s2);
  int str_greater_locale(char *s1, char *s2);
  int str_eq(char *str1, char *str2);
  int str_starts(char *str, char *substr);
  int str_ends(char *str, char *substr);
  int str_cindex(char *str, char ch);
  int str_cindex_from(char *str, char ch, int start);
  int str_index(char *str, char *substr);
  int str_index_from(char *str, char *substr, int start);
  int str_last_cindex(char *str, char ch);
  int str_last_index(char *str, char *substr);
  int str_len (char *str);
  char *str_sub(char *str, int begin, int end);
  char *str_left(char *str, int end);
  char *str_right(char *str, int begin);
  char *str_ltrim(char *str);
  char *str_rtrim(char *str);
  char *str_trim(char *str);
  Arr *str_csplit(char *str, char sep);
  Arr *str_csplit_trim(char *str, char sep);
  Arr *str_split(char *str, char *sep);
  Arr *str_split_trim(char *str, char *sep);
  char *str_creplace(char *s, char old, char new);
  char *str_replace(char *s, char *old, char *new);
  char *str_vf(char *format, va_list args);
  char *str_f(char *format, ...);
  int str_runes_len(char *s);
  char *str_next_rune(char **rune, char *s);
  Arr *str_runes(char *s);
  unsigned *str_to_unicode(char *s);
  char *str_from_unicode(unsigned *u);
  char *str_from_iso(char *s);
  char *str_to_upper (char *s);
  char *str_to_lower (char *s);
  char *str_to_escape (char *s);
  char *str_from_escape (char *s);
  //
  // sys.h ---------------------------------
  //
  void sys_init(void);
  Map *sys_environ(void);
  void sys_set_locale (char *language);
  char *sys_get_locale (void);
  double sys_rnd_d (void);
  int sys_rnd_i (int top);
  void sys_sleep (int millis);
  int sys_user_id(void);
  char *sys_user_name();
  char *sys_user_home(void);
  Rs *sys_cmd(char *command);
  Tp *sys_cmd2(char *command);
  char *sys_read_line (void);
  //
  // tcp.h ---------------------------------
  //
  TcpServer *tcp_server (int port, int conns);
  Rs *tcp_accept (TcpServer *sv);
  Rs *tcp_read (TcpConn *conn, int len, int seconds);
  char *tcp_write (TcpConn *conn, Bytes *bs);
  Rs *tcp_dial (char *sv, int port);
  void tcp_close_server (TcpServer *sv);
  void tcp_close_conn (TcpConn *conn);
  
// INTERFACE ----------------------------------------

#define EXC_KUTT EXC_GENERIC
typedef union built_Val Val;
typedef struct __arr_Varr Varr;
union built_Val {
int b;
int64_t i;
double f;
char *s;
Varr *a;
void *o;
};
struct __arr_Varr {
Val *begin;
Val *end;
Val *end_bf;
};

void ___built_jump (int reference);
char *___built_mpath(char *module_id);
char *___built_mpos(char *module_id, int ln);
Val ___built_divi(Val pos, Val n1, Val n2);
Val ___built_divf(Val pos, Val n1, Val n2);
Val ___built_eq (Val type, Val value1, Val value2);
Val ___built_to_str_trace (Val type, Val value);
Val ___built_to_str (Val type, Val value);
void ___built_throw (Val pos, Val msg);
void ___built_trace (Val isComplete, Val fpos, Val type, Val value);

Val __arr_all (Val a, Val fn);
Val __arr_any (Val a, Val fn);
void __arr_cat (Val a, Val a2);
Val __arr_cat2 (Val a, Val a2);
void __arr_clear (Val a);
Val __arr_copy (Val a);
Val __arr_drop (Val a, Val n);
Val __arr_dropWhile (Val a, Val fn);
Val __arr_duplicates (Val a, Val fn);
void __arr_each (Val a, Val fn);
void __arr_eachIx (Val a, Val fn);
Val __arr_filter (Val a, Val fn);
void __arr_filterIn (Val a, Val fn);
Val __arr_find (Val a, Val fn);
Val __arr_fromIter (Val it);
Val __arr_from_sarr (Arr *a);
Val __arr_get (Val pos, Val a, Val ix);
Val __arr_index (Val a, Val fn);
void __arr_insert (Val pos, Val a, Val ix, Val e);
void __arr_insertArr (Val pos, Val a, Val ix, Val other);
void __arr_insertRange (Val pos, Val a, Val ix, Val other, Val begin, Val end);
Val __arr_join(Val a, Val sep);
Val __arr_map(Val a, Val fn);
Val __arr_new (void);
Val __arr_new_fill (Val el, Val n);
Val __arr_new_from_carr (Val n, Val *els);
Val __arr_peek (Val pos, Val a);
Val __arr_pop (Val pos, Val a);
void __arr_push (Val a, Val el);
Val __arr_reduce (Val a, Val seed, Val fn);
Val __arr_remove (Val pos, Val a, Val ix);
Val __arr_removeRange (Val pos, Val a, Val begin, Val end);
Val __arr_reverse (Val a);
void __arr_reverseIn (Val a);
void __arr_set (Val pos, Val a, Val ix, Val el);
void __arr_setArr (Val pos, Val a, Val ix, Val other);
void __arr_setRange (Val pos, Val a, Val ix, Val other, Val begin, Val end);
Val __arr_shift (Val pos, Val a);
void __arr_shuffle (Val a);
Val __arr_size (Val a);
void __arr_sort (Val a, Val fn);
Val __arr_sub (Val a, Val begin, Val end);
Val __arr_sub0 (Val a, Val begin);
Val __arr_take (Val a, Val n);
Val __arr_takeWhile (Val a, Val fn);
Val __arr_toIter (Val a);
Val __arr_to_js (Val a, Val fn);
Arr *__arr_to_sarr (Val a);
void __arr_unshift (Val a, Val e);
Val __arr_unzip (Val a);
Val __arr_unzip3 (Val a);
Val __arr_zip (Val a1, Val a2);
Val __arr_zip3 (Val a1, Val a2, Val a3);

Val __b64_decode (char *pos, Val b64);
Val __b64_encode (Val s);

Val __bytes_add (Val bs1, Val bs2);
Val __bytes_drop (Val bs, Val begin);
Val __bytes_fromArr (Val a);
Val __bytes_fromStr (Val str);
Val __bytes_get (Val pos, Val bs, Val ix);
Val __bytes_new (Val size);
void __bytes_set (Val pos, Val bs, Val ix, Val byte);
Val __bytes_size (Val bs);
Val __bytes_take (Val bs, Val end);
Val __bytes_toArr (Val bs);
Val __bytes_toStr (Val bs);

Val __dic_from_smap (Map *m);
Val __dic_get(Val d, Val key);
Val __dic_new_from_carr (Val n, Val *els);
void __dic_put(Val d, Val key, Val value);
Val __dic_to_js (Val d, Val (*fn)(Val));
Map *__dic_to_smap (Val a);

Val __iter_all (Val it, Val fn);
Val __iter_any (Val it, Val fn);
Val __iter_cat (Val it1, Val it2);
Val __iter_count (Val it);
Val __iter_drop (Val it, Val n);
Val __iter_empty (Val fake);
Val __iter_hasNext (Val it);
Val __iter_new (Val tuple);
Val __iter_new_aux (Val obj, Val (*fn) (Val));
Val __iter_next (Val it);
Val __iter_range (Val pos, Val vs);
Val __iter_take (Val it, Val n);
Val __iter_unary (Val value);

Val __js_is_null (Val json);
Val __js_rb (Val json);
Val __js_ri (Val json);
Val __js_rf (Val json);
Val __js_rs (Val json);
Val __js_ra (Val json);
Val __js_ro (Val json);
Val __js_wn(void);
Val __js_wb(Val value);
Val __js_wi(Val n);
Val __js_wf(Val n);
Val __js_ws(Val s);
Val __js_wa(Val a);
Val __js_wo(Val m);

Val __math_abs (Val n);
Val __math_acos (Val n);
Val __math_acosh (Val n);
Val __math_asin (Val n);
Val __math_asinh (Val n);
Val __math_atan (Val n);
Val __math_atanh (Val n);
Val __math_ceil (Val n);
Val __math_cos (Val n);
Val __math_cosh (Val n);
Val __math_e (void);
Val __math_eq (Val n1, Val n2, Val gap);
Val __math_exp (Val n);
Val __math_exp2 (Val n);
Val __math_floor (Val n);
Val __math_fromEn (Val s);
Val __math_fromHex (Val s);
Val __math_fromIso (Val s);
Val __math_ftoi (Val n);
Val __math_ftos (Val n);
Val __math_ftos2 (Val n, Val dec);
Val __math_isDigits (Val n);
Val __math_itof (Val n);
Val __math_itoh (Val n);
Val __math_itos (Val n);
Val __math_log (Val n);
Val __math_log10 (Val n);
Val __math_log2 (Val n);
Val __math_max (Val n1, Val n2);
Val __math_maxFloat (void);
Val __math_maxInt (void);
Val __math_min (Val n1, Val n2);
Val __math_minInt (void);
Val __math_pi (void);
Val __math_pow (Val base, Val exp);
Val __math_pow10 (Val exp);
Val __math_rnd (void);
Val __math_rndi (Val top);
Val __math_round (Val n, Val dec);
Val __math_sin (Val n);
Val __math_sinh (Val n);
Val __math_sqrt (Val n);
Val __math_stof (Val s);
Val __math_stoi (Val s);
Val __math_tan (Val n);
Val __math_tanh (Val n);
Val __math_trunc (Val n);

Val __rs_some (Val v);
Val __rs_ok (Val v);
Val __rs_error (Val v);
Val __rs_get (Val rs);
Val __rs_eget (Val rs);

Val __str_cmp (Val s1, Val s2);
Val __str_ends (Val str, Val substr);
Val __str_fmt (Val pos, Val format, Val args);
Val __str_fromIso (Val s);
Val __str_fromRunes (Val a);
Val __str_fromUtf16 (Val codepoints);
Val __str_get(Val pos, Val s, Val ix);
Val __str_index (Val str, Val substr);
Val __str_indexFrom (Val str, Val substr, Val start);
Val __str_lastIndex (Val str, Val substr);
Val __str_left (Val str, Val end);
Val __str_left_slice(Val str, Val begin);
Val __str_len (Val str);
Val __str_ltrim (Val str);
Val __str_replace (Val s, Val old, Val new);
Val __str_right (Val str, Val end);
Val __str_right_slice(Val str, Val begin);
Val __str_rtrim (Val str);
Val __str_split (Val str, Val sep);
Val __str_splitTrim (Val str, Val sep);
Val __str_starts (Val str, Val substr);
Val __str_sub(Val str, Val begin, Val end);
Val __str_sub_slice(Val str, Val begin, Val end);
Val __str_toLower (Val str);
Val __str_toRunes (Val str);
Val __str_toUpper (Val str);
Val __str_toUtf16 (Val str);
Val __str_trim (Val str);

void __sys_init(Val compiler_root);
Val __sys_compilerRoot (void);
Val __sys_getLocale (void);
void __sys_setLocale (Val charset);


  """
;
