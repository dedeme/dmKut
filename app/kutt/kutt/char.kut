// Copyright 07-Jan-2025 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Character funtions.

/// Returns 'true' if ch is a letter [a-zA-Z]
///   ch: Character. It can not be empty and should be of length '1'.
/// \s -> b
isLetter = \ch -> return (ch >= 'a' & ch <= 'z') | (ch >= 'A' & ch <= "Z");;

/// Returns 'true' if ch is a letter [a-zA-Z] or a digit.
///   ch: Character. It can not be empty and should be of length '1'.
/// \s -> b
isLetterOrDigit = \ch -> return isLetter(ch) | (ch >= '0' & ch <= "9");;

/// Returns `true' if id is a valid kutt identifier.
///   s: String to check. If it is empty, the function returns 'false'.
/// \s -> b
isId = \id -> {
  if (id == "") return false;
  if (!isLetter(id[0])) return false;
  for (ch = id[1:]) if (!isLetterOrDigit(ch)) return false;
  return true;
};

/// Returns canonical form of kutt 'module.identifier' or error.
/// Sequences valid are: "module.identifier", ".identifier" and "identiefier".
///   s: String to check. If it is empty, the function returns 'false'.
/// \s -> [s, b]
mkDotId = \id -> {
  // \s -> [s, b]
  check = \id -> return isId(id)
    ? [id, true]
    : ["'" + id + "' is not a valid identifier", false]
  ;;

  ix = str.index(id, ".");
  if (ix == -1) return check(id);
  if (ix == 0) return ["Identifier start with dot", false];
  r1, ok1 = check(str.rtrim(id[:ix]));
  if (!ok1) return [r1, false];
  r2, ok2 = check(str.ltrim(id[ix+1:]));
  if (!ok2) return [r2, false];
  return [r1 + "." + r2, true];
};

/// Returns "" if 'gen' is a valid generics string. Otherwise returns an error.
///   s: Generics string. An empty value returns "".
/// \s -> s
checkGenerics = \s -> {
  for (i, ch = s) {
    if (ch < 'A' | ch > "Z") {
      if (ch <= " ") return "Inner blanks are not allowed in generics string";
      return "'" + ch + "' is not a valid generic letter (A-Z).";
    }
    if (str.lastIndex(s, ch) > i)
      return "Generic symbol '" + ch + "' is duplicated.";
  }
  return "";
};
