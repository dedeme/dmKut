// Copyright 03-Feb-2025 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Compiler.

import "data/module";
import "data/imp";
import "readers/moduleRd";
import "oGrouping";
import "c/interface";
import "modules";
import "db";
import "cts";
import "hwriter";
import "bwriter";

/// \b -> s
run = \isExe -> {
  HeaderBf = ['#include "../built.h"'];

  modules.each(\:module m -> {
    hcode = hwriter.write(m);
    HeaderBf.push(hcode);
  });
  header = HeaderBf.join("\n");

  Deps = []; // [[s,[s.]].]
  modules.each(\:module m -> {
    Entry = arr.map(dic.values(m.Imports), \:imp i -> return i.id;);
    if (m.isMain) Deps.unshift([m.id, Entry]);
    else Deps.push([m.id, Entry]);
  });

  :arr Groups = oGrouping.run(Deps);

  linkV = [false];
  for (Gr = Groups) {
    link, ok = compileGroup(header, Gr[1]);
    if (!ok) return link;
    linkV! |= link;
  }

  :file fexe = file.cat([cts.compilationPath, Deps[0][0] + ".bin"]);
  linkV! |= !fexe.exists();

  if (linkV! & isExe) {
    Fos = arr.map(
      Groups.map(\G -> return G[0];),
      \o -> return file.cat([cts.compilationPath, o + ".o"]);
    );

    r, ok = sys.cmd(
      "gcc", [
        "-Wno-div-by-zero", "-Wmain", "-rdynamic",
        "-z", "execstack"
      ] + Fos + [
        "-o", fexe,
        "-L" + cts.dataPath,
        "-lbuilt", "-lgc", "-lm", "-lpthread"
      ]
    );
    if (!ok) return r;
  }

  return "";
};

// Returns [(souldBeLinked | error), ok)
//: \s, [s.] -> [(b|s), b]
compileGroup = \header, :arr G -> {
  Mds = []; // [<module>.]
  for (mdId = G) Mds.push(modules.get(mdId));

  :module m = modules.get(G[0]);
  tm = db.objectDate(m.id);
  shouldCompile = G.any(\mdId -> {
    :module m = modules.get(mdId);
    return file.tm(m.path) > tm;
  });

  if (shouldCompile) { // Compilation
    err = compileGroup2(header, Mds, G);
    return err == "" ? [true, true] : [err, false];
  } else { // Only transpilation to control errors.
    for (:module m = Mds) {
      error, = bwriter.write(m);
      if (error != "") return [error, false];
    }
  }
  return [false, true];
};

// Returns error or "".
//: \s, [s.] -> s
compileGroup2 = \header, :arr Mds, :arr G -> {
  mainIdOp = [];
  BfC = []; //[s.]
  for (:module m = Mds) {
    error, ccode, isMain = bwriter.write(m);
    if (error != "") return error;
    if (isMain) mainIdOp.push(m.id);
    else if (m.isMain) return "Main block is missing";
    BfC.push(ccode);
  }

  code =
    "// Generated by kutt (" + time.toStr(time.now()) + ")\n" +
    header +
    "\n//\n// BODY " +
    "------------------------------------------------------------------------" +
    "\n//\n" +
    BfC.join("\n") + (
      !mainIdOp
        ? ""
        : str.replace(str.replace(
          """
          //
          // MAIN ------------------------------------------------------------------------
          //
          int main (int argc, char **argv) {
            __sys_init((Val){COMPILER_ROOT});
            {MODULE}_main();
            return 0;
          }
          """, "{COMPILER_ROOT}", js.ws(cts.dataPath)), "{MODULE}", mainIdOp!)
    )
  ;

  :file cfile = file.cat([cts.compilationPath, G[0] + ".c"]);
  cfile.write(code);
  :file ofile = file.cat([cts.compilationPath, G[0] + ".o"]);

  r, ok = sys.cmd(
    "gcc", [
      "-Wno-div-by-zero", "-c", "-rdynamic",
      "-z", "execstack",
      cfile,
      "-o", ofile,
      "-I" + cts.dataPath,
      "-L" + cts.dataPath,
      "-lbuilt", "-lgc", "-lm", "-lpthread"
    ]
  );
  if (!ok) return r;

  return "";
};
