// Copyright 28-Feb-2025 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

//: [[. i]|[i]]
next = \V -> {
  if (V[0] < 4) {
    r = V[0];
    V[0] += 1;
    return [r];
  }
  return [];
};

{
  sys.println("titer ...");

  it0 = iter.new([. [. 0], next]);
  sys.test(arr.fromIter(it0), [0,1,2,3]);

  sys.test(arr.fromIter([!0]), []/i/);
  sys.test(arr.fromIter([!3]), [0, 1, 2]);
  sys.test(arr.fromIter([!2,4]), [2, 3]);
  sys.test(arr.fromIter([!4,2]), []/i/);
  sys.test(arr.fromIter([!2,8,2]), [2, 4, 6, 8]);
  sys.test(arr.fromIter([!8,2,2]), []/i/);
  sys.test(arr.fromIter([!2,8,-2]), []/i/);
  sys.test(arr.fromIter([!8,2,-2]), [8, 6, 4, 2]);

  sys.test(iter.all([!0], \i -> return i < 3;), true);
  sys.test(iter.all([!3], \i -> return i < 3;), true);
  sys.test(!iter.all([!5], \i -> return i < 3;), true);

  sys.test(!iter.any([!0], \i -> return i < 3;), true);
  sys.test(iter.any([!3], \i -> return i < 3;), true);
  sys.test(iter.any([!5], \i -> return i < 3;), true);


  sys.test(arr.fromIter(iter.cat(iter.empty([]/i/), iter.empty([]/i/))), []/i/);
  sys.test(arr.fromIter(iter.cat([!3], iter.empty([]/i/))), [0, 1, 2]);
  sys.test(arr.fromIter(iter.cat(iter.empty([]/i/), [!3])), [0, 1, 2]);
  sys.test(arr.fromIter(iter.cat(iter.unary(-1), [!3])), [-1, 0, 1, 2]);
  sys.test(arr.fromIter(iter.cat([!3], iter.unary(3))), [0, 1, 2, 3]);
  sys.test(arr.fromIter(iter.cat([!3], [!3,5])), [0, 1, 2, 3, 4]);
  sys.test(arr.fromIter(iter.cat([!3], [!4,5])), [0, 1, 2, 4]);
  sys.test(arr.fromIter(iter.cat([!3], [!2,5])), [0, 1, 2, 2, 3, 4]);

  sys.test(iter.count(iter.empty([]/i/)), 0);
  sys.test(iter.count([!124]), 124);

  sys.test(arr.fromIter(iter.drop(iter.empty([]/i/), 2)),  []/i/);
  sys.test(arr.fromIter(iter.drop(iter.unary("a"), 2)),  []/s/);
  sys.test(arr.fromIter(iter.drop([!5], 2)),  [2, 3, 4]);
  sys.test(arr.fromIter(iter.drop([!5], -2)),  [0, 1, 2, 3, 4]);
/*
  sys.test(
    arr.fromIter(iter.dropWhile(iter.empty(), \s -> return s == "a";)), []
  );
  sys.test(
    arr.fromIter(iter.dropWhile(iter.unary("a"), \s -> return s == "a";)), []
  );
  sys.test(
    arr.fromIter(iter.dropWhile([0:5], \i -> return i < 2;)), [2, 3, 4]
  );
  sys.test(
    arr.fromIter(iter.dropWhile([0:5], \i -> return i > 2;)), [0, 1, 2, 3, 4]
  );

  Sum = [0];
  iter.each(iter.empty(), \e -> Sum! += e;);
  sys.test(Sum!, 0);
  iter.each(iter.unary(1), \e -> Sum! += e;);
  sys.test(Sum!, 1);
  Sum! = 0;
  iter.each([1:4], \e -> Sum! += e;);
  sys.test(Sum!, 6);

  Sum! = 0;
  SumIx = [0];
  iter.eachIx(iter.empty(), \e, i -> { Sum! += e; SumIx! += i; });
  sys.test(Sum!, 0);
  sys.test(SumIx!, 0);
  iter.eachIx(iter.unary(1), \e, i -> { Sum! += e; SumIx! += i; });
  sys.test(Sum!, 1);
  sys.test(SumIx!, 0);
  Sum! = 0;
  iter.eachIx([1:4], \e, i -> { Sum! += e; SumIx! += i; });
  sys.test(Sum!, 6);
  sys.test(SumIx!, 3);

  sys.test(
    arr.fromIter(iter.filter(iter.empty(), \i -> return i % 2 == 0;)), []
  );
  sys.test(
    arr.fromIter(iter.filter([0:5], \i -> return i % 2 == 0;)), [0, 2, 4]
  );
  sys.test(
    arr.fromIter(iter.filter([0:5], \i -> return i % 2 != 0;)), [1, 3]
  );

  sys.assert(!iter.find(iter.empty(), \i -> return i == 3;));
  sys.test(iter.find([0:124], \i -> return i == 3;), [3]);
  sys.assert(!iter.find([0:124], \i -> return i == -100;));

  sys.assert(!iter.hasNext(iter.empty()));

  sys.test(iter.index(iter.empty(), \i -> return i == 3;), -1);
  sys.test(iter.index([0:124], \i -> return i == 3;), 3);
  sys.test(iter.index([0:124], \i -> return i == -100;), -1);

  sys.test(arr.fromIter(iter.map([0:0], \i -> return i * 2;)), []);
  sys.test(
    arr.fromIter(iter.map([0:-4:-1], \i -> return i * 2;)), [0, -2, -4, -6, -8]
  );

  V = [0];
  hasNext = \-> return V[0] < 4;;
  next = \-> {
    r = V[0];
    V[0] += 1;
    return r;
  };
  sys.test(arr.fromIter(iter.new(hasNext, next)), [0, 1, 2, 3]);

  sys.test(iter.reduce(iter.empty(), 0, \s, i -> return s + i;), 0);
  sys.test(iter.reduce(iter.unary(1), 0, \s, i -> return s + i;), 1);
  sys.test(iter.reduce([1:5], 10, \s, i -> return s - i;), 0);
  sys.test(iter.reduce([1:0], 0, \r, e -> return r + e;), 0);
  sys.test(iter.reduce([1:1], 0, \r, e -> return r + e;), 0);
  sys.test(iter.reduce([1:2], 0, \r, e -> return r + e;), 1);
  sys.test(iter.reduce([-1:5], 0, \r, e -> return r + e;), 9);
  sys.test(iter.reduce([0:-1], 0, \r, e -> return r + e;), 0);
  sys.test(iter.reduce([0:0], 0, \r, e -> return r + e;), 0);
  sys.test(iter.reduce([0:2], 0, \r, e -> return r + e;), 1);
  sys.test(iter.reduce([0:5], 0, \r, e -> return r + e;), 10);
*/
  sys.test(arr.fromIter(iter.take(iter.empty([]/i/), 2)), []/i/);
  sys.test(arr.fromIter(iter.take(iter.unary("a"), 2)), ["a"]);
  sys.test(arr.fromIter(iter.take([!5], 2)), [0, 1]);
  sys.test(arr.fromIter(iter.take([!5], -2)), []/i/);
/*
  sys.test(
    arr.fromIter(iter.takeWhile(iter.empty(), \s -> return s == "a";)), []
  );
  sys.test(
    arr.fromIter(iter.takeWhile(iter.unary("a"), \s -> return s == "a";)), ["a"]
  );
  sys.test(arr.fromIter(iter.takeWhile([0:5], \i -> return i < 2;)), [0, 1]);
  sys.test(arr.fromIter(iter.takeWhile([0:5], \i -> return i > 2;)), []);
  sys.test(arr.fromIter(
    iter.takeWhile(iter.cat([0:5], [0:5]), \i -> return i < 2;)
  ), [0, 1]);


  it1 = iter.unary("A");
  sys.test(iter.next(it1), "A");
  sys.assert(!iter.hasNext(it1));

  sys.test(iter.toStr([0:0]), "<iter>[]");
  sys.test(iter.toStr([1:4]), "<iter>[1, 2, 3]");
*/
  sys.println("  finished.");
}

