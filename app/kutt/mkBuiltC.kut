// Copyright 30-Sep-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

libkutIncludePath = "/dm/dmC/lib/libkut/include/kut";
libkutSrcPath = "/dm/dmC/lib/libkut/src/kut";
Fs = [
    "thread", "opt", "arr", "bytes", "b64", "buf", "cryp", "exc",
    "time", "file", "tp", "tp3", "it", "kv", "map", "js", "math",
    "path", "regex", "rs", "str", "sys", "tcp"
  ];

createInterfaceH();
createInterfaceC();
createHeader();
createBody();
createInterfaceKut();

createInterfaceH = \ -> {
  :file dir = "c/h";
  :arr Fnames = dir.dir();
  Fnames.sort(\n1, n2 -> return n1 < n2;);
  file.write("c/interface.h", "");
  :file iface = file.aopen("c/interface.h");
  iface.writeText("\n// INTERFACE ----------------------------------------\n\n");

  for (fname = Fnames) {
    :file source = file.ropen(file.cat([dir, fname]));
    while () {
      lOp = source.readLine();
      if (!lOp) break;
      :str l = str.trim(lOp!);
      if (l == "" | l.starts("//")) continue;
      iface.writeText(l + "\n");
    }
    source.close();
    iface.writeText("\n");
  }
  iface.close();
};

createInterfaceC = \ -> {
  :file dir = "c/c";
  :arr Fnames = dir.dir();
  Fnames.sort(\n1, n2 -> return n1 < n2;);
  file.write("c/interface.c", "");
  :file iface = file.aopen("c/interface.c");
  iface.writeText("\n// INTERFACE ----------------------------------------\n\n");

  for (fname = Fnames) {
    iface.writeText(
      "\n// -------------------------------------\n" +
      "//" + fname[:-2] + "\n" +
      "// -------------------------------------\n\n"
    );

    :file source = file.ropen(file.cat([dir, fname]));
    while () {
      lOp = source.readLine();
      if (!lOp) break;
      :str l = str.trim(lOp!);
      if (l == "" | l.starts("//")) continue;
      iface.writeText(l + "\n");
    }
    source.close();
    iface.writeText("\n");
  }
  iface.close();
};

createHeader = \ -> {
  // [s.]
  Bf = [];
  Bf.push(file.read("c/built.h"));
  for (f = Fs) {
    Bf.push("//");
    Bf.push("// " + f + ".h ---------------------------------");
    Bf.push("//");
    :arr Ls0 = str.split(file.read(file.cat([libkutIncludePath, f + ".h"])), "\n");
    :arr Ls1 = Ls0.dropWhile(\l -> return !str.starts(str.trim(l), "#define"););
    :arr Ls2 = Ls1.drop(1);
    :arr Ls3 = Ls2.takeWhile(\l-> return str.trim(l) != "#endif";);
    for (l0 = Ls3) {
      l = str.trim(l0);
      if (
        l == "" |
        str.starts(l, "//") |
        str.starts(l, "#include") |
        str.starts(l, "typedef") |
        str.starts(l, "#define")
      ) continue;
      Bf.push(l0);
    }
  }
  Bf.push(file.read("c/interface.h"));

  tx0 = "// Code generated by mkBuiltC.\n\n" +
    "/// Built-in C header.\n/// s\n" +
    'code = """\n'
  ;
  file.write("kutt/c/cheader.kut", tx0 + Bf.join("\n  ") + '\n  """\n;\n');
};

createBody = \ -> {
  // [s.]
  Bf = [];
  Bf.push(file.read("c/built.c"));
  for (f = Fs) {
    Bf.push("//");
    Bf.push("// " + f + ".c ---------------------------------");
    Bf.push("//");
    :arr Ls = str.split(file.read(file.cat([libkutSrcPath, f + ".c"])), "\n");
    for (l0 = Ls) {
      l = str.trim(l0);
      if (str.starts(l, "#include")) continue;
      Bf.push(l0);
    }
  }
  Bf.push(file.read("c/interface.c"));

  tx0 = "// Code generated by mkBuiltC.\n\n" +
    "/// Built-in C body.\n/// s\n" +
    'code = """\n' +
    '  #include "built.h"\n'
  ;
  file.write("kutt/c/cbody.kut", tx0 + Bf.join("\n  ") + '\n  """\n;\n');
};

createInterfaceKut = \ -> {
  code = file.read("c/interface.c");
  tx0 = "// Code generated by mkBuiltC.\n\n/// s\n" +
    'code = """\n'
  ;
  file.write("kutt/c/interface.kut", tx0 + code + '\n"""\n;\n');
};

