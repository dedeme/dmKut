// Copyright 05-Jan-2023 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// This script depends of the following extern ones:
///   - fbsetwg
///   - Externs of "libdm/img"

import "libdm/img";

//  CONSTANTS -----------------------------------------------

//  Home directory
home = "/home/deme/.dmKutApp/fluxwp";
//  Selected picture path
pictDir = file.cat([home, "picture.jpg"]);
//  Picture width
width = 1280;
//  Picture height
height = 1024;
//  Pictures source directory.
sourceDirAll = "/dm/fondosEscritorio/jpg";
//  Maximum of ponderation values.
maxPonderation = 1024;

//  DATA ----------------------------------------------------

//  OBJECT <pict> -------------------------------------------
//  Picture contructors
//  \i, s, i -> <pict>
newPict = \group, name, rejections -> return [group, name, rejections];;
//  \i, s -> <pict>
mkPict = \group, name -> return newPict(group, name, maxPonderation);;
// Picture fields
//  \<pict> -> i
pictGroup = \P -> return P[0];;
//  \<pict> -> s
pictName = \P -> return P[1];;
//  \<pict> -> s
pictPonderation = \P -> return P[2];;
// Returns true if P1 and P2 have equals group and equals name.
pictEq = \P1, P2 -> return P1[0] == P2[0] & P1[1] == P2[1];;
//  Serialization
//  s -> <pict>
pictFromJs = \A -> return newPict(math.ftoi(A[0]), A[1], math.ftoi(A[2]));;

//  DATA BASE -----------------------------------------------

//  Initialize database
//  \-> ()
initDb = \-> {
  if (!file.exists(home)) {
    file.mkdir(home);
    pictsWrite([]);
    sync();

    currentWrite(pictsRead()[0]);
  }
};

// current.tb --------------------------

// s
currentPath = file.cat([home, "current.tb"]);
// \ -> <pict>
currentRead = \ -> return pictFromJs(js.r(file.read(currentPath)));;
// \<pict> -> ()
currentWrite = \P -> file.write(currentPath, js.w(P));;

// picts.tb ----------------------------

// s
pictsPath = file.cat([home, "picts.tb"]);
// \ -> [<pict>.]
pictsRead = \ -> return arr.map(js.r(file.read(pictsPath)), pictFromJs);;
// \[<pict>.] -> ()
pictsWrite = \Picts -> file.write(pictsPath, js.w(Picts));;

//  FUNCTIONS -----------------------------------------------

//  Source directory of a group.
//  \i -> s
sourceDir = \group ->
  return file.cat([sourceDirAll, math.itos(group)]);
;

//  Generates a new adjusted image from 'im' filling the default size.
//    group: Image group
//    im   : Source image name.
//  \i, s -> ()
imgConversion = \group, im -> {
  target = pictDir;
  img.fill(file.cat([sourceDir(group), im]), target, width, height);

  WH = img.dim(target);
  if (WH[0] == width) {
    top = (WH[1] - height) / 2;
    img.crop(target, target, 0, top, width, height);
  } else {
    left = (WH[0] - width) / 2;
    img.crop(target, target,left, 0, width, height);
  }
};

//  Help message
//  \->()
help = \-> {
  sys.println("""
    fluxwp bad arguments.

    Use:

    kut fluxwp reject
    or
    kut fluxwp change
  """
  );
};

//  Synchronize a group of pictures.
//  \[<pict>.], i -> [<pict>.]
syncGr = \:arr Picts, group -> {
  :arr SourcePicts = file.dir(sourceDir(group));
  for (Sp = SourcePicts)
    if (!Picts.any(\P -> return pictName(P) == Sp;))
      Picts.push(mkPict(group, Sp));
  return Picts.filter(
    \P -> return SourcePicts.any(\Sp -> return pictName(P) == Sp;);
  );
};

//  Synchronize all the pictures.
sync = \-> {
  :arr Picts = pictsRead();
  NewPicts = [];
  for (i = 0:10) {
    Ps = syncGr(Picts.filter(\p -> return pictGroup(p) == i;), i);
    for (p = Ps) NewPicts.push(p);
  }
  pictsWrite(NewPicts);
};

//  Show a new current picture.
show = \-> {
  :arr Picts = pictsRead();
  lim = Picts.reduce(0, \r, e -> return r + pictPonderation(e););
  moreV = [true];
  while (moreV!) {
    ix = math.rndi(lim);
    sumV = [0];
    for (P = Picts) {
      sumV! += pictPonderation(P);
      if (sumV! >= ix) {
        pgroup = pictGroup(P);
        pname = pictName(P);
        sourcePict = file.cat([sourceDir(pgroup), pname]);
        if (file.exists(sourcePict)) {
          currentWrite(P);
          imgConversion(pgroup, pname);
          sys.cmd("fbsetbg", [pictDir]);
          moreV! = false;
        }
        break;
      }
    }
  }
  sync();
};

//  Process a rejection of picture.
//  \->()
reject = \-> {
  do = \ -> {
    P = currentRead();
    oldPonderation = pictPonderation(P);
    dif = maxPonderation - oldPonderation;
    newPonderation = oldPonderation == 0
      ? 0
      : oldPonderation == maxPonderation
        ? maxPonderation - 1
        : maxPonderation - dif - dif
    ;
    NewP = newPict(pictGroup(P), pictName(P), newPonderation);

    :arr Picts = pictsRead();
    Picts.filterIn(\P -> return !pictEq(NewP, P););
    Picts.push(NewP);
    pictsWrite(Picts);

    show();
  };

  while () {
    do();
    bash = "zenity --question --title=Fluxwp " +
      '--text="¿Cambiar de nuevo?"\necho $?\n';
    ftmp = file.tmp("", "fluxwp");
    file.write(ftmp, bash);
    r, ok = sys.cmd("bash", [ftmp]);
    file.del(ftmp);
    if (!ok) {
      sys.cmd("zenity", ["--error --title=Fluxwp --text=" + r]);
      continue;
    }
    // r == "1/n"
    if (r[0] == "1") break;
  }
};

//  Process a change of picture.
//  \->()
change = \-> {
  P = currentRead();
  oldPonderation = pictPonderation(P);
  dif = maxPonderation - oldPonderation;
  newPonderation = maxPonderation - dif / 2;
  NewP = newPict(pictGroup(P), pictName(P), newPonderation);

  :arr Picts = pictsRead();
  Picts.filterIn(\P -> return !pictEq(NewP, P););
  Picts.push(NewP);
  pictsWrite(Picts);

  show();
};

//  MAIN ----------------------------------------------------

initDb();

Args = sys.args();

if (!!Args) {
  switch (Args[0]) {
    "reject": reject();
    "change": change();
    default: help();
  }
} else {
  help();
}
