// Copyright 04-May-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

// Returns a postion object
// \s, i -> {s, i} :: {fpath, line}
mkPos = \fpath, line -> return { fpath, line };;

// \s -> i
help = \msg -> {
  sys.println(str.fmt("%v\n"+
    "Use:\n" +
    "  jkutI18n <languages> <root>\n" +
    "For example:\n" +
    "  jkutI18n  \"en:es\" /dm/dmJkut/app/JkutDoc\n\n" +
    "Note that different languages are separated by ':'. The\n" +
    "  first one is the default.\n",
    [msg]
  ));
  return 0;
};

// \{[({s, i} :: {fpath, line}).].}, s -> ()
extractFile = \Dict, fpath -> {
  f = file.ropen(fpath);
  nlineV = [1];
  while () {
    lOp = file.readLine(f);
    if (!lOp) break;
    l = lOp!;

    start = str.index(l, 'II("');
    if (start != -1) {
      end = str.indexFrom(l, '")', start + 4);
      if (end != -1) {
        tx = str.trim(l[start + 4 : end]);
        pos = mkPos(fpath, nlineV!);
        PossOp = dic.get(Dict, tx);
        if (!PossOp) dic.put(Dict, tx, [pos]);
        else arr.push(PossOp!, pos);
      }
    }

    nlineV! += 1;
  }
  file.close(f);
};

// \{[({s, i} :: {fpath, line}).].}, s -> ()
extract = \Dict, fpath -> {
  sys.println(fpath);
  if (file.isDirectory(fpath)) {
    for (fname = file.dir(fpath)) extract(Dict, file.cat([fpath, fname]));
  } else if (file.extension(fpath) == ".jkut") {
    extractFile(Dict, fpath);
  }
};

// \s -> {s.}
readOldDic = \fpath -> {
  if (!file.exists(fpath)) return {};
  return arr.reduce(
    str.splitTrim(file.read(fpath), "\n"),
    {},
    \r, l -> {
      if (l != "" & l[0] != "#") {
        ix = str.index(l, "=");
        if (ix != -1) {
          right = str.ltrim(l[ix+1:]);
          if (right != "") dic.put(r, str.rtrim(l[:ix]), right);
        }
      }
      return r;
    }
  );
};

// MAIN ------------------------------------------------------------------------

Args = sys.args();
if (arr.size(Args) != 2)
  return help("Wrong number of parameters");

Langs = str.split(Args[0], ":");
root = Args[1];

if (!file.isDirectory(root))
  return help("'" + root + "' is not a directory");

i18nDir = file.cat([root, "i18n"]);
if (file.exists(i18nDir) & !file.isDirectory(i18nDir))
    return help("'" + i18nDir + "' is not a directory");
file.mkdir(i18nDir);

// {[({s, i} :: {fpath, line}).].}
CurrentKeys = {};
extract(CurrentKeys, root);
Ckeys = dic.keys(CurrentKeys);
arr.sort(Ckeys, \k1, k2 -> return k1 < k2;);
for (v = dic.values(CurrentKeys)) {
  arr.sort(v, \P1, P2 -> {
    if (P1.fpath == P2.fpath) return P1.line < P2.line;
    else return P1.fpath < P2.fpath;
  });
}

// {{s.}}
Translations = {};
for (lang = Langs) {
  fdic = file.cat([i18nDir, lang + ".txt"]);
  //{s.}
  OldDic = readOldDic(fdic);

  // [s.]
  Orphans = [];
  for (Kv = dic.toArr(OldDic))
    if (!dic.hasKey(CurrentKeys, Kv[0]))
      arr.push(
        Orphans,
        str.fmt("# ORPHAN\n%v = %v\n\n", [Kv[0], Kv[1]])
      );

  // [s.]
  ToDos = [];
  // [s.]
  Dones = [];
  // {s.}
  Trans = {};
  for (k = Ckeys) {
    if (dic.hasKey(OldDic, k)) {
      v = OldDic[k];
      arr.push(
        Dones,
        arr.join(arr.map(CurrentKeys[k], \P ->
            return str.fmt("# %v: %v\n", [P.fpath, P.line]);
          ), "") +
        str.fmt("%v = %v\n\n", [k, v])
      );
      dic.put(Trans, k, v);
    } else {
      arr.push(
        ToDos,
        "# TO DO\n" +
        arr.join(arr.map(CurrentKeys[k], \P ->
            return str.fmt("# %v: %v\n", [P.fpath, P.line]);
          ), "") +
        str.fmt("%v =\n\n", [k])
      );
    }
  }

  file.write(
    fdic,
    "#Generated by jkutI18n\n\n" +
    arr.join(Orphans, "") + arr.join(ToDos, "") + arr.join(Dones, "")
  );
  dic.put(Translations, lang, Trans);
}

// [s.]
Code = [];
arr.push(Code, """
  // Generate by jkutI18n. Don't modify

  /// Internationalization management.

  """
);

for (lang = Langs) {
  arr.push(Code, str.fmt("%sDic = {\n", [lang]));
  arr.push(Code, arr.join(arr.map(
    dic.toArr(Translations[lang]),
    \Kv -> return str.fmt('  "%v": "%v"', [Kv[0], Kv[1]]);
  ), ",\n"));
  arr.push(Code, "\n};\n");
  arr.push(Code, str.fmt('/// \\-> ()\n%s = \\-> Lang! = "%v";;\n\n', [lang, lang]));
}

arr.push(Code, "//: \\s -> {s.}\ndicByKey = \\s -> return switch (s) {\n");
arr.push(Code, arr.join(arr.map(
  Langs,
  \l -> return str.fmt('  "%v": %vDic;\n', [l, l]);
), ""));
arr.push(Code, '  default: "Unreachable";\n};;\n\n');

arr.push(Code, str.fmt('Lang = ["%s"];\n', [Langs[0]]));

arr.push(Code, """
  /// \-> s
  getLang = \-> return Lang!;;

  /// \s -> s
  tlt = \s -> {
    T = dic.get(dicByKey(Lang!), s);
    return !T ? s : T!;
  };

  /// \s, [s.] -> s
  fmt = \tp, Rpls -> {
    R = [tp];
    for (i = 0:arr.size(Rpls)) R! = str.replace(R!, "%" + sys.toStr(i), Rpls[i]);
    return R!;
  };
  """
);


file.write(file.cat([root, "i18n.jkut"]), arr.join(Code, ""));
