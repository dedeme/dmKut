// Copyright 01-Aug-2024 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

import "libdm/log";
import "wdriver";

//: s
help = """
    Use:
      wdriver [start|stop|active|log|resetLog|page URL tm]
    where:
      start      : Start server.
      stop       : Stop server.
      active     : Returns 'true' or 'false' depending on web server state.
      log        : Returns JSON-serialized log.
      resetLog   : Reset log.
      page URL tm: Reads a web page and shows it in stdout. If reading fails
                   shows "" and write an error in log:
                     URL: page url.
                     tm : Seconds to wait for full page load.
  """;

//: s
geckoPath = file.cat([file.parent(sys.mainPath()), "geckodriver"]);
if (!file.exists(geckoPath)) {
  sys.println("File 'geckodriver' not found");
  return;
}

//: s
appHome = file.cat([sys.home(), ".dmKutApp", "wdriver"]);

//: [s]
sessionIdV = [""];

//: \ -> ()
start = \ -> {
  err = wdriver.start(geckoPath);
  if (err != "") {
    log.error(err);
    sys.println(err);
  }
};

// MAIN ------------------------------------------------------------------------

if (!file.exists(appHome)) {
  file.mkdir(appHome);
}
log.init(file.cat([appHome, "log.txt"]), 100);

:arr As = sys.args();

if (As.size() == 1) {
  switch (As[0]) {
    "start": start();
    "stop": wdriver.stop();
    "active": sys.println(wdriver.active() ? "true" : "false");
    "log": sys.println(log.readJs());
    "resetLog": log.reset();
    default: sys.println(help);
  }
} else if (arr.size(As) == 3 & As[0] == "page" & math.isDigits(As[2])) {
  ssId, ok = wdriver.connect();
  if (!ok) {
    err = "Connection failed:\n" + ssId;
    log.error(err);
    sys.println("");
    return;
  }

  pgRs = wdriver.page(math.stoi(As[2])!, ssId, As[1]);

  if (pgRs[1]) {
    sys.print(pgRs[0]);
  } else {
    log.error(pgRs[0]);
    sys.print("");
  }

  wdriver.disconnect(ssId);
} else {
  sys.println(help);
}


