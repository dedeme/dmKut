// Copyright 06-Apr-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Log utility.

File = [];

/// Sets file path for Log.
/// It is mandatory to call this function previously to call any other of this
/// file.
///   fpath  : File path.
/// \s -> ()
init = \fpath -> {
  arr.push(File, fpath);
  if (!file.exists(fpath)) file.write(fpath, "[]");
};

/// Returns 'true' if 'log' was initialized.
isInit = \-> return !File;;

// () -> s
date = \-> return time.fmt("%D/%M/%Y(%t)", time.now());;

// [[b,s,s]...] -> ()
write = \L -> file.write(File!, js.w(L));;

// \-> [[b,s,s]...]
read = \-> return js.r(file.read(File!));;

/// Returns the log serialized.
/// \-> s
readJs = \-> return file.read(File!);;

/// Adds a warning to log.
warning = \msg -> {
  L = read();
  arr.push(L, [false, date(), str.fromRunes(str.toRunes(msg)[:400])]);
  write(L);
};

/// Adds an error to log.
error = \msg -> {
  L = read();
  arr.push(L, [true, date(), str.fromRunes(str.toRunes(msg)[:400])]);
  write(L);
};

/// Reset log.
reset = \-> file.write(File!, "[]");;
