// Copyright 14-Jun-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Array of company quotes management.
/// NOTE: <qs> is a name for [<quote>.], sorted from after to before.

import "quote";

/// Returns a [quotes|error, ok] with quotes from the content of a
/// 'NICK.tb' file. (From after to before)
/// If the final number of quotes is different to 'size', or
/// some quote can not be read, the first error found is returned.
///   size: Number of quotes to return.
///   s   : Text from a 'NICK.tb' file. It is trimized by this function.
/// \i, s -> [<qs>|s, b]
fromStr = \size, s -> {
  try {
    Qs = arr.map(str.split(str.trim(s), "\n"), quote.fromStr);
    if (arr.size(Qs) != size)
      sys.throw(
        str.fmt("Wrong quotes number. Expected %d. Found %d", [size, arr.size(Qs)])
      );
    return [Qs, true];
  } catch (e) {
    return [e, false];
  }
};

/// Returns text to write in a 'NICK.tb' file.
/// \<qs> -> s
toStr = \qts -> return arr.join(arr.map(qts, quote.toStr), "\n");;

/// Returns the quotes number of 'qts'
/// \<qs> -> i
size = \qts -> return arr.size(qts);;

/// Corrects "qts" and returns a list with corrections.
///   qts: Historic quotes.
///   ----
///   Returns [quotes, errors]:
///     A[0] : Quotes, corrected if necessary.
///     A[1] : Array with corrections.
/// \<qs> -> [<qs>, [s.]]
correct = \qts -> {
  // [s.]
  Errs = [];

  // \<quote>, [s.] -> ()
  appendErrs = \:quote q, NewErrs ->
    for (e = NewErrs) arr.push(Errs, str.fmt("%v: %v", [q.date, e]));;

  if (!qts) return [[], []];

  // <quote>
  NewQs = [];
  Q1 = [[]];
  Q2 = [qts[0]];
  for (i = 1:arr.size(qts)) {
    Q1! = Q2!;
    Q2! = qts[i];

    // [<quote>, [s.]]
    Rs0 = quote.correct2(Q1!, Q2!);
    appendErrs(Rs0[0], Rs0[1]);

    // [<quote>, [s.]]
    Rs1 = quote.correct3(Rs0[0], Q2!);
    appendErrs(Rs1[0], Rs1[1]);

    arr.push(NewQs, Rs1[0]);
  }
  // [<quote>, [s.]]
  Rs = quote.correct1(Q2!);
  arr.push(NewQs, Rs[0]);
  appendErrs(Rs[0], Rs[1]);

  return [NewQs, Errs];
};

/// Corrects extra o missing quotes in "qts" and returns a list with corrected
/// quotes.
///   qts : Historic quotes of company.
///   mqts: Historic quotes of main company.
///   ----
///   Returns [quotes, errors]:
///     A[0] : Quotes, corrected if necessary.
///     A[1] : Array with corrections.
/// \<qs>, <qs> -> [<qs>, [s.]]
correctDates = \qts, mqts -> {
  Errs = [];

  // \<quote>, s -> ()
  appendErr = \:quote q, err ->
    arr.push(Errs, str.fmt("%v: %v", [q.date, err]));;

  // <qs>
  NewQs = [];
  MI = [0];
  mSz= arr.size(mqts);
  I = [0];
  sz = arr.size(qts);
  while () {
    mI = MI!;
    i = I!;

    if (mI < mSz) {
      :quote mQ = mqts[mI];
      if (i < sz) {
        :quote q = qts[i];
        if (mQ.date > q.date) {
          appendErr(mQ, "Missing quote");
          arr.push(NewQs, quote.newMissing(mQ.date));
          MI! += 1;
          continue;
        }
        if (mQ.date < q.date) {
          appendErr(q, "Extra quote");
          I! += 1;
          continue;
        }
        arr.push(NewQs, q);
        I! += 1;
        MI! += 1;
        continue;
      }
      appendErr(mQ, "Missing quote");
      arr.push(NewQs, quote.newMissing(mQ.date));
      MI! += 1;
      continue;
    }

    if (i < sz) {
      appendErr(qts[i], "Extra quote");
      I! += 1;
      continue;
    }
    break;
  }

  return [NewQs, Errs];
};

/// Merges new quotes with others already existent.
///   newQts: Last quotes read from the Internet. It can not be empty.
///   mqts  : Main company quotes. When quotes are of main company, it is an
///           empty array.
///   qts   : Existent quotes in file system.
///   ----
///   Returns [quotes, errors]:
///     A[0]: Quotes made with the following process:
///           1. Every quote on top with 'open = -1' is removed from "this"
///              in the range of "newQts" dates.
///           2. If there are new and old quotes for the same date, the old
///              is selected.
///           3. The return array is corrected.
///     A[1]: Array with Errors returned by 'correct' and 'correctDates' in format
///           "date: error".
/// \<qs>, <qs>, <qs> -> [<qs>, [s.]]
merge = \newQts, mqts, qts -> {
  I = [0];
  sz = arr.size(qts);
  Qs = arr.copy(qts); // to modify

  NqtsI = [0];
  nqtsSz = arr.size(newQts);
  QtsI = [0];
  while () {
    i = I!;
    nqtsI = NqtsI!;
    qtsI = QtsI!;

    if (i >= sz) break;

    if (nqtsI < nqtsSz) {
      :quote nQ = newQts[nqtsI];
      if (qtsI < sz) {
        :quote oldQ = qts[qtsI];
        if (nQ.date > oldQ.date) {
          Qs[i] = nQ;
          I! += 1;
          NqtsI! += 1;
          continue;
        }
        if (nQ.date < oldQ.date) {
          Qs[i] = oldQ;
          I! += 1;
          QtsI! += 1;
          continue;
        }
        if (quote.isMissing(oldQ)) Qs[i] = nQ;
        else Qs[i] = oldQ;
        I! += 1;
        QtsI! += 1;
        NqtsI! += 1;
        continue;
      }
    }

    Qs[i] = qts[qtsI];
    I! += 1;
    QtsI! += 1;
  }

  QsR = [Qs];
  // [s.]
  Errs = [];

  if (!!mqts) {
    // [<qs>, [s.]]
    Rs = correctDates(QsR!, mqts);
    QsR! = Rs[0];
    for (err = Rs[1]) arr.push(Errs, err);
  }

  // [<qs>, [s.]]
  Rs = correct(QsR!);
  QsR! = Rs[0];
  for (err = Rs[1]) arr.push(Errs, err);

  return [QsR!, Errs];
};

/// Returns an [<quote.], copy of this, ordered from before to after.
///   qts: Historic quotes.
/// \<qs> -> [<quote>.]
quotes = \qts -> return arr.reverse(qts);;

/// Returns a array of dates with 'size == qs_size(this)', ordered from
/// before to after
///   qts: Historic quotes.
/// \<qs> -> [s.]
dates = \qts ->
  return arr.map(arr.reverse(qts), \:quote q -> return q.date;);;

// \[f.] -> ()
normalize = \Vs -> {
  startV = [-1.0];
  for (i, n = Vs)
    if (n >= 0.0) {
      startV! = n;
      break;
    }

  if (startV! < 0.0) sys.throw("Every quote is < 0");

  Vs[0] = startV!;
  for (i = 1:arr.size(Vs))
    if (Vs[i] < 0.0) Vs[i] = Vs[i - 1];
};

/// Returns a array of opens with 'size = <qs>.size', normalized and
/// ordered from before to after
///   qts: Historic quotes.
/// \<qs> -> [f.]
opens = \qts -> {
  R = arr.map(arr.reverse(qts), \:quote q -> return q.open;);
  normalize(R);
  return R;
};

/// Returns a array of closes with 'size = qs_size(this)', normalized and
/// ordered from before to after
///   qts: Historic quotes.
/// \<qs> -> [f.]
closes = \qts -> {
  R = arr.map(arr.reverse(qts), \:quote q -> return q.close;);
  normalize(R);
  return R;
};

/// Returns a array of maxs with 'size = qs_size(this)', normalized and
/// ordered from before to after
///   qts: Historic quotes.
/// \<qs> -> [f.]
maxs = \qts -> {
  R = arr.map(arr.reverse(qts), \:quote q -> return q.max;);
  normalize(R);
  return R;
};

/// Returns a array of mins with 'size = qs_size(this)', normalized and
/// ordered from before to after
///   this: Historic quotes.
/// \<qs> -> [f.]
mins = \qts -> {
  R = arr.map(arr.reverse(qts), \:quote q -> return q.min;);
  normalize(R);
  return R;
};
