// Copyright 26-Mar-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// JSON table
///
/// A JSON table is a file with a JSON-string which store an array of objects
/// serialized.
///
/// Example of use:
///
/// tb = new(
///   "abc.tb", \-> return "[]";,
///   \o -> return js.wa(arr.mp(o, \e -> return js.ws(e);));,
///   \j -> return arr.mp(js.ra(j), \e -> return js.rs(e););
/// );
/// tb.write(["a", "b", "c"]);
/// assert arr.toStr(tb.read()) == '["a", "b", "c"]';
///
/// or
///
/// tb = newArr("abc.tb", \-> return "[]";, js.ws, js.rs);
/// tb.write(["a", "b", "c"]);
/// assert arr.toStr(tb.read()) == '["a", "b", "c"]';

/// Creates a new JSON table from a object.
/// If 'fpath' does not exist, a file with the text 'init' is created.
///   fpath  : Path of file to save table.
///   init   : Function to generate the JSON initial value.
///   toJs   : Function to serialize in JSON an object.
///   fromJs : Function to restore an object serialized in JSON.
///
/// The object returned has the following fields:
///   fpath  : Path of table file.
///   readJs : Returns the JSON text of the table.
///   read   : Returns the object which was serialized.
///   writeJs: Writes JSON text in the table file (overwriting it).
///   write  : Writes in the table file (overwriting it) an object.
/// (\s, \-> s, \* -> s, \s -> *) -> m<jstb>
new = \fpath, init, toJs, fromJs -> {
  if (!file.exists(fpath)) {
    file.write(fpath, init());
  }

  return {
    "fpath" : fpath,
    "readJs": \-> return file.read(fpath);,
    "read": \-> return fromJs(file.read(fpath));,
    "writeJs": \s -> file.write(fpath, s);,
    "write": \o -> file.write(fpath, toJs(o));
  };
};

/// Creates a new JSON table from an array.
/// If 'fpath' does not exist, a file with the text 'init' is created.
///   fpath  : Path of file to save table.
///   init   : Function to generate the JSON initial value.
///   toJs   : Function to serialize in JSON an array element.
///   fromJs : Function to restore an array element serialized in JSON.
///
/// The object returned has the following fields:
///   fpath  : Path of table file.
///   readJs : Returns the JSON text of the table.
///   read   : Returns the array which was serialized.
///   writeJs: Writes JSON text in the table file (overwriting it).
///   write  : Writes in the table file (overwriting it) an array.
/// (\s, \-> s, \* -> s, \s -> *) -> m<jstb>
newArr = \fpath, init, toJs, fromJs -> {
  if (!file.exists(fpath)) {
    file.write(fpath, init());
  }
  return {
    "fpath" : fpath,
    "readJs": \-> return file.read(fpath);,
    "read": \-> return arr.mp(js.ra(file.read(fpath)), \e -> return fromJs(e););,
    "writeJs": \s -> file.write(fpath, s);,
    "write": \A -> file.write(fpath, js.wa(arr.mp(A, \e -> return toJs(e);)));
  };
};

/// Returns 'true' if 'Tb' is of type m<jstb>.
/// \* -> b
checkType = \Tb -> {
  return sys.type(Tb) == "map" &
    map.hasKey(Tb, "fpath") & sys.type(Tb["fpath"]) == "string" &
    map.hasKey(Tb, "readJs") & sys.type(Tb["readJs"]) == "function" &
    map.hasKey(Tb, "read") & sys.type(Tb["read"]) == "function" &
    map.hasKey(Tb, "writeJs") & sys.type(Tb["writeJs"]) == "function" &
    map.hasKey(Tb, "write") & sys.type(Tb["write"]) == "function"
  ;
};

