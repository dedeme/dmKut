// Copyright 06-Apr-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Log utility.

File = [];

/// Sets file path for Log.
/// It is mandatory to call this function previously to call any other of this
/// file.
///   fpath  : File path.
///   logFail: If 'true', failures of program will be resgitered with 'sys.ffail'.
/// \s -> ()
init = \fpath, logFail -> {
  arr.push(File, fpath);
  if (!file.exists(fpath)) file.write(fpath, "[]");
  if (logFail)
    sys.ffail(\msg -> {
      error(msg);
      sys.println(msg);
    });
};

/// Returns 'true' if 'log' was initialized.
isInit = \-> return !arr.empty(File);;

// () -> s
date = \-> return time.format("%D/%M/%Y(%t)", time.now());;

// [[b,s,s]...] -> ()
write = \L -> file.write(
  File!,
  js.wa(
    arr.mp(
      L,
      \e -> return js.wa([
        js.wb(e[0]),
        js.ws(e[1]),
        js.ws(e[2])
      ]);
    )
  )
);;

// \-> [[b,s,s]...]
read = \-> return arr.mp(
  js.ra(file.read(File!)),
  \e -> {
    a = js.ra(e);
    return [js.rb(a[0]), js.rs(a[1]), js.rs(a[2])];
  }
);;

/// Returns the log serialized.
/// \-> s
readJs = \-> return file.read(File!);;

/// Adds a warning to log.
warning = \msg -> {
  L = read();
  arr.push(L, [false, date(), msg]);
  write(L);
};

/// Adds an error to log.
error = \msg -> {
  L = read();
  arr.push(L, [true, date(), msg]);
  write(L);
};

/// Reset log.
reset = \-> file.write(File!, "[]");;
