// Copyright 03-Mar-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Cgi management.

/// Standard password length.
klen = 300;

// Seconds == 30 days
tNoExpiration = 2592000;

// First key.
demeKey =
  "nkXliX8lg2kTuQSS/OoLXCk8eS4Fwmc+N7l6TTNgzM1vdKewO0cjok51vcdl" +
  "OKVXyPu83xYhX6mDeDyzapxL3dIZuzwyemVw+uCNCZ01WDw82oninzp88Hef" +
  "bn3pPnSMqEaP2bOdX+8yEe6sGkc3IO3e38+CqSOyDBxHCqfrZT2Sqn6SHWhR" +
  "KqpJp4K96QqtVjmXwhVcST9l+u1XUPL6K9HQfEEGMGcToMGUrzNQxCzlg2g+" +
  "Hg55i7iiKbA0ogENhEIFjMG+wmFDNzgjvDnNYOaPTQ7l4C8aaPsEfl3sugiw";

/// Key for responding when session is expired.
noSessionKey = "nosession";

/// Cgi home directory. Must be initialized with 'cgi.init'.
homeV = [""];

// File password.
// s
fkey = cryp.key(demeKey, str.len(demeKey));

// Communication key.
comKeyV = [""];

// Expiration in seconds\ Must be initialized with 'cgi.init'.
// [i]
tExpirationV = [0];

// USERS

// Returns a new user.
// \s, s, s -> <user>
userNew = \id, pass, level ->
  return {
    "id"   : id,
    "pass" : pass,
    "level": level
  };
;

// \<user> -> s
userToJs = \u ->
  return js.wa([
    js.ws(u.id),
    js.ws(u.pass),
    js.ws(u.level)
  ]);
;

// \s -> <user>
userFromJs = \s -> {
  A = js.ra(s);
  return userNew(
    js.rs(A[0]),
    js.rs(A[1]),
    js.rs(A[2])
  );
};

// \[<user.>] -> ()
writeUsers = \Us -> {
  j = js.wa(arr.map(Us, userToJs));
  file.write(path.cat([homeV!, "users.tb"]), cryp.encode(fkey, j));
};

// \-> [<user>.]
readUsers = \-> {
  j = cryp.decode(fkey, file.read(path.cat([homeV!, "users.tb"])));
  return arr.map(js.ra(j), userFromJs);
};

// SESSIONS

// Returns a new session
// \s, s, s, s, s, i, i -> <session>
sessionNew = \id, comKey, conKey, user, level, tm, lapse ->
  return {
    "id": id,
    "comKey": comKey,
    "conKey": conKey,
    "user"  : user,
    "level" : level,
    "tm"    : tm,
    "lapse" : lapse
  };
;

// \<session> -> s
sessionToJs = \s ->
  return js.wa([
    js.ws(s.id),
    js.ws(s.comKey),
    js.ws(s.conKey),
    js.ws(s.user),
    js.ws(s.level),
    js.wi(s.tm),
    js.wi(s.lapse)
  ]);
;

// \s -> <session>
sessionFromJs = \s -> {
  A = js.ra(s);
  return sessionNew(
    js.rs(A[0]),
    js.rs(A[1]),
    js.rs(A[2]),
    js.rs(A[3]),
    js.rs(A[4]),
    js.ri(A[5]),
    js.ri(A[6])
  );
};

// If 's' is in time, returns a new session with 's\tm' updated. Otherwise
// return [].
// \<session> -> [<session>]|[]
updateSession = \s -> {
  now = time.now() / 1000;
  if (s.tm + s.lapse < now) return [];
  return [sessionNew(s.id, s.comKey, s.conKey, s.user, s.level, now, s.lapse)];
};

// \[<session>.] -> ()
writeSessions = \Ss -> {
  j = js.wa(arr.map(Ss, sessionToJs));
  file.write(path.cat([homeV!, "sessions.tb"]), cryp.encode(fkey, j));
};

// \-> [<session>.]
readSessions = \-> {
  j = cryp.decode(fkey, file.read(path.cat([homeV!, "sessions.tb"])));
  return arr.map(js.ra(j), sessionFromJs);
};

// Adds session and purges sessions\
// \s, s, s, s, s, i -> ()
addSession = \sessionId, comKey, conKey, user, level, lapse -> {
  now = time.now() / 1000;
  NewSessions = arr.filter(readSessions(), \S -> return S.tm + S.lapse >= now;);
  arr.push(
    NewSessions,
    sessionNew(sessionId, comKey, conKey, user, level, now, lapse)
  );
  writeSessions(NewSessions);
};

// Replace one session
// \<session> -> ()
replaceSession = \s -> {
  NewSessions = arr.filter(readSessions(), \oldS -> return oldS.id != s.id;);
  arr.push(NewSessions, s);
  writeSessions(NewSessions);
};

// PUBLIC FUNCTIONS --------------------------------------------------------

/// Initialize cgi.
///   homeDir: Absolute path of 'cgi' home directory.
///   texpiration: Expiration time in seconds\
/// \s, i-> ()
init = \homeDir, texpiration-> {
  homeV! = homeDir;
  tExpirationV! = texpiration;

  if (!file.exists(homeDir)) {
    file.mkdir(homeDir);
    writeUsers([]);
    putUser("admin", demeKey, "0");
    writeSessions([]);
  }
};

// USERS

/// Adds or modifies an user.
/// \s, s, s -> ()
putUser = \id, pass, level -> {
  pass = cryp.key(pass, klen);
  Users = readUsers();
  newUser = userNew(id, pass, level);
  addV = [true];
  for (i, u = Users) {
    if (u.id == id) {
      addV! = false;
      Users[i] = newUser;
      break;
    }
  }
  if (addV!) arr.push(Users, newUser);
  writeUsers(Users);
};

/// Removes an user.
/// \s -> ()
delUser = \id -> {
  Users = readUsers();
  writeUsers(arr.filter(Users, \u -> return u.id != id;));
};

/// Check user password and returns:
///   - If user exsits and password is correct, the user level.
///   - Otherwise, an empty string.
/// \s, s -> s
checkUser = \id, pass -> {
  pass = cryp.key(pass, klen);
  for (u = readUsers()) {
    if (u.id == id & u.pass == pass) return u.level;
  }
  return "";
};

// MANAGEMENT

/// Sends to client 'communicationKey', 'userId' and 'userLevel'. If
/// conection fails every one is "".
///   sessionId: Session identifier.
///   return   : Response with next fields:
///                 key   : String
///                 conKey:String
///                 user  : String
///                 level : String.
/// \s -> s
connect = \sessionId -> {
  comKeyV! = sessionId;
  failRp = rp({
    "key": js.ws(""),
    "conKey": js.ws(""),
    "user": js.ws(""),
    "level": js.ws("")
  });
  oldSOp = arr.find(readSessions(), \s -> return s.id == sessionId;);
  if (!oldSOp) return failRp;
  oldS = oldSOp!;

  sOp = updateSession(oldS);
  if (!sOp) return failRp;
  s = sOp!;

  conKey = cryp.genK(klen);
  replaceSession(sessionNew(
    s.id, s.comKey, conKey, s.user, s.level, s.tm, s.lapse
  ));
  return rp({
    "key": js.ws(s.comKey),
    "conKey": js.ws(conKey),
    "user": js.ws(s.user),
    "level": js.ws(s.level)
  });
};

/// Sends to client 'sessionId', 'communicationKey' and 'userLevel'. If
/// conection fails every one is "".
///   key           : Communication key
///   user          : User id.
///   pass          : User password.
///   withExpiration: If is set to false, session will expire after 30 days\
///   return        : Response with next fields:
///                     sessionId: String
///                     key      : String
///                     conKey   : String
///                     level    : String
/// \s, s, s, b -> s
authentication = \key, user, pass, withExpiration -> {
  comKeyV! = key;
  level = checkUser(user, pass);

  if (level != "") {
    sessionId = cryp.genK(klen);
    newComKey = cryp.genK(klen);
    conKey = cryp.genK(klen);
    lapse = withExpiration ? tExpirationV! : tNoExpiration;

    addSession(sessionId, newComKey, conKey, user, level, lapse);

    return rp({
      "sessionId": js.ws(sessionId),
      "key": js.ws(newComKey),
      "conKey": js.ws(conKey),
      "level": js.ws(level)
    });
  }
  return rp({
    "sessionId": js.ws(""),
    "key": js.ws(""),
    "conKey": js.ws(""),
    "level": js.ws("")
  });
};

/// Returns the session communication key if ssId is a valid session.
///   ssId  : Session identifier.
///   conKey: Connection key. If its value is "", this parameter is not used.
/// \s, s -> [s]|[]
getComKey = \ssId, conKey -> {
  sOp = arr.find(readSessions(), \s -> return s.id == ssId;);
  if (!sOp) return [];
  s = sOp!;

  if (conKey != "" & conKey != s.conKey) return [];
  comKeyV! = s.comKey;
  return [comKeyV!];
};

/// Changes user password.
/// The operation will fail if 'user' authentication fails\
///    user   : User id to change password.
///    oldPass: Old password.
///    newPass: New password.
///    return : Response with next field:
///               ok: Bool ('true' if operation succeds)
/// \s, s, s -> s
changePass = \user, oldPass, newPass -> {
  okV = [false];
  Us = readUsers();
  for (i, u = Us) {
    if (u.id == user) {
      if (cryp.key(oldPass, klen) == u.pass) {
        Us[i] = userNew(u.id, cryp.key(newPass, klen), u.level);
        writeUsers(Us);
        okV! = true;
      }
      break;
    }
  }
  return rp({"ok": js.wb(okV!)});
};

/// Deletes 'sessionId' and returns an empty response.
///   sessionId: Session identifier.
/// \s -> s
delSession = \sessionId -> {
  writeSessions(arr.filter(readSessions(), \s -> return s.id != sessionId;));
  return rpEmpty();
};

// RESPONSES

/// Returns a generic response to send to client.
///  Rp: Response. It is a Json object.
///      Example of reponse:
///        {"error": js.ws(msg)}
/// \m -> s
rp = \Rp -> return cryp.encode(comKeyV!, js.wo(Rp));;

/// Returns an empty response.
/// \-> s
rpEmpty = \-> return rp({});;

/// Returns a message with an only field "error" with value 'msg'.
///   msg: Error message.
/// \s -> s
rpError = \msg -> return rp({"error": js.ws(msg)});;

/// Returns a message with an only field "expired" with value 'true',
/// codified with the key 'noSessionKey' ("nosession")
/// \-> s
rpExpired = \-> {
  comKeyV! = noSessionKey;
  return rp({"expired": js.wb(true)});
};

