// Copyright 24-Mar-2022 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Web server.

// Tcp server.
Sv = [];
// Server root in the file system.
Root = [];

// mime types
Mimetypes = {
  ".aac": "audio/aac",
  ".abw": "application/x-abiword",
  ".avi": "video/x-msvideo",
  ".bin": "application/octet-stream",
  ".bmp": "image/bmp",
  ".bz": "application/x-bzip",
  ".bz2": "application/x-bzip2",
  ".cda": "application/x-cdf",
  ".css": "text/css",
  ".csv": "text/csv",
  ".doc": "application/msword",
  ".epub": "application/epub+zip",
  ".gz": "application/gzip",
  ".gif": "image/gif",
  ".htm": "text/html",
  ".html": "text/html",
  ".ico": "image/vnd.microsoft.icon",
  ".jar": "application/java-archive",
  ".jpeg": "image/jpeg",
  ".js": "text/javascript",
  ".json": "application/json",
  ".mid": "audio/x-midi",
  ".midi": "audio/x-midi",
  ".mjs": "text/javascript",
  ".mp3": "audio/mpeg",
  ".mp4": "video/mp4",
  ".mpeg": "video/mpeg",
  ".odp": "application/vnd.oasis.opendocument.presentation",
  ".ods": "application/vnd.oasis.opendocument.spreadsheet",
  ".odt": "application/vnd.oasis.opendocument.text",
  ".oga": "audio/ogg",
  ".ogv": "video/ogg",
  ".ogx": "application/ogg",
  ".otf": "font/otf",
  ".png": "image/png",
  ".pdf": "application/pdf",
  ".php": "application/x-httpd-php",
  ".ppt": "application/vnd.ms-powerpoint",
  ".rar": "application/vnd.rar",
  ".rtf": "application/rtf",
  ".svg": "image/svg+xml",
  ".tar": "application/x-tar",
  ".tif": "image/tiff",
  ".tiff": "image/tiff",
  ".ttf": "font/ttf",
  ".txt": "text/plain",
  ".wav": "audio/wav",
  ".xhtml": "application/xhtml+xml",
  ".xls": "application/vnd.ms-excel",
  ".xml": "application/xml",
  ".xul": "application/vnd.mozilla.xul+xml",
  ".zip": "application/zip",
  ".7z": "application/x-7z-compressed"
};

/// Start server.
///   port   : Connection port.
///   tm     : Maximum 'tm' milliseconds to finish any I/O operation.
///            If 'tm' <= 0 there will not have limit for waiting.
///   root   : Root directory of web pages and cgi programs.
///               -Web pages must be in 'root'/www.
///               -Binary files must be in 'root'/bin.
///               -Data directory will be in 'root'/dmcgi.
///   handler: Function to process requests.
///   ferror : Function to process errors.
/// \i, i, s, (\s->s), (\s->()) -> ()
start = \port, tm, root, handler, ferror -> {
  if (!arr.empty(Sv)) return;

  arr.push(Sv, tcp.server(port));
  arr.push(Root, path.cat([root, "www"]));
  file.cd(root);

  while () {
    if (arr.empty(Sv)) break;

    connErr = tcp.accept(Sv!, tm);
    if (connErr[1] != "") {
      ferror("Connection failed: " + connErr[1]);
      continue;
    }
    conn = connErr[0];

    thread.run(\ -> {
      txErr = tcp.read(conn, 10_000_000);
      if (txErr[1] != "") {
        ferror(txErr[1]);
      } else {
        Err = tcp.writeBin(conn, bytes.fromStr(handler(txErr[0])));
        if (!arr.empty(Err)) {
          ferror(Err[0]);
        }
      }
      tcp.closeConnection(conn);
    });
  }
};

/// Stop server.
/// \-> ()
stop = \ -> {
  sys.println("Stopped");
  if (!arr.empty(Sv)) {
    sv = arr.shift(Sv);
    tcp.closeServer(sv);
  }
};

/// Returns an array with file path data or an empty array if 'rq' is not a
/// valid GET request.
///
/// NOTE: Only HTTP/1.1 requests are allowed.
///   rq: Complete client request.
/// \s -> ([s] | [])
getRq = \rq -> {
  ix = str.index(rq, "\n");
  if (ix == -1) return [badRequestRp(rq)];

  rq2 = str.trim(rq[0:ix]);
  if (!str.starts(rq2, "GET ") | ! str.ends(rq2, " HTTP/1.1")) return [];
  rq3 = str.trim(rq2[4:]);
  ix2 = str.index(rq3, " ");
  if (ix2 == -1) return [badRequestRp(rq)];

  r = rq3[:ix2];
  ix3 = str.index(r, "?");
  r2 = ix3 != -1 ? r[:ix3] : r;

  ext = path.extension(r2);
  if (ext == "") {
    return ["HTTP/1.1 308 Permanent Redirect\n" +
      "Location: " + (ix3 == -1
        ? path.cat([r2, "index.html"])
        : path.cat([r2, "index.html"]) + r[ix3:]) + "\n\n"
    ];
  }

  fpath = path.canonical(path.cat([Root!, r2]));
  if (!file.exists(fpath)) return [notFoundRp()];

  ext2 = path.extension(fpath);
  type = map.hasKey(Mimetypes, ext2) ? Mimetypes[ext2] : "text/plain";

  body = file.read(fpath);

  return ["HTTP/1.1 200 OK\n" +
    "Server: Kut Webserver\n" +
    "Content-type: " + type + "\n" +
    "Content-length: " + math.toStr(str.len(body)) + "\n\n" +
    body];
};

/// Executes ccgi.sh and returns an array with its result or an empty array if
/// rq is not a valid POST request for 'cgi.kut'.
dmCgiRq = \rq -> {
  rqUnix = str.replace(rq, "\r", "");
  ix = str.index(rq, "\n");
  if (ix == -1) return [badRequestRp(rq)];

  rq2 = str.trim(rq[0:ix]);
  if (rq2 != "POST /cgi-bin/ccgi.sh HTTP/1.1") return [];

  ix2 = str.index(rqUnix, "\n\n");
  if (ix2 == -1) return [badRequestRp(rq)];

  rqUnix2 = str.trim(rqUnix[ix2 + 2:]);
  ix3 = str.index(rqUnix2, ":");
  if (ix3 == -1) return [badRequestRp(rq)];
  cmd = rqUnix2[:ix3];
  par = rqUnix2[ix3 + 1:];

  rpErr = sys.cmd(path.cat(["bin", cmd]), [par]);

  if (rpErr[1] != "") return [
    (rpErr[0] != "") ? rpErr[0] : rpErr[1]
  ];

  return [textRp(rpErr[0])];
};

/// Return a html valid response.
///   h: HTML text.
/// \s -> s
htmlRp = \h -> {
  return "HTTP/1.1 200 OK\n" +
    "Server: Kut Webserver\n" +
    "Content-type: text/html\n" +
    "Content-length: " + math.toStr(str.len(h)) + "\n\n" +
    h;
};

/// Return a text valid response.
///   h: HTML text.
/// \s -> s
textRp = \tx -> {
  return "HTTP/1.1 200 OK\n" +
    "Server: Kut Webserver\n" +
    "Content-type: text/text\n" +
    "Content-length: " + math.toStr(str.len(tx)) + "\n\n" +
    tx;
};

/// Return a 'Not Found' response.
/// \-> s
notFoundRp = \ -> {
  return "HTTP/1.1 404 Not Found\n" +
    "Server: Kut Webserver\n" +
    "Content-type: text/plain\n\n" +
    "Page not found";
};

/// Return a 'Bad Request' response.
///   rq: Request.
/// \s -> s
badRequestRp = \rq -> {
  return "HTTP/1.1 400 Bad Request\n" +
    "Server: Kut Webserver\n" +
    "Content-type: text/plain\n\n" +
    "Bad Request:\n" + rq;
};

echoRp = \rq -> {
  tx = "echo\n" + rq;
  return "HTTP/1.1 200 OK\n" +
    "Server: Kut Webserver\n" +
    "Content-type: text/plain\n" +
    "Content-length: " + math.toStr(str.len(tx)) + "\n\n" +
    tx;
};

