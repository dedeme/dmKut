// Copyright 05-Jul-2023 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Maximum - minimum.

import "../model";
import "../cts";
import "doc/mmDoc";

/// Returns a new 'appr' model.
/// \-><model>
new = \ -> return model.new(
    "MX_MN",
    "Máximo - Mínimo",
		mmDoc.text,
		["Días", "Banda"],
    [model.dayParam, model.percParam]
  );;

/// Caculates references.
/// \[f.], [f.] -> [f.]
refs = \(FF|F) :arr Closes, :arr Params -> {
  size = Closes.size();
  ndates = cts.historicQuotes;
  ncos = size / ndates;
  daysf = Params[0];
  days = math.ftoi(daysf);
  idateStep = days * ncos;
  strip = Params[1];
  stripUp = 1.0 + strip;
  stripDown = 1.0 - strip;

  Refs = arr.new(0.0, size);
  IsSolds = arr.new(0, ncos);

  for (idate = 0:days*ncos-1:ncos) {
    for (ico = 0:ncos) {
      icurrent = idate + ico;
      c = Closes[icurrent];
      Refs[icurrent] = c * stripDown;
    }
  }

  idate = days * ncos;
  oldIdate = idate - idateStep;
  for (ico = 0:ncos) {
    icurrent = idate + ico;
    iold = oldIdate + ico;

    c = Closes[icurrent];
    oldC = Closes[iold];

    if (c <= oldC) {
      IsSolds[ico] = 1;
      Refs[icurrent] = oldC * stripUp;
    } else {
      Refs[icurrent] = oldC * stripDown;
    }
  }

  for (idate = (days+1)*ncos:size-1:ncos) {
    previousIdate = idate - ncos;
    oldIdate = idate - idateStep;
    for (ico = 0:ncos) {
      icurrent = idate + ico;
      iold = oldIdate + ico;
      iprevious = previousIdate + ico;

      c = Closes[icurrent];
      oldC = Closes[iold];
      rf = Refs[iprevious];

      if (IsSolds[ico] == 1) {
        if (c > rf) {
          IsSolds[ico] = 0;
          Refs[icurrent] = oldC * stripDown;
        } else {
          newRf = oldC * stripUp;
          if (newRf < rf) Refs[icurrent] = newRf;
          else Refs[icurrent] = rf;
        }
      } else {
        if (c < rf) {
          IsSolds[ico] = 1;
          Refs[icurrent] = oldC * stripUp;
        } else {
          newRf = oldC * stripDown;
          if (newRf > rf) Refs[icurrent] = newRf;
          else Refs[icurrent] = rf;
        }
      }
    }
  }

  return Refs;
};
