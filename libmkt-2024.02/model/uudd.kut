// Copyright 04-Jul-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// up-up, down-down model.

import "../model";
import "../cts";
import "doc/uuddDoc";

/// Returns a new 'appr2' model.
/// \-><model>
new = \ -> return model.new(
    "SS_BB",
    "Sube-Sube/Baja-Baja",
    uuddDoc.text,
    ["Inicio", "Veloc."],
    [model.percParam, model.percParam]
  );;

/// Caculates references.
/// \[f.], [f.] -> [f.]
refs = \(FF|F) :arr Closes, :arr Params -> {
  size = Closes.size();
  ndates = cts.historicQuotes;
  ncos = size / ndates;
  start = Params[0];
  upStart = 1.0 + start;
  downStart = 1.0 - start;
  speed = Params[1] * 10.0;

  Refs = arr.new(0.0, size);
  IsSolds = arr.new(0, ncos);
  for (i = 0:ncos) Refs[i] = Closes[i] * downStart;

  for (idate = ncos:size-1:ncos) {
    previousIdate = idate - ncos;
    for (ico = 0:ncos) {
      icurrent = idate + ico;
      iprevious = previousIdate + ico;

      c = Closes[icurrent];
      prvC = Closes[iprevious];
      rf = Refs[iprevious];
      if (IsSolds[ico] == 1) {
        dif = c - prvC;
        rf0 = rf * (prvC + dif * speed) / prvC;
        rf2 = rf < rf0 ? rf : rf0;
        if (c > rf2) {
          IsSolds[ico] = 0;
          Refs[icurrent] = c * downStart;
        } else {
          Refs[icurrent] = rf2;
        }
      } else {
        dif = c - prvC;
        rf0 = rf * (prvC + dif * speed) / prvC;
        rf2 = rf > rf0 ? rf : rf0;
        if (c < rf2) {
          IsSolds[ico] = 1;
          Refs[icurrent] = c * upStart;
        } else {
          Refs[icurrent] = rf2;
        }
      }
    }
  }
  return Refs;
};
